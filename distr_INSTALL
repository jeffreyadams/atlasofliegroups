Instructions  installation of the Atlas software.
For more information about the software see the README file.

The Atlas software provides two main programs, called 'atlas' and 'Fokko'.

Prerequisites: you must have a C++ compiler, and GNU 'make' installed, as well
as a _development version_ of the GNU readline library (one that includes
header files needed during compilation). If you have difficulties with
readline, you can do without it by specifying an argument readline=false in
the make commands below, but command editing will then not be available.

The default compiler name configured in the Makefile is g++ with language
selection flag -std=c++0x, but you can substitute other compilers for this,
provided they have at least some support for C++11 (notably basic rvalue
references and the unique_ptr and shared_ptr class templates; g++-4.4 is OK).

There is some dependence on UNIX conventions (for instance using '/' as
directory separator. Compilation on Linux, Mac OSX, solaris, should be easy.
Compilation under Windows probably requires a bit more work,

SHORT INSTRUCTIONS:

On many systems simply do:

make

(the impatient may add a flag -jN to compile up to N files in parallel)
which should compile binaries atlas and Fokko in the current directory.

Apart from potential difficulties involving "readline", which must be
installed independently of our project or else turned off, the compilation
should normally be clean. But if you do encounter problems, please inform the
Atlas project (see the end of this file for addresses), as we like to be aware
of any difficulties encountered in compiling the software.

Once compiled you can run the programs by giving their name in a path with at
least one '/', for instance ./Fokko for the Fokko program (which one
terminates with the command 'qq'). For atlas it is best to change directory to
atlas-scripts and then run ../atlas; then scripts that come with the
distribution can be loaded by commands like '<basic' (which loads the
standard prelude); the atlas program is terminated by the command 'quit'.

Then to complete, one can optionally do either

make install BINDIR=<dir>

where <dir> is a directory in your search path (usually ~/bin), or, to install
the essential files separately from the source files, do something like

rm sources/interface/io.o
make install INSTALLDIR=/usr/local/atlas BINDIR=/usr/local/bin

(the example is for system-wide installation, and requires privilege to do so).


LONGER VERSION:

The 'make install' command serves two purposes: to make 'Fokko' and 'atlas'
more easily callable (from your search path), and possibly move the compiled
system to a place where it can function independently of the source directory.

the general form is

make install INSTALLDIR=... BINDIR=...

Both of the assignments are optional; if INSTALLDIR is given the this installs
the essential programs and data separately from the sources in that directory
(created if necessary), and if BINDIR is given this creates executable files
'atlas' and 'Fokko' in the specified directory (actually a symbolic link and
a short shell script invoking the programs in INSTALLDIR). The default for
both INSTALLDIR and BINDIR is the current directory, but leaving both so, the
call 'make install' does nothing. It is advised to change at least BINDIR from
the default, allowing 'make' to create the shell script BINDIR/atlas that
executes the binary INSTALLDIR/atlas with some hidden arguments; these ensure
loading a small "standard prelude" of predefined functions and setting a
search path for further atlas scripts that you might want to load manually.

If specified, INSTALLDIR should probably be a not yet existing subdirectory
with 'atlas' in its name to keep things together, as the programs and
directories with auxiliary files are placed directly into INSTALLDIR. On the
other hand BINDIR should be an existing directory mentioned in your $PATH.

The Fokko program also needs to locate some auxiliary (help) files for which
it uses a search path fixed during compilation. This means that if you set
INSTALLDIR to differ from the compilation directory, the Fokko program needs to
be slightly modified to be able to locate the (moved) help files. This is
easily obtained by removing the small object file that stores the search path,
after which recompilation is automatically done within the 'make install'
command, and uses the INSTALLDIR value to correctly set the compiled path.
This explains the need for 'rm sources/interface/io.o' above.

Should Fokko nevertheless report problem in locating help files (in which case
it will tell where it looked in vain) the compiled-in search path can be
overridden by a path on the 'Fokko' command line (ending with /messages/)


COMPILING OPTIONS

There are some switches that can be used to control the compilation process.

If you get some errors about readline see below, you may try:

  make readline=false

to compile without readline.

Some other options are (their opposites are the default)

  verbose=true
  debug=true
  optimize=false

We recommend verbose=true, which prints out a very small amount of
information about how far along the process is.

Do

make clean

to start from scratch.

For information using the enhanced command line interpreter atlas, see below.

-------------------------------------------------------------------
Compiling with readline

Both Fokko and atlas programs are built to use the readline library which
allows to more easily type commands, providing simple editing, history (with
arrow keys) and command completion (with <tab>) among other useful command
line features. You should be able to compile with readline on most Linux
distributions, which usually requires installing the "development" readline
package (for instance libreadline-dev or libreadline6-dev), which might not be
pre-installed in the distribution, even if readline is. For Mac OSX see below.

The variable rl_libs tells the compiler to include certain
libraries needed for readline. The default is

rl_libs = -lreadline

Another possibility is to add -lcurses or -lncurses to the variable, if this
is required on you system

If you can't get them to compile with readline, you can as last resort do

make readline=false

to compile the programs without this feature.
-------------------------------------------------------------------
Compiling with readline on a Mac (contributed by David Vogan)

Get readline-5.2.tar.gz, for example from

ftp://ftp.cwru.edu/pub/bash/readline-5.2.tar.gz

Mac automatically unzips.  Put file readline-5.2.tar someplace
convenient.  In a terminal window, go to the directory with this tar
file, and type

  tar -xvf readline-5.2.tar

This will create a new subdirectory "readline-5.2."  Do a cd to that
directory.

There appears to be a small problem with the "configure" script when
it is used with OS 10.4. To work around it, edit the file

readline-5.2/support/shobj-conf

Line 170 should be changed from

SHOBJ_LDFLAGS='-dynamic'

to

SHOBJ_LDFLAGS='-dynamiclib'

Back in the readline-5.2 directory, type

  ./configure

Type

  make everything

Type

  sudo make install

The Gnu readline library should now be installed on your Mac.

There is a problem when the Atlas software is linked: the linker
will find most of the readline commands in someplace like

/usr/lib/libreadline.dylib,

instead of in the Gnu readline library that you just installed, which
lives at

/usr/local/lib/libreadline.5.dylib

The difficulty is that the Mac library lacks two or three of the
commands used in the Atlas readline, so the linker will refuse to
finish.  I don't know the best or most natural way to fix this.  One
thing which works is to edit the Makefile, modifying the line

        rl_libs := -lreadline

to read

        rl_libs := -lreadline.5 -lcurses

Now the Atlas software should link.

-------------------------------------------------------------------

ATLAS

While the program 'Fokko' gives a direct interface to the basic functions in
the Atlas software, the 'atlas' program provides the same functionality
withing the setting of a fairly elaborate user programming language.

This is best run from the subdirectory atlas-scripts, which provides a large
collection of predefined user functions, and also contains the help files for
the program (unlike Fokko, you cannot access the help files from the atlas
command line; just open the files separately in a text editor). A first
introduction to various aspects of the language is given in atlas.help, a
long list of functions built into the language is given in functions.help, and
a brief overview of the scripts that come with the system is given in
scripts.help (very succinct, the main purpose is to order the scripts by
dependency on each other; for more information read the scripts themselves).

-------------------------------------------------------------------
WINDOWS

(No recent binary distribution for Windows is available. The following refers
to a Windows distribution of an early version of the software.)

1) Download the distribution atlas4win....zip to your windows
machine.

2) Right click on the file to extract the archive.

3) Double click on the atlas file to execute.

When you extract the file you create a folder. This contains the
executable atlas.exe. It also contains three necessary dll files. You
must run the executable from a folder containing these files.
-------------------------------------------------------------------

MAC

1) Download the distribution atlasMac....zip to your mac.

2) Double click on the file to extract the archive.

3) Double click on the atlas file to execute it.

The executable must be in the same directory as the messages directory
for help system to work.

If the help system doesn't work, try the following.  Open a terminal
window, and navigate to the directory containing atlasNRL. Give the
command "./atlasMacNRL".

-------------------------------------------------------------------

Please report any problems to Jeffrey Adams at jda@math.umd.edu or to
Marc.van-Leeuwen@math.univ-poitiers.fr.
