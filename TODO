* Work on the Atlas library

- Make |Split| type use |big_int| fields, at least in the axis language.
- Fix lack of edge flipping in first (classical) extended block contructor
- Rework |Block_Base| which should not contain "extended" field |orbits|
- Rewrite block construction using methods inspired by synthetic operations
- Rewrite K type computations to use data type more compatible with Param

* Work on the Fokko program

- correct bug with mysterious typeahead after bailing out with ? (done?)
- clean up the mess dealing with input (interface/input, io/interactive...)

- understand why extended block for SL(4,R) trivial is wrong (all4+) in Fokko

* Work on the axis language

- Prevent abuse of type system possible by capturing (in functions) variables
  whose type is unsettled (like |[*]|), which by well timed assignments can
  lead to illegal occurences of |*| (e.g. as type of a concrete value). This
  is quite subtle; maybe forbid binding to names with such type altogether.

- Check whether using |braek| or |return| could leave the runtime stack in a
  bad state in certain cases, and if so provide chatch blocks to clean up

- give better type error message about "needed type" when a let expression
  pattern does not match the type of the defining expression. What appears to
  happen is that if a tuple type is provided but the number of components
  mismatches the pattern, the "needed" components are taken from that tuple, and
  the user must figure out that their number was in fact too few (or too much).

- Maybe allow |set a:=b,b:=a+b| as alternative for |set (a,b):=(b,a+b)|

- Allow repeated selection assignment |M[1][3]:=0| or |a[i].re:=5|
  This could possibly be done by transformation inside the parser

- Improve output of expressions
  Distinguish one-line (maybe abbreviated) and long forms.

- Implement operate-and-assign directly. While 'v #:= x' (with vec v, int x)
  is easy to write (and common in loop bodies), it is converted to 'v := v#x'
  which is not efficient: with the operation '#' separated in the syntax tree
  from the assignement ':=', it has no chance of knowing that the same object
  can be used to store the result, even if the pointer accessing it has the
  lowest possible refcount (which is 2, since the name 'v' must be sharing the
  pointer). This could however be made possible if built-in compound
  assignment were handled as a single operation for certain built-in
  operations. Note that this can never be done for user-defined functions, as
  they have no means of indicating how the return value might reuse the memory
  from the argument. The combined operator would be most useful for
  concatenation, but operations on large values, such as vector addition,
  could also profit; indeed also (big) integer arithmetic might use this.

- Extend type system to deal with second-order types
- Allow encapsulation into user-defined types (possibly using 2nd order types)


* Work on the atlas program

- Fix crashing of function |extended_KL_block|

* Work on the atlas scripts

- Complete the groups in groups.at (types G,F); also avoid use of "s" etc.
- Adapt scripts to use/illustrate the new language features, once implemented.

* Work on documentation

- Write a tutorial on the axis languge, in bottom-up style

* Work on makefiles, distribution and support programs (cwebx)
- change build process so 'atlas' is ensured to get most recent version string
- change name of parser.y to parser.ypp, and adapt all Makefiles
- Figure out how to avoid 'unrecognised typedefs' all the time
- Make cweavex format a 2-line "do x; while(y);" with correct indentation
- Make cwebx messages mention file name, to 'make -jN' output comprehensible
- Add some make targets for recording options as suggested by Nelson Beebe
