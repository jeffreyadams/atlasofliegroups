
The "Ktypeform" command is part of the K-type suite of commands:
KTypeform, Ktypemat, srtest and branch. It describes the irreducible
representations of K "K-types". See [David Vogan, Branching to a
Maximal Compact Subgroup, in proceedings of the conference for Roger
Howe, Singapore 2007].

Ktypeform writes a K-type as a formal linear combination of final
standard representations restricted to K.

*** Overview ***

In the setting of the Atlas software a "standard representation" is an
induced representation from a discrete series or limit of discrete
series on a real parabolic subgroup. (In the literature this is a
"standard limit representation"). Such a representation I is "final"
if certain conditions hold (see below), which are automatic in the
case of regular infinitesimal character, and which guarantee that I
has a unique lowest K-type mu(I). Every irreducible representation of
K is obtained this way.

In the Atlas software we work with a fixed complex Cartan subgroup T
and set of positive roots. Fix an element x of the KGB space (see the
help file for the KGB command). Then conjugation by x defines a Cartan
involution theta=theta_x. The fixed points K=K_x of theta is the
complexified maximal compact subgroup for a real form of G.

The data for a standard representation of G is a pair (x,lambda) where
lambda is a character of T(R)_rho: this is a two-fold cover of the
real form of T defined by theta. The differential of lambda is
required to be (weakly) dominant for all positive theta-imaginary
roots. Associated to this data is a standard representation
I(x,lambda), with infinitesimal character the differential of lambda.

In working with K-types we are only interested in the restriction of
standard modules to K. For this reason we may assume lambda is an
algebraic character of the complex torus T_rho, i.e. lambda is in
X^*(T)+rho. The restriction of I(x,lambda) to K only depends on the
image of lambda in X^*(T)+rho/(1-theta)X^*(T).

Definition: a "standard K-parameter" is a pair (x,lambda) where x is a
KGB element, lambda is in X^*(T)+rho/(1-theta)X^*(T) and
<lambda,alpha^v> >= 0 for all positive theta-imaginary roots alpha
(here theta=theta_x).

Attached to a standard K-parameter (x,lambda) is a standard module
I_K(x,lambda) restricted to K=K_x.

Definition: a standard K-parameter (x,lambda) is "final" if

1) <lambda,alpha^v> > 0 for all compact roots alpha which are simple in
the set of imaginary roots (alpha^v is the coroot of alpha), and

2) <lambda,alpha^v> is odd for all real roots which are simple in the
set of real roots. (Parameters failing this condition are called "zero")

If (x,lambda) is final then I_K(x,lambda) has a unique lowest K-type
mu(x,lambda). The Weyl group does not quite act on final standard
K-parameters, because the positivity hypothesis on lambda is not
preserved by all of W. We therefore define an equivalence relation
(x,lambda) ~ (x',lambda') if there is an element y of W such that
y.x = x', y.lambda = lambda', and no theta_x-imaginary root changes sign
under y.

Theorem. The map (x,lambda)->mu(x,lambda) induces a bijection between
equivalence classes of final standard K-parameters and irreducible
representations of K.

Note: The groups K_x=Cent(theta_x) depend on x; the question arises of
how to identify representations of K_x and K_y. If x and y are
conjugate by g in G, the coset gK_x is well-defined. Conjugation by g
therefore provides a well-defined identification of irreducible
representations of K_x with those of K_y.

Definition: a standard K-parameter (x,lambda) is "normal" if theta_x
is a canonical involution (see the help file for the KGB command;
these are the elements x labeled by a # in the output of KGB).

Every (x,lambda) is equivalent to a unique normal one, and the map
(x,lambda)--> mu(x,lambda) from "normal final standard K-parameters"
to irreducible representations of K is therefore a bijection.

Fix a normal final standard K-parameter (x,lambda). Then I_K(x,lambda)
is a sum of K-types, each of which is parametrized by a normal final
standard K-parameter. This gives a matrix with rows and columns
parametrized by normal final standard K-parameters: an entry n in column
(x,lambda) and row (x',lambda') means that mu(x',lambda') occurs in
I_K(x,lambda) with multiplicity n. This matrix is lower triangular,
with 1s on the diagonal, and is therefore invertible.

The Ktypeform command computes a single column of the inverse of this
matrix. Thus if mu(x,lambda) is the lowest K-type of a normal final
standard K-parameter (x,lambda), then Ktypeform computes integers a_j
where

(*) mu(x,lambda)=sum_j a_j I_K(x_j,lambda_j)

(this is a finite sum).

*** Inputting a standard K-parameter ***

To define a standard K-parameter, the user chooses a real form of G,
hence a KGB space, and:

1) the number of a KGB element x,

2) integers a1 a2 ... an (no commas, n=rank),

The latter is lambda-rho where lambda is the differential of lambda,
given as an integral vector in the basis of X^*(T) which the software
has chosen (rho is one-half the sum of the positive roots). To help
the user understand the coordinates the software displays 2rho in
these coordinates.

Suppose G is semisimple. If it is defined using the "sc" argument
(respectively "ad") to the type command, to make it simply connected
(resp. adjoint), this basis is the basis of fundamental weights
(resp. simple roots). See the help file for the posroots command.

The software first converts this data into a triple of the form:

[a1,...,an]@(b1,...,bn)#k

where:

* [a1,...,an] is a vector of integers; 1/2[a1,...,an] is an element of
X^*(T)+rho with the same image as lambda modulo (1-theta)X^*(T).

* @(b1,...,bn) is a vector of 0s and 1s, giving the torus part of of a
KGB parameter x' (see the help file for the KGB command). Here x' lies
over a canonical involution, so is equal to x only if x lies over a
canonical involution.

* #k is the number of the corresponding Cartan subgroup.

*** The Ktypeform computation

The software next tests if this representation is final. If it is not
final it prints a message and quits.

If the representation is final, it defines a standard module
I_K(x,lambda) restricted to K, and its lowest K-type mu(x,lambda).

The software then does a series of calculations, displaying the steps
as it goes. This includes a list R0, R1,... of normal final standard
representations (restricted to K).  It concludes with a formula for
mu(x,lambda) as a linear combination of R0, R1,..., i.e.  formula (*).
This is equal to the first column of the first matrix in the output
of the Ktypemat command (although the latter is truncated by
height).

*** Continued Standard Modules ***

In fact the software allows a generalization of the above setting. The
user is allowed to input a "continued" standard representation - the
definition is the same as above, except that there is no dominance
condition on lambda:

Definition: a "continued standard K-parameter" is a pair (x,lambda)
where x is a KGB element, and lambda is in X^*(T)+rho/(1-theta)X^*(T).

Associated to such a parameter is a virtual representation, which may
be zero. If it also satisfies the final condition above it contains a
generalization of the lowest K-type discussed above. In this more
general setting it is a virtual representation mu of K, which is
either 0 or plus or minus 1 times an actual representation of K. It
may be reducible if K is disconnected. The Ktypeform command is well
defined in this setting, and writes this representation of K as a
linear combination of normal final standard representations restricted
to K.

*** Examples ***

Example 1: holomorphic discrete series of SL(2,R):

empty: realform
Lie type: A1 sc s
(weak) real forms are:
0: su(2)
1: sl(2,R)
enter your choice: 1
main: Ktypeform
Choose KGB element: 0
2rho = [ 2 ]
Give lambda-rho: 0
Name an output file (return for stdout, ? to abandon):
K-type formula for mu([ 2 ]@(0)#0):
 + [ 2 ]@(0)#0 - [ 6 ]@(0)#0
[ 2 ]@(0)#0 has height 2
R0: [ 2 ]@(0)#0, height: 2
[ 2 ]@(0)#0 =  + R0
[ 6 ]@(0)#0 has height 6
R1: [ 6 ]@(0)#0, height: 6
[ 6 ]@(0)#0 =  + R1
Converted to Standard normal final limit form:
 + [ 2 ]@(0)#0 - [ 6 ]@(0)#0

Here is explanation of the output:

main: Ktypeform
2rho = [ 2 ]                         rho = [1] in the basis of fundamental weights)
...
K-type formula for mu([ 2 ]@(0)#0):  lambda = 1/2[2]=rho
			             0 = KGB element
                                     #0 Cartan number 0
...

R0: [ 2 ]@(0)#0, height: 2           this is a normal final standard parameter
                                     for the holomorphic discrete series pi_1
                                     with infinitesimal character rho
...

R1: [ 6 ]@(0)#0, height: 6           this is a normal final standard parameter
                                     for the holomorphic discrete series pi_3
                                     with infinitesimal character 3*rho

Converted to Standard normal final limit form:
 + [ 2 ]@(0)#0 - [ 6 ]@(0)#0         this says the lowest Ktype of pi_1
                                     is (pi_1 -pi_3) restricted to K

Here K=S^1 and writing K^=Z as usual this says:

pi_1 restricted to K: 2 + 4 + 6 +
pi_3 restricted to K: 4 + 6 + ...
2 = (2 + 4 + 6 + ...) - (4 + 6 + 8 + ...)

Example 2: trivial representation of SL(2,R):

The principal series is given by KGB element 2. In this case
X^*(T)+rho/(1-theta)X^*(T)=Z/2Z (character group of the compact part
of R^*).

real: Ktypeform
Choose KGB element: 2
2rho = [ 2 ]
Give lambda-rho: 0
Name an output file (return for stdout, ? to abandon):
K-type formula for mu([ 2 ]@(0)#1):
 - [ 2 ]@(0)#0 - [ 2 ]@(1)#0 + [ 2 ]@(0)#1
[ 2 ]@(0)#0 has height 2
R0: [ 2 ]@(0)#0, height: 2
[ 2 ]@(0)#0 =  + R0
[ 2 ]@(1)#0 has height 2
R1: [ 2 ]@(1)#0, height: 2
[ 2 ]@(1)#0 =  + R1
[ 2 ]@(0)#1 has height 0
R2: [ 2 ]@(0)#1, height: 0
[ 2 ]@(0)#1 =  + R2
Converted to Standard normal final limit form:
 + [ 2 ]@(0)#1 - [ 2 ]@(0)#0 - [ 2 ]@(1)#0

This says the trivial representation is  R0-R1-R2 (restricted to K),
where

R0 is the spherical principal series
R1 is the holomorphic discrete series
R2 is the anti-holomorphic discrete series

NB: In the principal series only the parity of lambda-rho matters:

real: Ktypeformreal: Ktypeform
Choose KGB element: 2
2rho = [ 2 ]
Give lambda-rho: -100
Name an output file (return for stdout, ? to abandon):
K-type formula for mu([ 2 ]@(0)#1):
...
and the rest of the output is identical.

Example 3: odd spherical principal series of SL(2,R)

This is the same as the previous example, except we take lambda-rho
odd:

Choose KGB element: 2
2rho = [ 2 ]
Give lambda-rho: 1
Representation [ 4 ]@(0)#1 is not final, as witnessed by coroot [1].

The principal series with odd K-types, at nu=0, is not final: it is
the direct sum of two limits of discrete series. Entering any odd
integer for lambda-rho gives the same result.

Example 4: coherently continued discrete series of SL(2,R)

Taking KGB element 0 and lambda=-rho, lambda-rho=-2rho gives the
coherent continuation of the holomorphic discrete. This is a
"continued" standard module.

real: Ktypeform
Choose KGB element: 0
2rho = [ 2 ]
Give lambda-rho: -2
Name an output file (return for stdout, ? to abandon):
K-type formula for mu([-2 ]@(0)#0):
 + [ 2 ]@(1)#0 - [ 6 ]@(1)#0
[ 2 ]@(1)#0 has height 2
R0: [ 2 ]@(1)#0, height: 2
[ 2 ]@(1)#0 =  + R0
[ 6 ]@(1)#0 has height 6
R1: [ 6 ]@(1)#0, height: 6
[ 6 ]@(1)#0 =  + R1
Converted to Standard normal final limit form:
 + [ 2 ]@(1)#0 - [ 6 ]@(1)#0
