<basic.at
<extended_misc.at { for type ExtParam }
<extended_types.at { for ext_type@(int,ExtParam) }

{ debug ext_cayley construction, shouldn't be needed }
set test_ext_cayley (Param p, int j, string ext_type, ExtParam E) = void:
( assert(valid(E),"E is not valid")
{ I'm not sure how the rest of this should work, therefore it is comment only
; let q=parameter(E)
  , k() = { companion index, only needed if length=2,3 }
   let id=integrality_datum(E) in root_index(id,delta(E)*root(id,j))
  then Cayleys = [Param]:
    if ext_type="1i1" or ext_type="1i2f" or ext_type="1r1f" or ext_type="1r2"
    then Cayley_set(j,p)
    elif ext_type="2Ci" or ext_type="2Cr" then [cross(j,p)]
    elif ext_type="2i11" or ext_type="2i12" or ext_type="2i22" or
         ext_type="2r22" or ext_type="2r21" or ext_type="2r11"
    then Cayley_set([j,k()],p)
    elif ext_type="3Ci" or ext_type="3Cr" then Cayley_set(k(),cross(j,p))
    elif ext_type="3i" or ext_type="3r" then [cross(k(),Cayley(j,p))]
    else [p]
    fi
  in
  if lookup(q,Cayleys)<0
  then prints("Cayley/ext_Cayley of type ", ext_type, " are not consistent")
  ; prints("p=", p); prints("q=", q); error("")
  fi
}
)

{ extended Cayley transform of type 1* }
{ Cayley transform by j^th simple root of the *integral* roots
  assuming it is also simple for G.
  See ext_Cayley(...) toward the bottom of this file
}
set ext_Cayley_1 (
    int j, ExtParam(ic,delta,gamma,lambda,theta,g,l,omega,tau,t):E) =
    [ExtParam]:
begin
  let id=integrality_datum(ic,gamma), p=parameter(E)
  then type=ext_type_1(delta,j,p)
  in {1C+,1C-,1i1,1i2f,1i2s,1ic,1r1f,1r1s,1r2,1rn}
  let alpha= root(id,j) { a simple root }
  , alpha_check= coroot(id,j) { a simple coroot }
{ then ()=prints("j=", j, " alpha=", alpha, " type=", type) }
  then ref   = reflection(id,j)
  then coref = ^ref
  in
  if (type="1i1")
  then let new_lambda=lambda
    then new_l = l + rat_as_int(((g-l)*alpha-1)/2) * alpha_check
    , new_theta=ref*theta
    , new_omega=omega*coref
    , new_t=t
    then new_tau = vec:
      case solve(1-new_theta,alpha)
      | solution(zeta): tau - zeta*(int:alpha_check*tau)
      | else error("failure in Cayley of type 1i1, solving for zeta")
      esac
    in [(ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)]
  elif (type="1i2f")
  then let new_lambda=lambda
    then new_l = ratvec_as_vec(l + (rat:(g-l)*alpha-1) *alpha_check/2)
    , new_theta=ref*theta
    , new_omega=omega*coref
    , new_t=t
    , new_tau = ratvec_as_vec(tau - alpha*(int:(alpha_check*tau))/2)
    then F_1 =
     (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    , F_2 =
     (ic,delta,gamma,new_lambda+alpha,new_theta,g,new_l,new_omega,new_tau,new_t)
    in test_ext_cayley(p,j,"1i2f",F_1); test_ext_cayley(p,j,"1i2f",F_2)
  ; [F_1,F_2]
  elif (type="1r1f")
  then
    let new_lambda = ratvec_as_vec
      ( lambda + alpha*(rat:((gamma-lambda)*alpha_check-1)/2) )
    , new_l=l
    , new_theta = ref*theta
    , new_omega = omega*coref
    , new_t = ratvec_as_vec(t-((t*alpha)/2)*alpha_check)
    , new_tau=tau
    then F_1=(ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega
	     ,new_tau,new_t)
    then F_2=(ic,delta,gamma,new_lambda,new_theta,g,new_l+alpha_check,new_omega
	     ,new_tau,new_t)
    in test_ext_cayley(p,j,"1r1f",F_1); test_ext_cayley(p,j,"1r1f",F_2)
  ; [F_1,F_2]
  elif (type="1r2")
  then
    let new_lambda= ratvec_as_vec
      ( lambda + alpha*(rat:((gamma-lambda)*alpha_check-1)/2) )
    , new_l=l
    , new_theta=ref*theta
    , new_omega=omega*coref
    then new_t =
      case solve(1+^new_theta,alpha_check)
      | solution(sol): t-sol*(int:t*alpha)
      | else error("failure in Cayley of type 1r2, solving for s")
      esac
    then F=
      (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,tau,new_t)
    in test_ext_cayley(p,j,"1r2",F)
  ; [F]
  else [E]
  fi
end

{ extended Cayley transform of type 2* }
{ Cayley transform by j^th simple root of the *integral* roots
  assuming it is also simple for G.
  See ext_Cayley(...) toward the bottom of this file
}
set ext_Cayley_2 (
    int j,ExtParam(ic,delta,gamma,lambda,theta,g,l,omega,tau,t):E) =
    [ExtParam]:
begin
  let id=integrality_datum(ic,gamma), p=parameter(E)
  then type = ext_type_2(delta,j,p)
     {2C+,2C-,2Ci,2Cr,2i11,2i12,2i22,2r22,2r21,2r11,2rn,2ic}
{ then ()=prints("Cayley of type:", type) }
  then alpha = root(id,j) { a simple root }
  , alpha_check = coroot(id,j) { a simple coroot }
  then beta=delta*alpha then beta_check=coroot(id,beta)  { a simple coroot }
  then s_alpha=reflection(id,j), s_beta=reflection(id,beta)
  then s_alpha_check=^s_alpha, s_beta_check=^s_beta
  in
  if (type="2Ci")
  then
    let new_lambda = ratvec_as_vec(s_alpha*lambda+(gamma*alpha_check-1)*alpha)
    , new_l = ratvec_as_vec(s_alpha_check*l+(g*alpha-1)*alpha_check)
    , new_theta = s_alpha*theta*inverse(s_alpha)
    , new_omega = inverse(s_alpha_check)*omega*s_alpha_check
    , new_tau = ratvec_as_vec(tau-(tau*alpha_check+tau*beta_check)/2*alpha)
    , new_t = ratvec_as_vec(s_alpha_check*t+(l*alpha-g*alpha+1)*alpha_check)
    in [(ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)]
  elif (type="2Cr")
  then
    let new_lambda = ratvec_as_vec(s_alpha*lambda+(gamma*alpha_check-1)*alpha)
    , new_l = ratvec_as_vec(s_alpha_check*l+(g*alpha-1)*alpha_check)
    , new_theta = s_alpha * theta * s_alpha.inverse
    , new_omega = s_alpha_check.inverse * omega * s_alpha_check
    , new_tau= ratvec_as_vec
       (s_alpha*tau+(lambda*alpha_check-gamma*alpha_check+1)*alpha)
    , new_t = ratvec_as_vec(t-(t*alpha+t*beta)/2*alpha_check)
    in [(ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)]
  elif (type="2i11")
  then
    let new_lambda=lambda
    , new_l = ratvec_as_vec
      (l+(g*alpha-l*alpha-1)/2*alpha_check+(g*beta-l*beta-1)/2*beta_check)
    , new_theta = s_alpha*s_beta*theta
    , new_omega = omega*s_beta_check*s_alpha_check
    , new_t=t
    then zeta_alpha = solve(1+^new_omega,alpha)
      .(requisition("failure in Cayley of type 2i11, solving for zeta_alpha"))
    , zeta_beta = solve(1+^new_omega,beta)
      .(requisition("failure in Cayley of type 2i11, solving for zeta_beta"))
    then new_tau = vec: t-tau*alpha*zeta_alpha-tau*beta*zeta_beta
    in [(ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)]
  elif (type="2i12")
  then
    let new_lambda=lambda
    , new_l = ratvec_as_vec
       (l+(g*alpha-l*alpha-1)/2*alpha_check+(g*beta-l*beta-1)/2*beta_check)
    , new_theta = s_alpha*s_beta * theta
    , new_omega = omega*s_beta_check*s_alpha_check
    , new_t=t
    then sigma =
      case solve(1+^new_omega,alpha-beta)
      | solution(s): s
      | else error
      ("failure in Cayley of type 2i12, solving for (1+omega')sigma=alpha-beta")
      esac
    then new_tau=ratvec_as_vec
       (tau+tau*beta_check*sigma-(tau*alpha_check+tau*beta_check)/2*alpha)
    then F_1=
      (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    ,    F_2=
      (ic,delta,gamma,new_lambda+alpha,new_theta,g,new_l,new_omega
      ,new_tau-sigma,new_t)
    in test_ext_cayley(p,j,"2i12",F_1); test_ext_cayley(p,j,"2i12",F_2)
  ; [F_1,F_2]
  elif (type="2i22")
  then
  { let ()=prints("extended Cayley transform of type 2i22") in }
    let new_lambda_1=lambda
    then new_lambda_2=lambda
    then new_tau_1=tau
    then new_tau_2=tau
    in
      if is_even(tau*alpha_check)
      then new_lambda_1:=lambda; new_lambda_2:=lambda+alpha+beta
    { ; prints("even") }
      ; new_tau_1:=ratvec_as_vec
          (tau-tau*alpha_check/2*alpha-tau*beta_check/2*beta)
      ; new_tau_2:=new_tau_1
      else new_lambda_1:=lambda+alpha; new_lambda_2:=lambda+beta
    { ; prints("odd") }
      ; new_tau_1:=ratvec_as_vec
          (tau-(tau*alpha_check+1)/2*alpha-(tau*beta_check-1)/2*beta)
      ; new_tau_2:=ratvec_as_vec
          (tau-(tau*alpha_check-1)/2*alpha-(tau*beta_check+1)/2*beta)
      fi
  ; let new_l = ratvec_as_vec
      (l+(g*alpha-l*alpha-1)/2*alpha_check+(g*beta-l*beta-1)/2*beta_check)
    then new_theta=s_alpha*s_beta*theta
    then new_omega=omega*s_beta_check*s_alpha_check
    then new_t=t
    then F_1=
      (ic,delta,gamma,new_lambda_1,new_theta,g,new_l,new_omega,new_tau_1,new_t)
    then F_2=
      (ic,delta,gamma,new_lambda_2,new_theta,g,new_l,new_omega,new_tau_2,new_t)
    in [F_1,F_2]
  elif (type="2r22")
  then
    let new_lambda=ratvec_as_vec
      ( lambda + (gamma*alpha_check-lambda*alpha_check-1)/2*alpha
               + (gamma*beta_check-lambda*beta_check-1)/2*beta )
    then new_l=l
    then new_theta=s_alpha*s_beta*theta
    then new_omega=omega*s_alpha_check*s_beta_check
    then new_tau=tau
  { then ()=prints("s_alpha:", s_alpha)
    ; prints("s_beta:", s_beta)
    ; prints("alpha_check:", alpha_check)
    ; prints("beta_check:", beta_check)
    ; prints("new_theta: ", new_theta)
  }
    then zeta_alpha_check =
       "failure in Cayley of type 2r22, solving for (1+^theta)zeta=alpha_check"
       .requisition(solve(1+^new_theta,alpha_check))
    , zeta_beta_check =
       "failure in Cayley of type 2r22, solving for (1+^theta)zeta=beta_check"
       .requisition(solve(1+^new_theta,beta_check))
    then new_t = ratvec_as_vec
      (	t-t*alpha*zeta_alpha_check-t*beta*zeta_beta_check )
    then F=(ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    in test_ext_cayley(p,j,"2r22",F)
  ; [F]
  elif (type="2r21")
  then
    let new_lambda = ratvec_as_vec
      (lambda + (gamma*alpha_check-lambda*alpha_check-1)/2*alpha
              + (gamma*beta_check-lambda*beta_check-1)/2*beta)
    , new_l = l
    , new_theta = s_alpha*s_beta*theta
    , new_omega = omega*s_alpha_check*s_beta_check
    , new_tau = tau
    then s =
       "failure in Cayley of type 2r21, solving for (1+^theta)s=alpha_check"
       .requisition(solve(1+^new_theta,alpha_check-beta_check))
    then new_t = ratvec_as_vec (t+t*beta*s-(t*alpha+t*beta)/2*alpha_check)
    then F1=
      (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    then F2=
      (ic,delta,gamma,new_lambda,new_theta,g,new_l+alpha_check,new_omega
      ,new_tau,new_t-s)
    in test_ext_cayley(p,j,"2r21",F1); test_ext_cayley(p,j,"2r21",F2)
  ; [F1,F2]
  elif (type="2r11") then
    let (new_l_1,new_l_2,new_t_1,new_t_2)=
    if is_even(t*alpha)
    then (l,l+alpha_check+beta_check
         ,ratvec_as_vec(t-t*alpha/2*alpha_check-t*beta/2*beta_check)
         ,ratvec_as_vec(t-t*alpha/2*alpha_check-t*beta/2*beta_check))
    else (l+alpha_check,l+beta_check
         ,ratvec_as_vec(t-(t*alpha+1)/2*alpha_check-(t*beta-1)/2*beta_check)
         ,ratvec_as_vec(t-(t*alpha-1)/2*alpha_check-(t*beta+1)/2*beta_check))
    fi
    then new_lambda=ratvec_as_vec
      ( lambda + (gamma*alpha_check-lambda*alpha_check-1)/2*alpha
               + (gamma*beta_check-lambda*beta_check-1)/2*beta )
    then new_theta=s_alpha*s_beta*theta
    then new_omega=omega*s_alpha_check*s_beta_check
    then new_tau=tau
    then F1=
      (ic,delta,gamma,new_lambda,new_theta,g,new_l_1,new_omega,new_tau,new_t_1)
    then F2=
      (ic,delta,gamma,new_lambda,new_theta,g,new_l_2,new_omega,new_tau,new_t_2)
    in test_ext_cayley(p,j,"2r11",F1);test_ext_cayley(p,j,"2r11",F2)
  ;  [F1,F2]
  else prints("Cayley transform of type ", type, " not defined"); [E]
  fi
end

{ extended Cayley transform of type 3*: not implemented }
{ Cayley transform by j^th simple root of the *integral* roots
  assuming it is also simple for G.
  See ext_Cayley(...) toward the bottom of this file
}
set ext_Cayley_3 (
    int j,ExtParam(ic,delta,gamma,lambda,theta,g,l,omega,tau,t):E)=
    [ExtParam]:
begin
  let p=parameter(E) then type=ext_type_1(delta,j,p)
  in {3C+,3C-,3Ci,3Cr,3i,3r,3rn,3ic}
  prints("Cayley transform of type ", type, " not defined")
; [E]
end

{ Cayley transforms are always by integral roots
  first define it for alpha G-simple (=>integral-simple)
  then for general integral-simple (this is done in nonintegral.at)
  Cayley transform by j^th simple root of the *integral* roots
  assuming this root is G-simple}

set ext_Cayley_simple (
    int j,ExtParam(ic,delta,gamma,lambda,theta,g,l,omega,tau,t):E) =
    [ExtParam]:
begin
{ prints("ext_Cayley_simple in extended_cayley.at with  j=", j, "E:")
; display(E)
}
  let type=ext_type(j,E)
{ then ()=prints("ext_Cayley, j=", j, ", " ,parameter(E)) }
  , cayley_types =
    ["1i1","1i2f","1r1f","1r2"
    ,"2Ci","2Cr","2i12","2i22","2r22","2r21","2r11"
    ,"3Ci","3Cr","3i","3r"]
  in
  if not in_string_list(type,cayley_types)
  then prints("Cayley of type ", type,  " not defined"); [E]
  else
  { prints("extended Cayley transform of type ", type); }
    let p=parameter(E) in
    assert(is_fixed(delta,p),"Parameter is not fixed by delta")
  ; let rd=root_datum(p), id=integrality_datum(p)
    then alpha = root(id,j) {a simple root }
    in assert(rho_check(rd)*alpha=1 { simple root for G }
        ,"root is integral-simple but not simple, "+
         "use nonintegral.at to define ext_Cayley")
  ; let l=ext_length(integrality_datum(p),delta,j) in
    [ext_Cayley_1@(int,ExtParam)
    ,ext_Cayley_2@(int,ExtParam)
    ,ext_Cayley_3@(int,ExtParam)] [l-1] (j,E)
  fi
end
