<basic.at  { for assert, #@int,... }

{
  An optimised orbit generation procedure, which assumes that generators can
  detect and eliminate (by returning |no_vec|) backwards or stationary steps
  (in the main application we generate the orbit of a dominant weight, whence
  the function name, and "forward" will then mean subtracting posroots) and that
  the poset structure on the orbit is graded (as is true for the weak order on
  $W$ or on $W/P$ for a parabolic subgroup $P$). This allows the orbit to be
  partitioned into levels, with equality testing only within current level.

  Arguments are a row |S| of generating maps and a starting dominant weight |v|.

  The algorithm is to generate parallel arrays of |[int]| and |vec| values,
  with a counter |done| saying how many have been considered for successors, and
  a marker |stop| saying where the newest level (where duplicates must be
  avoided) starts.
}
set generate_from_dom ([(vec->maybe_a_vec)] S,vec v) = ([vec],[[int]]):
  let words=[[int]]:[[]], orbit=[v], done=0, stop=1
  then absent (vec y) = bool: { check down to last level marker }
         none(#orbit-stop,(int i)bool:orbit~[i]=y)
  in
  while done<#orbit
  do if done=stop then {prints("stop:", #orbit,new_line,"words:",words);} stop:=#orbit fi { hit end of level, define new level }
  ; let w = words[done], a=orbit[done] in done+:=1
  ; for f@i in S
    do case f(a) | else () { skip when no new vector is returned }
       | solution(b): if absent(b) then ( words #:= i#w, orbit #:= b ) fi
       esac
    od
  od; (orbit,words)

{ same as above, but also compose |gens_rep| matrices for applied generators }
set generate_action_from_dom ([(vec->maybe_a_vec)] S,vec v
                             ,int dim,[mat] gens_rep) =
     ([vec],[[int]],[mat]):
  let orbit=[v], words=[[int]]:[[]], actions=[id_mat(dim)], done=0, stop=1
  then absent (vec y) = bool: { check down to last level marker }
         none(#orbit-stop,(int i)bool:orbit~[i]=y)
  in
  while done<#orbit
  do if done=stop then stop:=#orbit fi { hit end of level, define new level }
  ; let a=orbit[done], w = words[done], act=actions[done] in done+:=1
  ; for f@i in S
    do case f(a) | else () { skip when no new vector is returned }
       | solution(b):
         if absent(b)
         then orbit #:= b; words #:= i#w; actions #:= gens_rep[i]*act
         fi
       esac
    od
  od; (orbit,words,actions)


set simple_actor (RootDatum rd, int i) = (vec->maybe_a_vec):
  let s=W_gen(rd,i), av=coroot(rd,i) in
  (vec x)maybe_a_vec: if (av*x).> then solution(s*x) else no_vec() fi

{ get orbit of |v| under parabolic subgroup of Weyl group with generators |S|,
  and witnessing (minimal) Weyl group elements |w|: |x=w*v| for |x| in orbit }
set generate_from (RootDatum rd,[int] S,vec v) = ([vec],[WeylElt]):
  let (chamber,dom_wt)=from_dominant(rd,v) { dominant for |S| would suffice }
  then (orbit,words)=
    generate_from_dom(for s in S do simple_actor(rd,s) od,dom_wt)
  , to_dom= inverse(chamber)
  in (orbit,for w in words do W_elt(rd,for i in w do S[i] od)*to_dom od)

{ like previous, but assuming |v| is dominant, and incorporating action }
set generate_action_from_dom (RootDatum rd,[int] S,vec v
                             ,int dim,[mat] gens_rep) = ([vec],[WeylElt],[mat]):
  let (orbit,words,action)= generate_action_from_dom
      (for s in S do simple_actor(rd,s) od,v, dim,for s in S do gens_rep[s] od)
  in (orbit,for w in words do W_elt(rd,for i in w do S[i] od) od,action)

{ when no |WeylElt| elements are needed in the end, we can simplify a bit }
set W_orbit (RootDatum rd,[int] S, vec v) = [vec]:
  let (orbit,)=generate_from_dom(for i in S do simple_actor(rd,i) od,v) in orbit

{ just the coset representatives for the stabilizer of |v| }
set W_orbit_W_elements((RootDatum,[int],vec) triple) = [WeylElt]:
  let (,W_elements)=generate_from(triple) in W_elements

{ default S to full set of simple roots }
set generate_from (RootDatum rd,vec v) = ([vec],[WeylElt]):
  generate_from(rd,all_simples(rd),v)
set W_orbit (RootDatum rd, vec v) = [vec]:
  W_orbit(rd,all_simples(rd),v)
set W_orbit_W_elements(RootDatum rd,vec v) = [WeylElt]:
  W_orbit_W_elements(rd,all_simples(rd),v)

{ enumerate parabolic subgroup of W }
set W_parabolic (RootDatum rd, [int] gens) = [WeylElt]:
   let result=[id_W(rd)] in
   for s@i in gens
   do let coset =
     W_orbit_W_elements(rd,gens[:i+1],fundamental_weight(rd,s).numer)
   in result := ## for x in coset do for y in result do x*y od od
   od; result

{ enumerate parabolic subgroup of W, with their action defined by |gens_rep| }
set W_parabolic_act (RootDatum rd, [int] gens, int dim, [mat] gens_rep) =
      [WeylElt,mat]:
   let result=[(id_W(rd),id_mat(dim))] in
   for s@i in gens
   do let (,coset,action) = generate_action_from_dom
     (rd,gens[:i+1],fundamental_weight(rd,s).numer,dim,gens_rep)
   in result := ##
     for x@k in coset do for (y,act) in result do (x*y,action[k]*act) od od
   od; result

{ all elements of Weyl group of RootDatum, in parabolic	quotient lex order }
set W (RootDatum rd) = [WeylElt]: W_parabolic(rd,#rd.semisimple_rank)

{ variants of the above for |vec| instead of |vec|; reduce to |vec| case }
set generate_from (RootDatum rd,[int] S,ratvec rv) = ([ratvec],[WeylElt]):
  let (v,d) = %rv then (orbit,W_elements) = generate_from(rd,S,v) in
  (for x in orbit do x/d od,W_elements)
set W_orbit (RootDatum rd,[int] S, ratvec rv) = [ratvec]:
  let (v,d) = %rv then orbit = W_orbit(rd,S,v) in for x in orbit do v/d od
set generate_from (RootDatum rd,ratvec rv) = ([ratvec],[WeylElt]):
  generate_from(rd,all_simples(rd),rv)
set W_orbit (RootDatum rd, ratvec rv) = [ratvec]: W_orbit(rd,all_simples(rd),rv)

{ orbit of <w_1,..,w_n> acting on v where w_i is an element of W (WeylElt),
  (not always a simple reflection). Example use: for W^{\delta}-orbit of a root

  Here we must use instead of |generate_from_dom| a simplified but less
  efficient method, using linear search over the full orbit generated so for,
  because nothing is known about how generators relate to dominance, or even
  that the generated directed acyclic graph is graded
}
set generate ([(ratvec->ratvec)] S,ratvec v) = ([ratvec],[[int]]):
  let words=[[int]]:[[]], orbit=[v], done=0
  then absent (ratvec y) = bool: { check whole orbit }
         none(#orbit,(int i)bool:y=orbit[i])
  in
  while done<#orbit
  do let w = words[done], a=orbit[done] in done+:=1
  ; for f@i in S
    do let b= f(a) in if absent(b) then ( words #:= i#w, orbit #:= b ) fi od
  od; (orbit,words)

{
  The following reason was given that the |words| component remains unconverted
  in the function |generate| below; we don't really understand it any more:

  We cannot make a [WeylElt]-producing variant of |generate|, as there is
  no way to synthesise a root datum for which the supplied set of Weyl
  _words_ forms a set of simple generators (even in case one should exist).
  The root datum in the supplied WeylElt values is NOT such a root datum
}

set generate (RootDatum rd,[WeylElt] S,ratvec v) = ([ratvec],[WeylElt]):
  let (orbit,words) = generate(for s in S do (ratvec x) ratvec: s*x od, v) in
  (orbit,for word in words do product(rd,for i in word do S[i] od) od)

{ find a |WeylElt| in the generated group <S> whose action sends |v| to |w|
  returns either (true,w) or (false,id)
}
set conjugate_to (RootDatum rd, [WeylElt] S, ratvec v,ratvec w) =
     (bool,WeylElt):
  let (orbit,ws) = generate(rd,S,v) then k=first(#orbit,(int i):orbit[i]=w)
  in if k.>= then (true,ws[k]) else (false,id_W(rd)) fi

{ find WeylElt |w| satisfying |w*v=u| }
set conjugate_to (RootDatum rd, ratvec u, ratvec v) = (bool,WeylElt):
  let (wu,u_dom)=from_dominant(rd,u), (wv,v_dom)=from_dominant(rd,v) in
  (u_dom=v_dom, wu*/wv)


{     orbit generation routines which terminate early based on length bound  }

set generate_from_dom_terminate ([(vec->maybe_a_vec)] S,vec v, int length_bound) = ([vec],[[int]]):
  let words=[[int]]:[[]], orbit=[v], done=0, stop=1, length=1
  then absent (vec y) = bool: { check down to last level marker }
         none(#orbit-stop,(int i)bool:orbit~[i]=y)
  in
  while length<=length_bound and  done<#orbit 
  do if done=stop then {prints("stop:", #orbit,new_line,"words:",words);}length+:=1; stop:=#orbit fi { hit end of level, define new level }
  ; let w = words[done], a=orbit[done] in done+:=1
  ; for f@i in S
    do case f(a) | else () { skip when no new vector is returned }
       | solution(b): if absent(b)
       and #(i#w)<=length_bound {this is necessary because termination step can run over}
       then ( words #:= i#w, orbit #:= b ) fi
       esac
    od
  od; (orbit,words)

{ same as above, but also compose |gens_rep| matrices for applied generators }
set generate_action_from_dom_terminate ([(vec->maybe_a_vec)] S,vec v
                             ,int dim,[mat] gens_rep,int length_bound) =
     ([vec],[[int]],[mat]):
  let orbit=[v], words=[[int]]:[[]], actions=[id_mat(dim)], done=0, stop=1, length=1
  then absent (vec y) = bool: { check down to last level marker }
         none(#orbit-stop,(int i)bool:orbit~[i]=y)
  in
  while length<=length_bound and  done<#orbit
  do if done=stop then stop:=#orbit;length+:=1 fi { hit end of level, define new level }
  ; let a=orbit[done], w = words[done], act=actions[done] in done+:=1
  ; for f@i in S
    do case f(a) | else () { skip when no new vector is returned }
       | solution(b): if absent(b)
         and #(i#w)<=length_bound  {this is necessary because termination step can run over}
         then orbit #:= b; words #:= i#w; actions #:= gens_rep[i]*act
         fi
       esac
    od
  od; (orbit,words,actions)

{ get orbit of |v| under parabolic subgroup of Weyl group with generators |S|,
  and witnessing (minimal) Weyl group elements |w|: |x=w*v| for |x| in orbit }
set generate_from_terminate (RootDatum rd,[int] S,vec v,int bound) = ([vec],[WeylElt]):
  let (chamber,dom_wt)=from_dominant(rd,v) { dominant for |S| would suffice }
  then (orbit,words)=
    generate_from_dom_terminate(for s in S do simple_actor(rd,s) od,dom_wt,bound)
  , to_dom= inverse(chamber)
  in (orbit,for w in words do W_elt(rd,for i in w do S[i] od)*to_dom od)

{ like previous, but assuming |v| is dominant, and incorporating action }
set generate_action_from_dom (RootDatum rd,[int] S,vec v
                             ,int dim,[mat] gens_rep) = ([vec],[WeylElt],[mat]):
  let (orbit,words,action)= generate_action_from_dom
      (for s in S do simple_actor(rd,s) od,v, dim,for s in S do gens_rep[s] od)
  in (orbit,for w in words do W_elt(rd,for i in w do S[i] od) od,action)

{ when no |WeylElt| elements are needed in the end, we can simplify a bit }
set W_orbit (RootDatum rd,[int] S, vec v) = [vec]:
  let (orbit,)=generate_from_dom(for i in S do simple_actor(rd,i) od,v) in orbit

{ just the coset representatives for the stabilizer of |v| }
set W_orbit_W_elements((RootDatum,[int],vec) triple) = [WeylElt]:
  let (,W_elements)=generate_from(triple) in W_elements

{ default S to full set of simple roots }
set generate_from_terminate (RootDatum rd,vec v,int bound) = ([vec],[WeylElt]):
  generate_from_terminate(rd,all_simples(rd),v,bound)

set W_orbit (RootDatum rd, vec v) = [vec]:
  W_orbit(rd,all_simples(rd),v)
set W_orbit_W_elements(RootDatum rd,vec v) = [WeylElt]:
  W_orbit_W_elements(rd,all_simples(rd),v)
