<character_table_reps.at
<springer_tables.at
<isomorphism_W.at {for permute_character}

set cells_verbose=false

{
these two functions are defined in W_reps.at:
W_cells_index@Param->(int,[WCell])
W_cells_of@Param->[WCell]
now also define singular versions:
W_cell_index@Param->(int,WCell)
W_cell_of@Param->WCell
}
set W_cell_index(Param p)=(int,WCell):
let (index,cells)=W_cells_index(p) then
j=first(for i:#cells do let (param_indices,,)=cells[i] in find(param_indices,index)>=0 od) in
(index,cells[j])

set W_cell_of(Param p)=WCell: let (,cell)=W_cell_index(p) in cell

{assuming block and cells are already computed:}
set W_cell([Param] block,[WCell] cells,Param p)=(int,WCell):
let index=find(block,p) then
cell_number=first(for (param_numbers,,)@i in cells do find(param_numbers,index)>=0 od) in
(index,cells[cell_number])

set W_cell_of([Param] block,[WCell] cells,Param p)=WCell:
let (,c)=W_cell(block,cells,p) in c


{ ----------- cell representations --------------}
{{moved from character_table_reps.at}}

{neglected to take permutation into account}
set cell_characterold (CharacterTable ct,WCell cell) = [int]:
  for w in ct.class_reps do trace(cell_action(cell,w)) od

{. character of representation of W on cell .}
set cell_character (CharacterTable ct,WCell cell) = [int]:
let (valid,P)=root_permutation(ct.root_datum,cell.root_datum) then
()=assert(valid,"RootDatum mismatch in cell_character@(CharacterTable,WCell") in
if P=id_mat(#P) then
 for w in ct.class_reps do trace(cell_action(cell,w)) od
else
 if cells_verbose then prints("Warning: permutation needed in cell_character@(CharacterTable,WCell)", new_line, P) fi;
 for w in ct.class_reps do trace(cell_action(cell,permute(P,w,cell.root_datum))) od
fi


set cell_character(CharacterTable ct)=(WCell -> [int]):(WCell cell):cell_character(ct,cell)
set cell_characters (CharacterTable ct,[WCell] cells) = [[int]]:
  for cell in cells do cell_character(ct, cell) od

set cells_table (CharacterTable ct,[WCell] cells) = mat:
  matrix_of_inner_products(ct,cell_characters(ct,cells))

set cells_table_augmented (CharacterTable ct, [WCell] cells) = mat:
  let characters =
    cell_characters(ct,cells) ## [ ct.trivial, ct.sign, ct.reflection ]
  in matrix_of_inner_products(ct,characters)

set cell_representation (CharacterTable ct,WCell cell) = W_rep:
  (#cell.graph,
   for i:ct.root_datum.semisimple_rank
   do unsparse(cell_action(cell,i),#cell.graph) od)

{ list of representations defined by an array of cells }
set cell_representations(CharacterTable ct,[WCell] cells)=[W_rep]:
  for cell in cells do cell_representation(ct,cell) od

{smallest_degree_summands is in character_tables.at}
{NOTE: need to incorporate the permutation relating ct.root_datum and cell.root_datum}
{note that ct.root_datum must be (isomorphic to) cell.root_datum,
 which is the integrality_datum of a parameter}
set special_character(CharacterTable ct,WCell cell)=
let (valid,P)=root_permutation(ct.root_datum.derived,cell.root_datum.derived) in
assert(valid,"No root system isomorphism");
let summands=smallest_degree_summands(ct,ct.decompose(cell_character(ct,cell,P)))
in if #summands>1 then error("not unique special representation")
   elif #summands=0 then error("no special summands?")
   else summands[0]
   fi
set special_character(CharacterTable ct)=(WCell->int):(WCell cell):
  special_character(ct,cell)

set special_character(CharacterTable ct,[int] cell_character)=
let summands=smallest_degree_summands(ct,ct.decompose(cell_character)) in
if #summands>1 then error("not unique special representation") elif
#summands=0 then error("no special summands?") else summands[0] fi
{set special_character(CharacterTable ct)=([int]->int):
 ([int] cell_character):special_character(ct,cell_character)}



set #(WCell cell) = int: #cell.labels { should also equal |#cell.graph| }

set parameters([Param] block,WCell cell)=[Param]:
  let (labels,,)=cell in for i in labels do block[i] od

set parameters([Param] block,[WCell] cells)=[Param]:
##for cell in cells do parameters(block,cell) od

set parameters([([Param],[WCell])] data)=[Param]:
##for i:#data do parameters(data[i]) od


{ expand and partition set of params into blocks }
set blocks ([Param] params) = [[Param]]:
   let block_list = [[Param],ParamPol]: {second component for quick search } []
in for p in params
   do if for (,P) in block_list do =P[p] od.all
      then let B=block_of(p) in block_list #:= (B,p.null_module+B)
      fi
   od; for (B,) in block_list do B od

{ W_cells@Param is built-in, returns the number in cell which we ignore here }
set blocks_and_cells([Param] params) = [[Param],[WCell]]:
  for B in blocks(params)
  {caution: b and block_of(b[0]) might not be in the same order (MvL really??) }
  {if not, one can do simpler: |do let (,cell)=W_cells(b[0]) in (b,cell) od| }
  do let cell=W_cells_of(B[0]) in (B,cell) od

set blocks_and_cells (Param p) = [[Param],[WCell]]: blocks_and_cells(block_of(p))

{really should be this, since it only returns one block:}
set block_and_cells (Param p) = ([Param],[WCell]):
let bc=blocks_and_cells(p) in
assert(#bc=1,"more than one block?");bc[0]

{ locate a given parameter in structure returned from |blocks_and_cells| }
set find ([[Param],[WCell]] blocks_and_cells, Param p) = (int,int):
for (block,cells)@i in blocks_and_cells
do for cell@j in cells
   do if find(parameters(block,cell),p).>= then return (i,j) fi
   od
od; (minus_1,minus_1)

set cells_given_AV ( SpringerTable st
		   , ComplexNilpotent O
		   , ([Param],[WCell]) (block,cells) ) =
      ([Param],[WCell]):
(  if cells_verbose then prints
      ("size of block: ", #block,new_line, "number or cells: ", #cells)
   fi
; ( block
  , for cell@j in cells
    do if st.ct.special_character(cell)=st.springer(O) then [cell] else [] fi
    od.##
  )
)

set parameters_given_AV ( { same arguments as |cells_given_AV| }
  (SpringerTable,ComplexNilpotent,([Param],[WCell])) data) = [Param]:
  data.cells_given_AV.parameters


set push ([Param] params, ratvec gamma) = [Param]:
  for p in params do coherent_family_irr(p,gamma).monomials { zero or one |Param| } od.##

set cell_members_given_descent (RootDatum rd, WCell (,graph,), [int] S) = [int]:
   let target = complement(rd.semisimple_rank,S) { so S is desired ASCENT set? }
in for (tau,)@i in graph.nodes do if tau=target then [i] else [] fi od.##

{given cell, gamma, dim_special, reject the cell
unless #cell>=dim_special and
some parameter p in cell has tau_complement(p)=singular roots on gamma}
set potential_cell(RootDatum rd_int,WCell cell, ratvec gamma, int springer_dim)=bool:
if #cell< springer_dim then prints("dim: ", #cell, " ", springer_dim);false
elif
 let singular_roots=##for alpha@i in rd_int.simple_roots do if =alpha*gamma then [i] else [] fi od in
 let ()=prints("sr: ", singular_roots) in
 let a= any(let (,graph,)=cell in for node in graph.nodes do let (tau,)=node in prints("tau: ",tau);tau=singular_roots od)
 in prints("a=",a);not a then false
else true
fi

{used in computing weak unipotent packets
given blocks_and_cells (at regular infinitesimal character)
compute all parameters whose special cell representation
equals Springer(O), and push the results to infinitesimal character gamma,
which is typically O_check.H/2, and singular
the SpringerTable st and ComplexNilpotent O are for the integral root system,
O is only used for its Springer representation
}
set parameters_given_AV_infinitesimal_character(SpringerTable st, ComplexNilpotent O,[([Param],[WCell])] blocks_and_cells,ratvec gamma)=
{[(int,int,Param)]: {[(block number, cell number, parameter)]}}
let springer_O=st.springer(O) {int} then
springer_dim=st.ct.dimension(springer_O) in
if cells_verbose then
 prints("given AV with infinitesimal character:", gamma, new_line, "O=",O);
 prints("st:", st, " bc:", blocks_and_cells);
 prints("blocks_and_cells:", blocks_and_cells)
fi;
##for (block,cells)@i in blocks_and_cells do
if cells_verbose then prints("doing block ",i , " of size ", #block,new_line, "number of cells: ", #cells) fi;
 ##for cell@j in cells do
 let survivors=[(int,int,Param)]:[] in
 {if cells_verbose then prints("block ",i,"/cell ",j, " of size ", #cell) fi;}
 if #cell< springer_dim
  then prints("dim: ", #cell, " ", springer_dim);[(int,int,Param)]:[]
 elif
   for p in parameters(block,cells[j]) do
    if I_will_survive(p,gamma) then
      prints("survive:", p, " ", gamma);
      survivors#:=(i,j,first_param(coherent_family_irr(p,gamma)))
    fi {I_will_survive}
   od {/##for p};
 =#survivors
  then {don't bother checking cell representation} [(int,int,Param)]:[]
 elif
 st.ct.special_character(cell)=springer_O then
    survivors
 else
        [(int,int,Param)]:[]
 fi
 od  {/for cell}
od  {/for block}

{include permutation}
set parameters_given_AV_infinitesimal_character(SpringerTable st, ComplexNilpotent O,[([Param],[WCell])] blocks_and_cells,ratvec gamma,mat permutation)=[(int,int,Param)]: {[(block number, cell number, parameter)]}
let springer_O=st.springer(O) then
()=prints("O: ", O) then
springer_dim=st.ct.dimension(springer_O) in
if cells_verbose then
 prints("given AV with infinitesimal character:", gamma, new_line, "O=",O, new_line, "with permutation: ", permutation);
 prints("st:", st, " bc:", blocks_and_cells);
 prints("blocks_and_cells:", blocks_and_cells)
fi;
if cells_verbose then prints("given AV/gamma: st: ", st.root_datum, new_line, " O:", O,new_line," gamma:", gamma) fi;
##for (block,cells)@i in blocks_and_cells do
if cells_verbose then prints("doing block ",i , " of size ", #block,new_line, "number of cells: ", #cells) fi;
 ##for cell@j in cells do
 let survivors=[(int,int,Param)]:[] in
 if cells_verbose then prints("block ",i,"/cell ",j, " of size ", #cell) fi;
 if #cell< springer_dim
  then prints("dim: ", #cell, " ", springer_dim);[(int,int,Param)]:[]
 elif
   for p in parameters(block,cells[j]) do
    if I_will_survive(p,gamma) then
{      prints("survive:", p, " ", gamma);}
      survivors#:=(i,j,first_param(coherent_family_irr(p,gamma)))
    fi {I_will_survive}
   od {/##for p};
 =#survivors
  then {prints("NONE");}{don't bother checking cell representation} [(int,int,Param)]:[]
 elif
 special_character(st.ct,cell,permutation)=springer_O
  then
let c=special_character(st.ct,cell,permutation) in prints("cell character: ",c, " springer_O:", springer_O);
survivors
 else [(int,int,Param)]:[]
 fi
 od  {/for cell}
od  {/for block}

{include precomputed cell characters (but NOT permutation)
mainly used for even orbits in E8}
set parameters_given_AV_infinitesimal_character(
SpringerTable st,
ComplexNilpotent O,
ratvec gamma,
[(([Param],[WCell]),[([int],[int])])]  cell_data
{[Param]: list of parameters in block
 [([int] indices of parameters in cell,[int] character of cell)]
 }
)=
[(int,int,Param)]: {[(block number, cell number, parameter)]}
let springer_O=st.springer(O) then
()=if cells_verbose then prints("given AV with infinitesimal character", new_line,"(precomputed cell character): ", gamma, new_line, "O=",O) fi in
if cells_verbose then prints("given AV/gamma: st: ", st.root_datum, new_line, " O:", O,new_line," gamma:", gamma) fi;
##for i:#cell_data do  {i=block number}
 let (parameters_and_cells,cell_characters)=cell_data[i] then
 (parameters,cells)=parameters_and_cells in
  ##for j:#cell_characters do
   let (cell_param_numbers,cell_character)=cell_characters[j] then
    ()=if cells_verbose then prints("block ",i,"/cell", j, " of size ",#cell_param_numbers) fi then
    spec=special_character(st.ct,cell_character) in
    let ()=if cells_verbose then prints("spec: ", spec, " ", "springer_O: ", springer_O) fi in
    if spec=springer_O then
    ##for k in cell_param_numbers do let p=parameters[k] in if I_will_survive(p,gamma) then
{   prints("survive:", p, " ", gamma);}
   [(i,j,first_param(coherent_family_irr(p,gamma)))] else [] fi od
  else []
  fi
 od
od
{
MOVED ALL THE REST TO associated_variety_annihlator.at:

{assuming integral infinitesimal character}
set associated_variety_int(SpringerTable st,WCell cell)=ComplexNilpotent:st.springer_inverse_special(st.ct.special_character(cell))
set associated_variety_int(SpringerTable st)=(WCell->ComplexNilpotent):(WCell cell):associated_variety_int(st,cell)
set associated_variety_int(SpringerTable st,Param p)=ComplexNilpotent:associated_variety_int(st,W_cell_of(p))
set associated_variety_int(SpringerTable st)=(Param->ComplexNilpotent):(Param p):associated_variety_int(st,W_cell_of(p))

set associated_variety(SpringerTable st_G,WCell cell)=ComplexNilpotent:
let G=st_G.root_datum_parent then
ct_G=st_G.ct then
L=cell.root_datum then
ct_L=L.character_table then
index_pi_L=ct_L.special_character(cell) then
char_L=ct_L.characters[index_pi_L] then
d_L=ct_L.degrees[index_pi_L] then
chars_G=
##for i:st_G.ct.n_classes do
{ let ()=prints("i: ",i, " ",  ct_G.degrees[i], " ", d_L) in }
 if ct_G.degrees[i]=d_L and
  !=ct_L.inner_product(char_L,restrict_character(G,L,ct_G,ct_L,ct_G.characters[i]))
  then  [i] else [] fi
od
then
index_G=chars_G[0] in
st_G.springer_inverse(index_G)

set associated_variety_test(SpringerTable st_G,WCell cell)=
let G=st_G.root_datum_parent then
ct_G=st_G.ct then
L=cell.root_datum then
ct_L=L.character_table then
index_pi_L=ct_L.special_character(cell) then
char_L=ct_L.characters[index_pi_L] then
d_L=ct_L.degrees[index_pi_L] then
()=prints("OK") in
(G,L,ct_G,ct_L,index_pi_L,char_L,d_L){
chars_G=
##for i:st_G.ct.n_classes do
 if ct.degrees[i]=d_L and
  !=ct_L.inner_product(char_L,restrict_character(G,L,ct_G,ct_L,ct.characters[i]))
  then  [i] else [] fi
od
then
()=prints("OK2") then
{()=prints("chars_G=",chars_G) then}
index_G=chars_G[0] in
st_G.springer_inverse(index_G)
}

set GK_dimension(SpringerTable st,Param p)=int:st.associated_variety_int(p).dim_nilpotent\2
set GK_dimension(SpringerTable st)=(Param->int):(Param p):st.associated_variety_int(p).dim_nilpotent\2

set show([WCell] cells)=void:
for (cell,,)@i in cells do prints(i, " ", cell) od;
for (cell,(,graph),)@i in cells do
prints("// cell #",i, ":");
tabulate(
 for (a,b)@i in graph do
 let arrows=b in
  [i.to_string + "[" + cell[i].to_string + "]" + ":",
  a.to_string,
  "-->",
  let m=if #arrows=0 then 1 else max(for (,y) in arrows do y od) fi  in
if m=1 then (for (x,y) in arrows do x od).to_string else
 (for (x,y) in arrows do (x,y) od).to_string
fi
] od)
  od

{

// cell #14:
0[45]: {1,2} --> 3
1[47]: {1,2} --> 3
2[49]: {2,3} --> 3
3[51]: {1,3} --> 0,1,2


Value: 16
atlas> cells[14]
Value: ([45,47,49,51],[([0,1],[(3,1)]),([0,1],[(3,1)]),([1,2],[(3,1)]),([0,2],[(0,1),(1,1),(2,1)])])
}
}