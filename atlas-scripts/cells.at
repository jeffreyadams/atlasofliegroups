<character_table_reps.at
<springer_tables.at
<W_reps.at
<lietypes.at
<conjugate.at
<conjugate.at
<sparse.at

{ ----------- cell representations --------------}
{{moved from character_table_reps.at}}

{. character of representation of W on cell .}
set cell_character (CharacterTable ct,WCell cell) = [int]:
  for w in ct.class_reps do trace(cell_action(cell,w)) od

set cell_character(CharacterTable ct)=(WCell -> [int]):
(WCell cell):cell_character(ct,cell)
set cell_characters (CharacterTable ct,[WCell] cells) = [[int]]:
  for cell in cells do cell_character(ct, cell) od

set cells_table (CharacterTable ct,[WCell] cells) = mat:
  matrix_of_inner_products(ct,cell_characters(ct,cells))

set cells_table_augmented (CharacterTable ct, [WCell] cells) = mat:
  let characters =
    cell_characters(ct,cells) ## [ ct.trivial, ct.sign, ct.reflection ]
  in matrix_of_inner_products(ct,characters)

set cell_representation (CharacterTable ct,WCell cell) = W_rep:
  (#cell.graph,
   for i:ct.lie_type.semisimple_rank
   do unsparse(cell_action(cell,i),#cell.graph) od)

{ list of representations defined by an array of cells }
set cell_representations(CharacterTable ct,[WCell] cells)=[W_rep]:
  for cell in cells do cell_representation(ct,cell) od

{smallest_degree_summands is in character_tables.at}

set special_character(CharacterTable ct,WCell cell)=
let summands=smallest_degree_summands(ct,ct.decompose(ct.cell_character(cell)))
in if #summands>1 then error("not unique special representation")
   elif #summands=0 then error("no special summands?")
   else summands[0]
   fi
set special_character(CharacterTable ct)=(WCell->int):(WCell cell):
  special_character(ct,cell)

set special_character(CharacterTable ct,[int] cell_character)=
let summands=smallest_degree_summands(ct,ct.decompose(cell_character)) in
if #summands>1 then error("not unique special representation") elif
#summands=0 then error("no special summands?") else summands[0] fi
{set special_character(CharacterTable ct)=([int]->int):
 ([int] cell_character):special_character(ct,cell_character)}

set cells_verbose=false

set #(WCell cell)=int:let (a,b)=cell in #a

set parameters([Param] block,WCell cell)=[Param]:
let (labels,)=cell in for i in labels do block[i] od

set parameters([Param] block,[WCell] cells)=[Param]:
##for cell in cells do parameters(block,cell) od

set parameters([([Param],[WCell])] data)=[Param]:
##for i:#data do parameters(data[i]) od


{break set of params into blocks}
set blocks([Param] params)=[[Param]]:
let rv=[[Param]]:[] in
for p in params do
 let found=first(for block in rv do find(block,p)!=-1 od) in
 if found=-1 then rv#:=block_of(p) fi
od;
rv

{W_cells@Param is built-in}

{need to keep block_of(p) since this is what the numbering
in W_cells(p) refers to
}
set blocks_and_cells([Param] params)=[([Param],[WCell])]:
  for b in blocks(params)
  do let (,cell)=W_cells(b[0]) in (b,cell) od

set blocks_and_cells(Param p)=blocks_and_cells(block_of(p))

set find([([Param],[WCell])] blocks_and_cells,Param p)=(int,int):
let rv=(-1,-1) in
for i:#blocks_and_cells do
 let (params,cells)=blocks_and_cells[i] in
 for j:#cells do
  if  find(parameters(params,cells[j]),p)!=-1 then rv:=(i,j);break fi
od
od;rv

set cells_given_AV(SpringerTable st, ComplexNilpotent O,([Param],[WCell]) blocks_and_cells)=
let sigma_O=st.springer(O) then
(block,cells)=blocks_and_cells then
()=if cells_verbose then prints("size of block: ", #block,new_line, "number or cells: ", #cells) fi in
(block,
   ##for cell@j in cells do
{    if cells_verbose then let ()=prints("doing cell #",j) fi  in}
    if st.ct.special_character(cell)=sigma_O then [cell] else [] fi
    od)

set parameters_given_AV(SpringerTable st, ComplexNilpotent O,([Param],[WCell]) cells)=[Param]:
parameters(cells_given_AV(st,O,cells))

set push([Param] params,ratvec gamma)=[Param]:
##for p in params do if I_will_survive(p,gamma) then [T_irr_nonzero(p,gamma)] else [] fi od

set cell_members_given_descent(RootDatum rd,WCell cell,[int] S)=
let (,list)=cell in
 ##for i:#cell do let (tau,)=list[i] in if complement(rd.ss_rank,tau)=S then [i] else [] fi od
 
{given cell, gamma, dim_special, reject the cell
unless #cell>=dim_special and
some parameter p in cell has tau_complement(p)=singular roots on gamma}
set potential_cell(RootDatum rd_int,WCell cell, ratvec gamma, int springer_dim)=bool:
if #cell< springer_dim then prints("dim: ", #cell, " ", springer_dim);false
elif
 let singular_roots=##for alpha@i in rd_int.simple_roots do if =alpha*gamma then [i] else [] fi od in
 let ()=prints("sr: ", singular_roots) in
 let a= any(let (,list)=cell in for i:#cell do let (tau,)=list[i] in prints("tau: ",tau);tau=singular_roots od)
 in prints("a=",a);not a then false
else true
fi 

{used in computing weak unipotent packets
given blocks_and_cells (at regular infinitesimal character)
compute all parameters whose special cell representation
equals Springer(O), and push the results to infinitesimal character gamma,
which is typically O_check.H/2, and singular
the SpringerTable st and ComplexNilpotent O are for the integral root system,
O is only used for its Springer representation
}
set parameters_given_AV_infinitesimal_character(SpringerTable st, ComplexNilpotent O,[([Param],[WCell])] blocks_and_cells,ratvec gamma)=
{[(int,int,Param)]: {[(block number, cell number, parameter)]}}
let springer_O=st.springer(O) {int} then
springer_dim=st.ct.dimension(springer_O) in
if cells_verbose then
 prints("given AV with infinitesimal character:", gamma, new_line, "O=",O);
 prints("st:", st, " bc:", blocks_and_cells);
 prints("blocks_and_cells:", blocks_and_cells)
fi;
##for (block,cells)@i in blocks_and_cells do
if cells_verbose then prints("doing block ",i , " of size ", #block,new_line, "number of cells: ", #cells) fi;
 ##for cell@j in cells do
 let survivors=[(int,int,Param)]:[] in
 {if cells_verbose then prints("block ",i,"/cell ",j, " of size ", #cell) fi;}
 if #cell< springer_dim
  then prints("dim: ", #cell, " ", springer_dim);[(int,int,Param)]:[]
 elif 
   for p in parameters(block,cells[j]) do
    if I_will_survive(p,gamma) then
{      prints("survive:", p, " ", gamma);}
      survivors#:=(i,j,first_param(T_irr(p,gamma)))
    fi {I_will_survive}
   od {/##for p};
 =#survivors
  then {don't bother checking cell representation} [(int,int,Param)]:[]
 elif
 st.ct.special_character(cell)=springer_O then
    survivors
 else
        [(int,int,Param)]:[]
 fi
 od  {/for cell}
od  {/for block}

{include permutation}
set parameters_given_AV_infinitesimal_character(SpringerTable st, ComplexNilpotent O,[([Param],[WCell])] blocks_and_cells,ratvec gamma,mat permutation)=[(int,int,Param)]: {[(block number, cell number, parameter)]}
let springer_O=st.springer(O) then
()=prints("O: ", O) then
springer_dim=st.ct.dimension(springer_O) in
if cells_verbose then
 prints("given AV with infinitesimal character:", gamma, new_line, "O=",O, new_line, "with permutation: ", permutation);
 prints("st:", st, " bc:", blocks_and_cells);
 prints("blocks_and_cells:", blocks_and_cells)
fi;
if cells_verbose then prints("given AV/gamma: st: ", st.root_datum, new_line, " O:", O,new_line," gamma:", gamma) fi;
##for (block,cells)@i in blocks_and_cells do
if cells_verbose then prints("doing block ",i , " of size ", #block,new_line, "number of cells: ", #cells) fi;
 ##for cell@j in cells do
 let survivors=[(int,int,Param)]:[] in
 if cells_verbose then prints("block ",i,"/cell ",j, " of size ", #cell) fi;
 if #cell< springer_dim
  then prints("dim: ", #cell, " ", springer_dim);[(int,int,Param)]:[]
 elif 
   for p in parameters(block,cells[j]) do
    if I_will_survive(p,gamma) then
{      prints("survive:", p, " ", gamma);}
      survivors#:=(i,j,first_param(T_irr(p,gamma)))
    fi {I_will_survive}
   od {/##for p};
 =#survivors
  then {prints("NONE");}{don't bother checking cell representation} [(int,int,Param)]:[]
 elif
 special_character_permuted(st.ct,cell,permutation)=springer_O
  then
let c=special_character_permuted(st.ct,cell,permutation) in prints("cell character: ",c, " springer_O:", springer_O);
survivors
 else [(int,int,Param)]:[]
 fi
 od  {/for cell}
od  {/for block}

{include precomputed cell characters (but NOT permutation)
mainly used for even orbits in E8}
set parameters_given_AV_infinitesimal_character(
SpringerTable st,
ComplexNilpotent O,
ratvec gamma,
[(([Param],[WCell]),[([int],[int])])]  cell_data
{[Param]: list of parameters in block
 [([int] indices of parameters in cell,[int] character of cell)]
 }
)=
[(int,int,Param)]: {[(block number, cell number, parameter)]}
let springer_O=st.springer(O) then
()=if cells_verbose then prints("given AV with infinitesimal character", new_line,"(precomputed cell character): ", gamma, new_line, "O=",O) fi in
if cells_verbose then prints("given AV/gamma: st: ", st.root_datum, new_line, " O:", O,new_line," gamma:", gamma) fi;
##for i:#cell_data do  {i=block number}
 let (parameters_and_cells,cell_characters)=cell_data[i] then
 (parameters,cells)=parameters_and_cells in
  ##for j:#cell_characters do
   let (cell_param_numbers,cell_character)=cell_characters[j] then
    ()=if cells_verbose then prints("block ",i,"/cell", j, " of size ",#cell_param_numbers) fi then
    spec=special_character(st.ct,cell_character) in
    let ()=if cells_verbose then prints("spec: ", spec, " ", "springer_O: ", springer_O) fi in
    if spec=springer_O then
    ##for k in cell_param_numbers do let p=parameters[k] in if I_will_survive(p,gamma) then
{   prints("survive:", p, " ", gamma);}
   [(i,j,first_param(T_irr(p,gamma)))] else [] fi od
  else []
  fi
 od
od