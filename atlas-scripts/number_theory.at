<basic.at
<lazy_lists.at
<polynomial.at

primes : inf_list:
   let odd_primes () = inf_node:die
   then composite = {predicate to be used when (re)defining |odd_primes|}
     let p=0 {scratch variable to use in multiple assignment:} in
     (int n) bool: { actual |composite| predicate }
       let rem=odd_primes { think of rem as pointer into |odd_primes|} in
       while set(p,rem):=rem(); let (q,r)=n\%p
       in >r { any zero remainder suffices for being composite }
       do if q<=p then { no further divisibility possible } return false fi
       od; true
in odd_primes :=
   ( let m=3 {we always start adding 2, so effectively from 5} in
     @: (3,rec_fun gen() inf_node: while composite(m+:=2) do () od; (m,gen))
   ).memoize; (@:(2,odd_primes)) { finally prefix the unique even prime }

set factorization (int n) = [int,int]: { (prime,exponent) }
   case n then n:=-n in error("Cannot factorize 0") else () esac;
   let (p,prs)=primes()
   then factors =
     while p*p<=n
     do let (q,r)=n\%p,count=0 in
       while =r do n:=q; count+:=1; set (q,r):=n\%p od
     ; (p,count) next set(p,prs):=prs()
     od
   in if n>1 then factors#:=(n,1) fi;
   ## for (,c):pair in factors do if =c then [] else [pair] fi od

 { all divisors, unsorted but in order compatible with divisibility relation }
set divisors (int n) = [int]:
   let result=[int]:[1] in
   for (p,c) in factorization(n)
   do result := ## for i:c+1 do let pow=p^i in for f in result do pow*f od od
   od; result

set invertibles_modulo (int n) = [int]:
   list (abs(n),(int i)bool: gcd([i,n])=1)

{ Euler totient function }
set phi (int n) = int:
   assert(n>0); for (p,c) in factorization(n) do (p-1)*p^(c-1) od.product

set expand (int_poly(X,a,), int k) = int_poly: { substitute X^k for X }
   ((## for i:#a-1 do a[i] # for :k-1 do int:0 od od) # a~[0],X).to_int_poly

set cyclotomic_polynomial (int n) = int_poly:
(  let result = to_int_poly([-1,1],"X"), f = factorization(n), prod=1 in
   for (p,c) in f
   do set (result,) := monic_divide(expand(result,p),result)
   ; prod *:= p^(c-1)
   od
;  expand(result,prod)
)

set is_prime(int n)=bool:#divisors(n)=2