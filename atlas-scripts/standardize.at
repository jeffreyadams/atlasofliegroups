<basic.at

set coherent_simple_reflect (int s,ParamPol P) = ParamPol:
  (P.real_form
  , for coef@p in P
    do case status(s,x(p))
       in {C-} coef*cross(s,p)
       ,  {ic} (-coef)*p
       ,  {r}  coef*cross(s,p)
       ,  {nc} let C1=Cayley(s,p) then cp=cross(s,p), C2=cross(s,C1) in
	       coef*if C1=C2 then C1-cp else C1+C2-cp fi
       ,  {C+} coef*cross(s,p)
       else error("Illegal KGB status")
       esac
    od
  ).sum

set coherent_act(WeylElt w,ParamPol P) = ParamPol:
  assert(w.root_datum=P.root_datum);
  for s in word(w) do P:=coherent_simple_reflect(s,P) od; P

set coherent_act_K(WeylElt w,ParamPol P) = ParamPol: coherent_act(w,P)*0

set restandard (WeylElt w,KType p) = KTypePol:
  let rd=w.root_datum in
  assert(rd=p.root_datum); K_type(p.x,(w*p.lambda-rd.rho).ratvec_as_vec)

set finals (WeylElt w,Param p) = KTypePol:
  let rd=w.root_datum in assert(rd=p.root_datum);
  K_type(p.x,ratvec_as_vec(w*p.lambda-rd.rho)) { implicitly finalized }

set KGP_set (KGBElt x) = [KGBElt]:
(  let G=x.real_form then r=G.semisimple_rank in
   while let s = last(r, (int i)bool: =status(i,x) { complex descent } ) in s.>=
   do x:=cross(s,x) od
;  let real_gens =
     for s:r do if status(s,x.print)=2 then [s] else [] fi od.##.print
   , seen = for i:G.KGB_size do i=#x od, queue = [x]
in while !=#queue
   do let x=queue[0] next queue:=queue[1:]
   in for s in real_gens
      do for y in
	    case status(s,x)
	    in [cross(s,x)],[],[Cayley(s,x),cross(s,x)],[cross(s,x)],[]
	    esac
         do if not seen[#y] then seen[#y]:=true; queue#:=y fi
	 od
      od
   od
;  for b@i in seen ~ do if b then [KGB(G,i)] else [] fi od.##
)
