<misc.at { for |finalize@Param| }
<hermitian.at { for |hermitian_form_irreducible@Param| }

{p-> p_0=first_param(finalize(t*0))=parameter(x,lambda,0)->
complementary series (parameter(x,lambda,t*rho) ->
q=parameter(x,lambda,t_0*rho) where
t_0=reducibility_point(x,lambda,rho)[0]
this is the smallest _possible_ reducibility point
and is necessarily unitary
if p_0 is a fundamental series then there is no complementary series
q is a unitary representation
usually (but not always?) the standard module is reducible
}
set end_of_complementary_series (Param p_in) = (bool,Param):
let p=first_param(ParamPol: p_in*0) { get a final parameter at nu=0; may fail }
then q=parameter(x(p), lambda(p), rho(real_form(p)))
then rp=reducibility_points(q)
in if #rp=0 then (false,p) else (true, q*rp[0]) fi

{given a list of parameters params, return
list [(q,purity(hf))] where hf is the Hermitian form on q,
all hf should be pure, in fact integers
}
set test_endpoint_complementary_series([Param] params) = [Param,(int,int,int)]:
(  let result = [Param,(int,int,int)]:
      for p in params
      do let (deformable,q) = end_of_complementary_series(p)
      in if deformable
	 do let purity=purity(hermitian_form_irreducible(q))
         in  prints(new_line,"p=",p, new_line,"q=",q,new_line,purity)
	 ;   (q,purity)
	 fi
      od.##
in prints(new_line)
;  for (p,purity) in result do prints(p, " ", purity) od
;  prints(new_line)
;  result
)