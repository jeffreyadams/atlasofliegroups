<misc.at

{v is orthogonal to all vectors in [vec] vecs}
set is_orthogonal (vec v,[vec] vecs) = bool: =v*vecs { whether a row of zeros }

{find simple factors of rd
 initialize simple_root_numbers=[[int]]:[]
 inductively, simple_root_numbers=[[a1,a2,...],[b1,b2,...],...]
 where [a1,a2,...] is connected
 inductively run over indices of simple roots
 inductive step
  simple_root_numbers=[[a1,a2,...],[b1,b2,...],...]
  previous=simple_root_numbers
  simple_root_numbers_temp=[[i]]
  run over each [int] v in simple_root_numbers
    if coroot(i) is orthogonal to each simple root in v,
      append v to simple_root numbers
    if coroot(i) is not orthogonal to some simple root in v,
      replace first term of simple_root_numbers_temp with itself#v

 when done, convert each [int] v in simple_root numbers to a root datum
 constructed from the simple roots and simple coroots in v
 return simple_root_numbers and [RootDatum]
 the first argument gives the mapping between simple root numbers in each factor
 and the simple root numbers of rd
}
set simple_factors (RootDatum rd) = ([[int]] , [RootDatum]):
begin
  let sr=simple_roots(rd), scr=simple_coroots(rd), blocks= [[int]]: [] in
  for alpha@i in simple_roots(rd)
  do let orthogonal_indices = list(#blocks,(int i)bool:
         is_orthogonal(alpha,for j in blocks[i] do scr[j] od))
     in
     blocks :=
       for k in orthogonal_indices do blocks[k] od #
       ( ##for k in complement(#blocks,orthogonal_indices) do blocks[k] od # i)
  od
  ; (blocks
    , for block in blocks { list of generators for one factor }
      do
        root_datum(for j in block do sr[j] od,
                   for j in block do scr[j] od
                  ).derived
      od
    )
end



