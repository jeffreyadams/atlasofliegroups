<basic.at
<class_tables.at { for |class_table_G| }
<character_tables.at { for type |CharacterTable| }

set character_table_G = (RootDatum -> CharacterTable):
   let class_names = ["e", "S_short", "S_long", "R/6", "R/3", "R/2"]
   , irreps = [classical_irrep,string,[int]]:
     [( null_irrep(), "trivial"   , [1,1,1,1,1,1]   )
     ,( null_irrep(), "short sign", [1,-1,1,-1,1,-1])
     ,( null_irrep(), "long sign" , [1,1,-1,-1,1,-1])
     ,( null_irrep(), "full sign" , [1,-1,-1,1,1,1] )
     ,( null_irrep(),  "triangular reflection", [2,0,0,-1,-1,2])
     ,( null_irrep(),  "hexagonal reflection",  [2,0,0,1,-1,-2])
     ]
in (RootDatum rd) CharacterTable:
   let class_table = class_table_G(rd)
   then classes = [WeylElt,classical_class,string]:
      for w@i in class_table.class_representatives
      do (w,null_class(),class_names[i])
      od
   in character_table(class_table,classes,irreps)

set character_table_G(int n) = CharacterTable:
   character_table_G(simply_connected("G2"))

set to_special_G2 = (int i) int:
   case i in 0, 5, 5, 3, 5, 5 else error("Wrong G2 irrep number") esac
