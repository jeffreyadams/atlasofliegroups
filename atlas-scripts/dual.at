<basic.at
<parameters.at { for parameter@(KGBElt,KGBElt,ratvec) }
<synthetic.at { for type KGBElt_gen }
<Vogan-dual.at { for |dual@(Param,InnerClass)| }
<polynomial.at { type i_poly,update_matrix_entry@(i_poly_mat,int,int,i_poly) }
<extended.at { for type ExtParam }
<KL_polynomial_matrices.at

{some similar stuff to Vogan-dual.at, also some extra functionality}

{-------------------------  dual of a block --------------------------}

{ find permutation relating two lists of parameters
  perm=permutation(B1,B2) =>
   i^th entry gives index of B1[i] in B2
   B1[i]=B2[perm[i]]
}
set permutation ([Param] B1, [Param] B2) = [int]:
  assert(#B1=#B2,"B1 and B2 not the same size"); for b in B1 do find(B2,b) od

{ various functions for constructing dual block:
  dual(B), dual(B,g), dual(B,g,dual_inner_class), dual(B,dual_inner_class)
  each returns ([Param] B_vee,[int] permutation)
  B_vee is block for for G^vee(infinitesimal character)
  Vogan duality is B[i] -> B_vee(permutation[i])
}
set dual_block ([Param] B, InnerClass dual_inner_class) = ([Param],[int]):
  let B_vee=block_of(dual(B[0],dual_inner_class))
  then B_dual=for p in B do dual(p,dual_inner_class) od
  in
  { B_vee is in length *increasing* order
    B_dual is in length *decreasing* order; B[i]->B_dual[i] is Vogan duality
    B_vee=B_dual up to permutation, roughly reversing order
  }
  (B_vee,permutation(B_dual,B_vee))

{don't specify the inner class and/or the dual infinitesimal character}
set dual_block ([Param] B) = ([Param],[int]):
  dual_block(B,dual_inner_class(B[0]))

set dual_ExtParameter (
       ExtParam(ic,delta,gamma,lambda,theta,g,l,omega,tau,t)) = ExtParam:
    (dual(ic),^delta,g,l,omega,gamma,lambda,theta,t,tau)

{ matrix of P-polynomials for B, with signs if second argument is true
  usually B and then the block returned by KL_block should be identical to B,
  in the same order, so perm_B_block is the identity. In particular this
  should hold if B was constructed using block_of().
  Otherwise perm_B_block might be nontrivial
  In the singular case the matrix is of size #survivors
}
{ The Q polynomials are obtained from KL_P_signed_polynomials(dual block)
  after applying a permutation and transpose
  should satisfy P_signed*Q=I
  test this with P_signed*Q=identity_poly_matrix(#P)
  assuming B is in standard length increasing order:
  P and Q are  both upper triangular
}
set KL_Q_polynomials ([Param] B) = i_poly_mat:
  let (B_vee,perm)=dual_block(B)
  then Q_0=KL_P_polynomials(B_vee) in  { Q_0 is upper triangular }
  let Q_1=poly_permute_basis(perm,Q_0) in  { Q_1 (usually) lower triangular }
  transpose(Q_1) { (usually) upper triangular }

{ individual Q polynomials
  given B to make sure we have the right basis in the right order
  given Q so don't need to recompute it
}
set KL_Q_polynomial ([Param] B, i_poly_mat Q,Param irr,Param std) = i_poly:
  let index_irr=find(B,irr) then index_std=find(B,std) in
  assert(index_irr>=0 and index_std>=0,"irr and/or std not found in block");
  Q[index_irr][index_std]

{ in some cases this test fails because it is off by a permutation which
  I don't understand
}
{ for example G=Sp(6,R), test_duality(spherical_principal_series(G,rho(G))) }
{ returns P,Q, and true/false;
  P*Q should be the identity}
set test_duality (Param p) = (i_poly_mat,i_poly_mat,bool):
(  let B=block_of(p)
   then P_signed=KL_P_signed_polynomials(B), Q=KL_Q_polynomials(B)
in prints("P_signed="); printPolyMatrix(P_signed)
;  prints("Q="); printPolyMatrix(Q)
;  let R=P_signed*Q
   then success = R=identity_poly_matrix(#P_signed)
in if success then prints("passed: P*Q=I")
   else prints("failed: P*Q=I"); printPolyMatrix(R)
   fi
;  (P_signed,Q,success)
)
{
set Test_dual(RealForm G,ratvec gamma)=
let all=all_parameters_gamma(G,gamma) then
bc=blocks_and_cells(all) then
()=prints("#bc: ", #bc) in
for (block,) in bc do let (,,c)=test_duality(block[0]) in c od
}

set print_inv_composition_series(Param p)=void:
for q in block_of(p) do
 let c=composition_series(q)[p] in
 if !=c then prints(c.split_as_int, " ", q) fi od

set print_inv_character_formula(Param p)=void:
for q in block_of(p) do
 let c=character_formula(q)[p] in
 if !=c then prints(c.split_as_int, " ", q) fi od 

set m_Q(Param p,Param q)=composition_series(q)[p].split_as_int
set m_P(Param p,Param q)=character_formula(q)[p].split_as_int


set Cayley(int i,[Param] params)=##for p in params do Cayley_set(i,p) od
set cross(int i,[Param] params)=for p in params do cross(i,p) od

set Cayley_or_cross(int i,[Param] params)=
if i<0 then Cayley(-i-1,params) else cross(i,params) fi

set chain([int] S,[Param] params)=
let rv=params in for i in S~ do rv:=
 ##for q in rv do Cayley_or_cross(i,rv) od od;rv

set chain([int] S,Param p)=chain(S,[p])

set chain([int] S,Param p,[Param] block)=for q in chain(S,[p]) do find(block,q) od



