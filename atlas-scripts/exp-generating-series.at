{ some help with exponential generating series, which are lazily computed
  formal series in $X^n/n!$ for $n\in\N$, with integer coefficients
}

<basic.at
<combinatorics.at { for binomial coefficients }
<lazy_lists.at

{ we can reuse |sum| from lazy_lists for addition of exponential series
  but for multiplication we need a modification:
}

set exp_multiply (inf_list f, inf_list g) = inf_list:
(  let coefs = [int,int]: []
in (rec_fun m () inf_node:
      let n=#coefs, (a,new_f)=f(), (b,new_g)=g() { get new values }
   in  f:=new_f; g:=new_g; coefs := (coefs next coefs:=[]) # (a,b)
   ;   ( for (a,)@i in coefs do let (,b)=coefs~[i] in binom(n,i)*a*b od.sum
       , m
       )
   )
  .memoize
)

{ the same, but start in degrees |k,l|, and return only relevan part }
set exp_mult (inf_list f, int k, inf_list g, int l) = inf_list:
(  let coefs = [int,int]: [], cf=0,cg=0
in (rec_fun m () inf_node:
      let n=#coefs+k+l in set ((cf,f),(cg,g)):=(f(),g()) { get new values }
   ; ( for (a,)@i in coefs #:= (cf,cg)
       do let (,b)=coefs~[i] in binom(n,i+k)*a*b
       od.sum
     , m
     )
   )
  .memoize
)


set exp_divide (inf_list f, inf_list g) = inf_list:
(  let (c,denom)=g() in assert(@:c=1,"Division requires unit constant term")
;  let coefs = { pairs of corresponding coefficients of |denom,result| }
      [int,int]: []
in (rec_fun m () inf_node:
      let (c,new_f)=f() { get one new value from numerator series }
      , n = #coefs
      then q = { solve: convolve_binom(1#denom_coefs,result_coefs#q) = c }
         c - for (,b)@i in coefs do let (a,)=coefs~[i] in binom(n,i)*a*b od.sum
      , (d,new_denom)=denom() { advance |denom| as well; don't use |d| yet }
   in  f:=new_f; denom:=new_denom; coefs := (coefs next coefs:=[]) # (d,q)
   ;   ( q , m )
   )
  .memoize
)

set exp_diff (inf_list f) = inf_list: let (,result)=f() in result

set exp_substitute (inf_list g) = (inf_list->inf_list): { f->f[X:=g] }
(  let (g0,tail)=g() then !gg=memoize(tail) { |gg=g/X| }
   , exp_mult (inf_list f, inf_list p, int k) = inf_list:
     let coefs = [int,int]: [], cf=0,cp=0 { local variable for each call }
     in rec_fun m () inf_node:
	   let n=#coefs+k in set ((cf,f),(cp,p)):=(f(),p()) { get new values }
	; ( for (a,)@i in coefs #:= (cf,cp)
	    do let (,b)=coefs~[i] in binom(n,i+1)*a*b
	    od.sum\k
	  , m
	  )
in assert(@:g0=0,"Can only substitute series with constant term 0")
;  (inf_list f) inf_list: { the map returned from |exp_substitute| }
     let n=0, power=series_1, result=extend_0(#0), c=0 in
     memoize
     (rec_fun r () inf_node:
       set (c,f):=f(); set (c,result):=(result+c*power)()
       ; power := exp_mult(gg,power,n+:=1).memoize
       ; (c,r)
     )
)


set exp_comp_inverse (inf_list g) = inf_list:
(  let (!g0,gg)=g()
   then n=1, power= gg:=memoize(gg)
   then (!g1,target)=gg() { |target:=(g-X)/X^2| }
   , exp_mult (inf_list f, inf_list p, int k) = inf_list:
     let coefs = [int,int]: [], cf=0,cp=0 { local variable for each call }
     in rec_fun m () inf_node:
	   let n=#coefs+k in set ((cf,f),(cp,p)):=(f(),p()) { get new values }
	; ( for (a,)@i in coefs #:= (cf,cp)
	    do let (,b)=coefs~[i] in binom(n,i+1)*a*b
	    od.sum\k
	  , m
	  )
in assert(@:g0=0 and g1=1,"Can only do series with leading term X")
; let rec_fun r () = inf_node: { no arguments, call modifies |target|, |power| }
     power:=exp_mult(gg,power,n+:=1).memoize { |g^n/n!|, shifted }
     ;  let (c,t_tail) = target(), (,t_power)=power()
     in target := t_tail - c*t_power
     ; (-c,r)
in memoize(@:(0,@:(1,r))) { here |memoize| is essential }
)
{ e.g., exp_comp_inverse([0,1,-1].extend_0) solves $f-f^2/2=X$ }


{ we can now define some trigonometric functions here; exp is just |ones| }
sin : series((int n): let(q,r)=n\%2 in if r=0 then 0 else (-1)^q fi)
cos : exp_diff(sin)
tan : exp_divide(sin,cos)

{ for instance to count permutations with allowed cycles of distinct lengths
  given in a list |L|, one can compute $\exp(\sum_{l\in L}{X^l\over l})$,
  which by the property of the exponential can be done as follows
}
set count_permutations_with_cycles ([int] L) = inf_list:
   let prod = series_1
in for l in L
   do prod := exp_multiply(prod,series((int n)int:
      { compute coefficient of $X^n/n!$ in $\exp({X^l\over l})$ : }
      let (q,r)=n\%l in if =r else 0 then
        { $n! / (l^q*q!)$: product of numbers in [1,n] not divisible by $l$ }
	for i:q do for j:l-1 from 1 do l*i+j od.product od.product
      fi
   ))
   od; prod

{ Here is more general exponentiation }
set exp_of_exponential_series (inf_list S) = inf_list:
   let (c,thunk)=S() then coef = 1 next
      assert(@:c=0,"Exponential map needs zero constant term")
   , coefs = [int,int]: [] { pairs of result coef and coef from |S| }
in ( @ inf_node:
     ( coef
     , rec_fun exp() inf_node:
	   let n=#coefs
	in set (c,thunk) := thunk()
	;  coefs := (coefs next coefs:=[]) # (coef,c)
	;( coef := { save the last coefficient contributed for next time around }
	   for (a,)@i in coefs do let (,b)=coefs~[i] in binom(n,i)*a*b od.sum
	 , exp
	 )
     )
   ).
   memoize { we must avoid having |memoize| inside |@ inf_node:| body }

{ as an example of using |exp_of_exponential_series|, consider the question of
  counting permutations with a condition on the cycle length, but which is not
  given by a finite list of allowed cycles (for example, any odd length cycles
  are allowed). This would require an infinite product to be made in
  |count_permutations_with_cycles|, and indeed infinite products can be dealt
  with. But the product comes from in infinite sum under the |exp| operator, so
  instead we can just produce an exponential generating series and then apply
  |exp_of_exponential_series| to it. We do this here, where the argument is an
  |inf_list|, supposed strictly increasing and of positive integers, that
  describes the set of allowed cycle lengths.
}
set count_permutations_with_cycles (inf_list allowed_cycles) = inf_list:
   let series = inf_list:
     ( @ inf_node:
       ( 0
       , let (c,thunk)=allowed_cycles(), length = 1
	 in assert (c.>,"Only positive length cycles can be allowed")
	 ; rec_fun f() inf_node:
	   if length<c { whether |length| is absent from |allowed_cycles| }
	   then length+:=1; (0,f) { emit a zero term, try next length }
	   else { now |length| is allowed; emit term and advance |c| }
	      set (c,thunk):=thunk()
	   ;  assert (c>length,"Allowed cycle lengths not increasing")
	   ;  (fac(length-1) { for $X^l\over l$ } next length+:=1,f)
	   fi
       )
     ).memoize
in exp_of_exponential_series(series)

{ for example here is how to count derangements without the alternating formula }
derangement_numbers : count_permutations_with_cycles(series((int n):n+2))

{ also try <number_theory.at, then |count_permutations_with_cycles(primes)| }
