{ordinary endoscopic lifting}
<endoscopic_groups.at
<kappa.at

set find([(Param,Param)] lifts, Param pH)=int:first(for (p,) in lifts do p=pH od)

set find_lift([(Param,Param)] lifts, Param p_H)=Param:
let index=find(lifts,p_H) in
assert(index>-1, "parameter p_H  not found in lifts");
let (,p_G)=lifts[index]  in p_G

set endoscopic_lift_std(Param p_H,mat M,RealForm G, [(Param,Param)] lifts,ratvec v)=ParamPol:
param_pol(kappa_packet(find_lift(lifts,p_H),v))

set endoscopic_lift_std_raw(ParamPol P_H,mat M,RealForm G, [(Param,Param)] lifts, ratvec v)=
let rv=[ParamPol]:[] in
for (c,p) in %P_H do
 if p=L_packet_representative(p) then
  rv#:=c*endoscopic_lift_std(p,M,G,lifts,v) fi
 od;
rv

set try_all([ParamPol] raw_lifts)=
let signs=box(2,#raw_lifts) then
lists=
 for v@i in signs do
  for j:#v do (-1)^v[j]*raw_lifts[j] od od
in
for terms in lists do sum(raw_lifts[0].real_form,terms) od

set endoscopic_lift_irr_tries(ParamPol P_H_of_irreducibles, mat M, RealForm G, [(Param,Param)] lifts, ratvec v)=
for P_G in try_all(endoscopic_lift_std_raw(character_formula(P_H_of_irreducibles), M,G,lifts,v))
do composition_series(P_G) od

set endoscopic_lift_irr_tries(Param single_stable_irreducible, mat M, RealForm G, [(Param,Param)] lifts, ratvec v)=
endoscopic_lift_irr_tries(1*single_stable_irreducible,M,G,lifts,v)



{
set endoscopic_lift_irr(Param p_H,mat M, RealForm G,[(Param,Param)] lifts)=
composition_series(endoscopic_lift_std(character_formula(p_H),M,G,lifts))       }