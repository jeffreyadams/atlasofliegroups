<geck_generic { for |Springer_table_generic_degrees| }
<restricted_roots.at {for remove_zeros@[vec]}
<nci_nilrad_roots.at {for all_sums@([ratvec])}

{the Lusztig map goes from triples (O,x,xi) to W^
 this file implements an algorithm (conjectural)
 to implement this when xi=1
 the set obtained for fixed O, running over x,
 is a Lusztig (left) cell
 Note: this used to involve the dual group but this has been changed,
 the dual version will be moved to lusztig_cells_dual.at
}

{sigma_lusztig (used to be sigma_L, the new name is better
sigma_lusztig(O,x) is a of a representation of W(G)
conjecturally it is the same as
Lusztig(O,x,1) as defined in the Orange book

G, O = special orbit for G, x\in A-bar(O)
M=M(A-bar(O)): pairs defined by Lusztig
xi an irreducible representation of Cent_{A-bar(O)}(x)
(O,x,xi)  -- Lusztig -->  W(G)^

generalization of Springer map

(O,1,1) -> Springer(O)  Springer correspondence for G
        -> Springer(O)\otimes sign \in W(G)^
        -> W(G)^ via the isomorphism W(G)\simeq W(G)

More general case:
(O,x,1)  -> L_x=Cent_{G}(x)^0
         -> O_L_x (same H)
         -> Springer(O_L_x)\otimes sgn in W(L_x)^   NOT the same as Sommers: Springer(dual(O_L_x))
	 -> sigma_lusztig_x\in W(L_x) via W(L_x)\simeq W(L_x_v)
	 -> [ no: truncated induction from W(L_x) to W(G)]
         -> induce to W(G) and keep the term(s) with the same degree as sigma_lusztig(O,1,1)

Note: this O_L_x might not be special, so Springer(dual(orbit)) \ne Springer(orbit)*sign

Non-trivial \xi not yet considered
}

set sigma_lusztig_verbose=false

{main algorithm for computing sigma_lusztig, this won't usually be called by the user
 M is a pseudo-Levi
 H_M is (the ss element of) an orbit for M
 exp(2pi i y) is an element of center of M^0
 typically (M,H_M,y) are provided by component_datum@ComplexNilpotent
}
{arguments:
 G given group with its coordinate, need this to compute roots of L in G
 G.ct is needed to compute truncated induction/exchange_long_short
 L.st is needed to compute Springer(O_L)  (L=centralizer of y)
 O: given orbit on the dual side
 M: pseudo-Levi in which exp(2\pi iy) is central
  (this isn't really needed but is helpful information)
 H_M: ss element for orbit of M
 y: x=exp(2\pi iy)
 note that L depends on y
}

{-------------------------------------------------------------------}
{modify to work on the group side:
generalization of Springer map

(O,1,1) -> Springer(O)  Springer correspondence for G  (Springer(0)=sign/Springer(principal)=trivial)

General case:
(O,x,1)  -> L_x=Cent_{G}(x)^0
	 -> O_L_x (same H)
	 -> Springer(O_L_x) in W(L_x)^
	 -> induce from W(L_x) to W(G)
	 -> keep term(s) with generic degree: generic_degree(Springer(O))
}

{returns [(int,int)] = [(index,multiplicity)]
 usually [(j,1)]: meaning only character #j appears with multiplicity 1
 rarely  [(j,1),(k,1)...] : several characters appear with multiplicity 1
 occasionally []: empty
 so far never see mult>0
}

{this used to be called _no_dual, now the default}
set sigma_lusztig_long({RootDatum G,}SpringerTable st_G,ComplexNilpotent O,RootDatum M,vec H_M,ratvec y)=
(RootDatum,vec,ratvec,[int]): {returns (M,H_M,y,j_values)}
let G=st_G.root_datum then
()=if sigma_lusztig_verbose then
   prints(new_line
         ,"Computing sigma_lusztig: ",new_line
         ,"O=", O.diagram,new_line
         ,"G=", G,new_line
	 , "st_G: ", st_G.root_datum, new_line
	 ,"M=", M, new_line
	 , "H_M=",H_M,new_line
	 ,"y=", y)
       fi
then ct_G=st_G.character_table
{then desired_special = ct_G.special(ct_G.tensor_sign_index(st_G.springer(O)))}
then desired_special = ct_G.special(st_G.springer(O))
in
if is_integer(y*G.simple_roots)  {y is in weight lattice}
then  {L=G, L=G, don't need induction}
   let ()=if sigma_lusztig_verbose
	  then prints("y is integer, no induction",new_line)  fi
   then sigma=int: st_G.springer(O)
   then ()=if sigma_lusztig_verbose
	   then prints("sigma (no induction): ", sigma,new_line)
	   fi
   in (M,H_M,y,[sigma])  {return value}
else  {L proper in G, need induction; compute L, sigma_L on L}
 let ()=if sigma_lusztig_verbose then prints("need induction: ") fi in
 let L=centralizer(G,y)
 then H_L=dominant(H_M,L)
 then O_L=ComplexNilpotent:(L,(),H_L)
 then ()=
   if sigma_lusztig_verbose
   then prints(("L=", L,new_line
   	      ,"H_L=", H_L,new_line
	      ,"O_L:", O_L.H, " "
	      , O_L.diagram)
	      )
   fi
 then roots_L=for alpha in L.simple_roots do root_index(G,alpha) od
 then
   {avoid computing L.Springer_table if orbit_L =0 or principal,
    only need L.class_table
    first compute character sigma_L of L=springer(O_L)\otimes sgn
        also desired_degree_sgn: the (fake) degree of sigma_L}
    (sigma_L_sgn,desired_degree_sgn) = ([int],int):  {desired_degree_sgn is *not* used, desired_special instead }
{       if O_L=L.zero_orbit then (L.character_table.trivial,0)}
       if O_L=L.zero_orbit then (L.character_table.sign,0)
{       elif O_L=L.principal_orbit then (L.character_table.sign,#L.posroots)}
       elif O_L=L.principal_orbit then (L.character_table.trivial,#L.posroots)
       else  {not 0 or principal orbit; need to compute L.Springer_table: }
	let ()=if sigma_lusztig_verbose then prints(("computing st_L:") ) fi
	then st_L=L.Springer_table { main work is here }
	then () =
	  if sigma_lusztig_verbose
	  then prints("done computing L.Springer_table")
	  fi
	then sigma_L_sgn = {springer(O_L)\otimes sgn}
{	  st_L.ct.tensor_sign_index(st_L.springer(O_L))}
	  st_L.springer(O_L)
	then char_sgn=st_L.ct.characters[sigma_L_sgn]
	then deg_sgn=st_L.ct.degree(sigma_L_sgn)
	then ()=if sigma_lusztig_verbose then prints("char_sgn: ", char_sgn) fi
	 in (char_sgn,deg_sgn)
       fi  {now: sigma_L_sgn=character of L, and desired_degree_sign)}
 then {next: induce sigma_L_sgn}
  ()=if sigma_lusztig_verbose
     then prints("inducing character from L:", L,new_line
     	  	, "roots_L: ", roots_L, new_line
		, "sigma_L_sgn:", sigma_L_sgn
		)
     fi
 then ind_sgn = let WctL=L.construct_class_table in
    induce_character(WctL,ct_G.class_table,sigma_L_sgn)
 then
  ()=if sigma_lusztig_verbose then
	("finished inducing character from L:", L, new_line
	, "ind_sgn[2]=" , ind_sgn,new_line
	).prints
     ;  ct_G.view_char(ind_sgn)
     fi
 then ind_decomposed_sgn=ct_G.decompose(ind_sgn)
 then
 { this version of choosing the degree is not being used:
   springer_O=st_G.springer(O) then
   desired_generic_degree = st_G.ct.generic_degree(springer_O) then
   desired_degree = st_L.degree(springer(O_L)) then
   ()=if sigma_lusztig_verbose then prints("getting desired degree: ", new_line, "O=",O.diagram, new_line, "springer(O): ", springer_O,
     new_line, "sigma_lusztig for degree: ", sigma_lusztig,
     new_line,"desired_degree: ", desired_degree)
    fi  then }
   char_indices_sgn = [int]:
     for i:#ind_decomposed_sgn
{     do if (ind_decomposed_sgn[i]>0 and st_G.ct.degree(i)=desired_degree_sgn)}
     do if (ind_decomposed_sgn[i]>0 and ct_G.special(i) = desired_special )
        else [] { skip unless condition satisfied }
	then
	  {the following probably never happens: one has correct degree and mult >1.
	   If so print loud WARNING}
	  if ind_decomposed_sgn[i]>1
	  then prints("WARNING: multiplicity >1: ", new_line
		     , "i=", i, " mult= ",ind_decomposed_sgn[i],new_line
		     , "ind_decomposed_sgn=",ind_decomposed_sgn
		     )
	  fi;
{	  [st_G.ct.tensor_sign_index(i)] {tensor with sign again}}
	  [i] 
	fi
     od.##
 in (M,H_M,y,char_indices_sgn)
fi  {end if y is in weight lattice}

set sigma_lusztig({RootDatum G,}SpringerTable st_G,ComplexNilpotent O,RootDatum M,vec H_M,ratvec y)=[int]:
let (,,,j_values)=sigma_lusztig_long({G,}st_G,O,M,H_M,y) in j_values

set lusztig_cell_long ({RootDatum G,}SpringerTable st_G,ComplexNilpotent O) = [(RootDatum,vec,ratvec,[int])]:
  for (M,H_M,y) in component_representatives_plus(O)
  do let ()=
     if sigma_lusztig_verbose
     then prints
       ("computing sigma_lusztig for orbit=", O, " ", O.diagram, new_line
       ,"M=", M, new_line
       ,"H_M=",H_M,new_line
       , "y=", y
       )
     fi in
  sigma_lusztig_long({G,}st_G,O,M,H_M,y)
  od

{an entry in lusztig_cell_long can be (M,H_M,y,[])
 use remove_zeros to eliminate these}
set lusztig_cell ({RootDatum G,}SpringerTable st_G,ComplexNilpotent O) = [[int]]:
sort_u(remove_zeros(for (,,,j_values) in lusztig_cell_long({G,}st_G,O) do j_values od))

{include terms coming from deformation}
set lusztig_cell_plus ({RootDatum G,}SpringerTable st_G,ComplexNilpotent orbit) = [[int]]:
let G=st_G.root_datum then
rv=for (M,H_M,y) in component_representatives_plus(orbit) do
    let basis=M.radical_basis in
    let variants=if =#basis then [null(G.rank)] else all_sums(basis) fi in
    for v in variants do
     if sigma_lusztig_verbose
      then prints("y=", y, new_line, "v=",v/(G.coxeter_number+1));
	  prints("lusztig_cell_plus", new_line
         	,"orbit: ", orbit.diagram, basis, new_line
                ,"M=", M, new_line
                ,"H_M=",H_M,new_line
                ,"y=", y
		)
     fi;
     sigma_lusztig({G,}st_G,orbit,M,H_M,y+v/(G.coxeter_number+1))
    od
   od.##
in sort_u(remove_zeros(rv))

{compute lusztig cells, running over given list of nilpotents}
{returns: array, one entry for each orbit
 orbit -> array of [M,H_M,y,j_values]}
set lusztig_cells ({RootDatum G,}SpringerTable st_G,[ComplexNilpotent] orbits) =
      [[ ComplexNilpotent,RootDatum,vec,ratvec,[int] ]]:
   for orbit@counter in orbits
   do if sigma_lusztig_verbose
      then prints(new_line
		 ,"-------------------------------------------",new_line
		 ,"Orbit #",counter,new_line
		 ,"Orbit=",orbit.diagram)
      fi;
      for (M,H_M,y) in component_representatives_plus(orbit)
      do let j_values=sigma_lusztig({G,}st_G,orbit,M,H_M,y)
      	 in (orbit,M,H_M,y,j_values)
      od
  od

set lusztig_cells_plus\
  ({RootDatum G,}SpringerTable st_G,[ComplexNilpotent] orbits) =
  let G=st_G.root_datum in 
  for orbit@counter in orbits
  do
     if sigma_lusztig_verbose
     then
       prints(new_line
	     ,"-------------------------------------------",new_line
	     ,"Orbit #",counter,new_line
	     ,"Orbit=",orbit.diagram
	     )
     fi;
    for (M,H_M,y) in component_representatives_plus(orbit)
    do let basis=M.radical_basis in
       let variants=if =#basis then [null(G.rank)] else all_sums(basis) fi in
       for v in variants
       do if sigma_lusztig_verbose
          then prints("y=", y, new_line, "v=",v/(G.coxeter_number+1));
	     ("lusztig_cell_plus", new_line
	     ,"orbit: ", orbit.diagram, basis, new_line
	     ,"M=", M, new_line
	     ,"H_M=",H_M,new_line
	     ,"y=", y
	     ).prints
	  fi;
          let j_values=sigma_lusztig({G,}st_G,orbit,M,H_M,y+v/(G.coxeter_number+1))
	  in (orbit,M,H_M,y,v/(G.coxeter_number+1),j_values)
       od
    od.##
  od

set lusztig_cells ({RootDatum G,}SpringerTable st_G) =
      [[ ComplexNilpotent,RootDatum,vec,ratvec,[int] ]]:
   lusztig_cells({G,}st_G,st_G.root_datum.orbits)

set lusztig_cells (RealForm G) =
      [[ ComplexNilpotent,RootDatum,vec,ratvec,[int] ]]:
   let st=G.Springer_table in
   lusztig_cells({G,}st,G.orbits)

{show lusztig cells, running over given list of nilpotents}
set show_lusztig_cells\
   ({RootDatum G,}SpringerTable st_G,[ComplexNilpotent] orbits) = void:
   let G=st_G.root_datum in 
   prints("G=", G.nice_format, new_line, "#orbits: ", #orbits);
let table = [ [string] ]:
    for data@i in lusztig_cells({G,}st_G,orbits) {[[(M,H_M,y,values)]]}
    do for (orbit,M,H_M,y,values) in data
       do if =#values
	  then { even if there are no |values|, build one [string] }
	     [[orbit.diagram.to_string
	     ,orbit.dim_nilpotent.to_string
	     ,i.to_string
	     ,integrality_datum(orbit).nice_format
	     ,M.nice_format
	     ,H_M.compact_string
	     ,y.compact_string
	     ,centralizer(G,y).nice_format
	     ,"[]"
	     ,"x"
	     ,"x"
	     ,"x"
	     ,"x"
	     ,"x"
	     ]]
  	  else
	     for k in values
	     do
	     [orbit.diagram.to_string
	     ,orbit.dim_nilpotent.to_string
	     ,i.to_string
	     ,integrality_datum(orbit).nice_format
	     ,M.nice_format
	     ,H_M.compact_string
	     ,y.compact_string
	     ,centralizer(G,y).nice_format
	     , "" +
	       if #values=1 then k.to_string
	       else values.to_string + ":" + k.to_string
	       fi
	     , if =y then st_G.ct.special(st_G.springer(orbit)).to_string else "" fi
	     ,dimension(st_G.ct,k).to_string
	     ,st_G.ct.degree(k).to_string
	     ,st_G.ct.character(k).to_string
	     ]
	    od {for k in values}
	  fi
	od.##  {/for i:#data}
     od.## {for all_data}
in {table=[[string]]}
   (["O"
    ,"dim"
    ,"i"
    ,"rd_int"
    ,"M"
    ,"H_M"
    ,"v"
    ,"L"
    ,"sigma"
    ,"special"
    ,"dim"
    ,"deg"
    ,"char=ct.character(sigma[0])"
    ]
   # table
   ).tabulate

{show lusztig cells, running over given list of nilpotents}
set show_lusztig_cells_plus\
   ({RootDatum G,}SpringerTable st_G,[ComplexNilpotent] orbits) = void:
   let G=st_G.root_datum in 
   prints("G=", G.nice_format, new_line, "#orbits: ", #orbits);
let table_header =
    ["O","dim","i","rd_int","M","H_M","y","v","Cent(y+v)" { indep. of sigma }
    ,"sigma","special","dim","deg","char=ct.character(sigma[0])"
    ]
, table = [ [string] ]: { concatenation of all [string] values from |data| }
   for data@i in lusztig_cells_plus({G,}st_G,orbits) {[[(M,H_M,y,values)]]}
   do for (orbit,M,H_M,y,v,values) in data
      do if =#values
         then { even if there are no |values|, build one [string] }
	    [[orbit.diagram.to_string + st_G.special_star(orbit)
	    ,orbit.dim_nilpotent.to_string
	    ,i.to_string
	    ,integrality_datum(orbit).nice_format
	    ,M.nice_format
	    ,H_M.compact_string
	    ,y.compact_string
	    ,v.compact_string
	    ,centralizer(G,y).nice_format
	    ,"[]"
	    ,"x"
	    ,"x"
	    ,"x"
	    ,"x"
	    ,"x"
	    ]]
	 else
	    for k in values do
	    [orbit.diagram.to_string + st_G.special_star(orbit)
	    ,orbit.dim_nilpotent.to_string
	    ,i.to_string
	    ,integrality_datum(orbit).nice_format
	    ,M.nice_format
	    ,H_M.compact_string
	    ,y.compact_string
	    ,v.compact_string
	    ,centralizer(G,y+v).nice_format
	    ,if #values=1 then k.to_string
	     else values.to_string + ":" + k.to_string
	     fi
	     , if =y then st_G.ct.special(st_G.springer(orbit)).to_string else "" fi
	    ,dimension(st_G.ct,k).to_string
	    ,st_G.ct.degree(k).to_string
	    ,st_G.ct.character(k).to_string
	    ]
	    od {for k in values}
	 fi
      od.## { for (...) in data }
   od.##{for data in Lusztig_cells }
in tabulate(table_header#table)

{some shorthands which are handy but sometimes inefficient}
set lusztig_cell (RootDatum G,ComplexNilpotent O) = [[int]]:
    lusztig_cell({G,}G.Springer_table,O)

set show_lusztig_cells ({RootDatum G,}SpringerTable st_G) = void:
   show_lusztig_cells({G,}st_G,st_G.root_datum.orbits)

set show_lusztig_cells_plus (RootDatum G,SpringerTable st_G) = void:
   show_lusztig_cells_plus({G,}st_G,G.orbits)

set show_lusztig_cells(RootDatum G) = void:
   let st=Springer_table(G) in show_lusztig_cells({G,}st)

set show_lusztig_cells_plus (RootDatum G) = void:
   let st=Springer_table(G) in show_lusztig_cells_plus(G,st)

set A_bar(SpringerTable st,ComplexNilpotent O)=([int],[[RootDatum]]):
let data=lusztig_cell_long(st,O) then
sigmas=(##for (,,,j_values) in data do if =#j_values then [] else [j_values[0]] fi od).sort_u in
(sigmas,
 for i:#sigmas do
  ##for (M,,,j_values) in data do
    if #j_values>0 and sigmas[i]=j_values[0] then [M] else [] fi
 od
od)

set A_bar(SpringerTable st)=(ComplexNilpotent ->([int],[[RootDatum]])):(ComplexNilpotent O):A_bar(st,O)


set show_A_bar([int] sigmas,[[RootDatum]] pseudolevis)=void:
for i:#sigmas do
 let str="" in
  for M in pseudolevis[i] do str+:=" " + nice_format(M) od
 ;prints(sigmas[i],str)
od

set show_A_bar(SpringerTable st,ComplexNilpotent orbit)=void:
let (sigmas,pseudolevis)=A_bar(st,orbit) in
prints("orbit: ", orbit.diagram);
for i:#sigmas do prints(sigmas[i], " ", #pseudolevis[i]) od;
prints(sigmas.to_string +
##for i:#sigmas do
 let str="" in
  for M in pseudolevis[i] do str+:=" " + nice_format(M) od
 ;"  " +sigmas[i].to_string + str
od)


{four inner products stuff moved to inner_products.at}
{---------------------------------------------------------------------------}
{stuff that used to be in lusztig_cells_complete.at}
{these generic versions are no longer needed:


{show lusztig cells, running over given list of nilpotents}
set show_lusztig_cells_generic\
   (RootDatum G,SpringerTable st_G,[ComplexNilpotent] orbits) = void:
  (new_line
  ,"Lusztig cells",new_line
  ,"G=", G.nice_format, new_line
  , "#orbits: ", #orbits
  ).prints;
let table = [ [string] ]: { concatenation of all [string] values from |data| }
    for data@i in lusztig_cells(G,st_G,orbits) {[[(M,H_M,y,values)]]}
    do for (orbit,M,H_M,y,values) in data
       do
          if =#values
	  then { even if there are no |values|, build one [string] }
	     [[orbit.diagram.to_string + st_G.special_star(orbit)
	     ,orbit.dim_nilpotent.to_string
	     ,i.to_string
	     ,integrality_datum(orbit).nice_format
	     ,M.nice_format
	     ,H_M.compact_string
	     ,y.compact_string
	     ,centralizer(G,y).nice_format
	     ,"[]"
	     ,"x"
	     ,"x"
	     ,"x"
	     ,"x"
	     ,"x"
	     ]]
	  else { contribute one or more [string] values }
	     for k in values
	     do
	     [orbit.diagram.to_string + st_G.special_star(orbit)
	     ,orbit.dim_nilpotent.to_string
	     ,i.to_string
	     ,integrality_datum(orbit).nice_format
	     ,M.nice_format
	     ,H_M.compact_string
	     ,y.compact_string
	     ,centralizer(G,y).nice_format
	     ,if #values=1 then k.to_string { mention unique |k| }
	      else values.to_string + ":" + k.to_string { mention |k| from list }
	      fi
	     ,if =y then st_G.ct.special(st_G.springer(orbit)).to_string else "" fi
	     ,dimension(st_G.ct,k).to_string
	     ,st_G.ct.degree(k).to_string
	     ,st_G.ct.generic_degree(k).to_string
	     ,st_G.ct.character(k).to_string
	     ]
	     od {for k in values}
	  fi
       od.## { for (...) in data }
    od.## {for data in Lusztig_cells }
in
( ["O"
  ,"dim"
  ,"i"
  ,"rd_int"
  ,"M"
  ,"H_M"
  ,"v"
  ,"L"
  ,"sigma"
  ,"special"
  ,"dim"
  ,"deg"
  ,"gdeg"
  ,"char=ct.character(sigma[0])"
  ]
# table
).tabulate

set show_lusztig_cells_generic_long\
   (RootDatum G,SpringerTable st_G,[ComplexNilpotent] orbits) = void:
   show_very_long(st_G.ct);
   show_long(st_G);
   show_lusztig_cells_generic(G,st_G,orbits)

set show_lusztig_cells_generic (RootDatum G,SpringerTable st_G) = void:
   show_lusztig_cells_generic(G,st_G,G.orbits)

set show_lusztig_cells_generic_long (RootDatum G,SpringerTable st_G) = void:
   show_lusztig_cells_generic_long(G,st_G,G.orbits)

set show_lusztig_cells_generic (RootDatum G) = void:
let st=Springer_table_generic_degrees(G)
in show_lusztig_cells_generic(G,G.Springer_table)

set show_lusztig_cells_generic_long (RootDatum G) = void:
let st=Springer_table_generic_degrees(G)
in show_lusztig_cells_generic_long(G,st)
}
