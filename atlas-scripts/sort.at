<basic.at

{ sorting integers }
set merge ([int] a, [int] b) = [int]: { merge weakly increasing lists }
  let na=#a in
  if =na then b
  else let i=0, j=0, nb=#b in
    for :na+nb { predictable result size; ensures lists won't both run empty }
    do if i<na and (j=nb or a[i]<=b[j])
       then a[i] next i+:=1
       else b[j] next j+:=1
       fi
    od
  fi

set sort = ([int]->[int]): { merge sort }
  let rec_fun ms ([int] v, int l) = [int]: { invariant includes l=#v }
    if l<3 then if l=2 and v[0]>v[1] then v~[:] { swap } else v fi
    else let half=l\2 in merge( ms(v[:half],half), ms(v[half:],l-half) )
    fi
  in { sort = } ([int] v) [int]: ms(v,#v)

set reverse_sort ([int] v) = [int]: sort(v)~[:]

{ sort for a general type: in order to remain type agnostic here, we have the
  caller pass just the array size and comparison function. For |a| of type
  [string] (so <=@(string,string) is lexicographic comparison), sort it using:
  |a:=for i in sort(#a,(int i,int j)bool: a[i]<=a[j]) do a[i] od|
}
set sort (int n, (int,int->bool)leq) = [int]:
   let merge ([int] a, int na, [int] b, int nb) = [int]:
     let i=0, j=0 in
     for :na+nb
     do if i<na and (j=nb or leq(a[i],b[j]))
        then a[i] next i+:=1
        else b[j] next j+:=1
        fi
     od
   in (0,n). { describes range of consecutive numbers to sort via |leq| }
   (rec_fun ms(int b,int size) [int]:
      case size-1
      in [b], let e=b+1 in if leq(b,e) then [b,e] else [e,b] fi
      else let half=size\2 then chalf=size-half in
         merge( ms(b,half),half, ms(b+half,chalf),chalf )
      esac
   )

{ sort unique of row of integers }
set merge_u ([int] a, [int] b) = [int]: { merge unique weakly increasing lists }
  let na=#a in
  if =na then b
  else let i=0, j=0, nb=#b
  in while { run until i=na and j=nb }
        if i=na then j<nb do b[j] next j+:=1
	elif j=nb then do a[i] next i+:=1
        else do
	  case a[i]-b[j] { three way test }
	  then { a[i]<b[j]: } a[i] next i+:=1
	  in   { a[i]=b[j]: } a[i] next i+:=1; j+:=1 { take one, skip both }
	  else { a[i]>b[j]: } b[j] next j+:=1
	  esac
	fi
     od
  fi

set sort_u = ([int]->[int]): { sort, keeping unique copy of duplicates }
  let rec_fun ms ([int] v, int l) = [int]: { invariant includes l=#v }
    if l<2 then v { for l=2 let |merge_u| do the three way choice }
    else let half=l\2 in merge_u( ms(v[:half],half), ms(v[half:],l-half) )
    fi
  in { sort_u = } ([int] v) [int]: ms(v,#v)

{ the following helps stable-sorting of anything according to a statistic }

{ Inverse (since used for permuting) of the permutation that stable-sorts a list
  $v$ of (integer) values into increasing order: at $i$, it has the index of the
  value ranked $i$ in $v$, where equal values are ranked from left to right.
  That permutation itself is just the standardisation (stable ranking) of $v$.
}
set inv_standardisation = ([int]->[int]):
  let merge([int,int] a, [int,int] b) = { merge based on first component }
      let na=#a in
      if na=0 then b
      else let i=0, j=0, nb=#b { original length of b }
      in b #:= a~[0] { sentinel; when this becomes b[j], then $a$ is emptied }
      ; while i<na or j<nb { run until i=na and j=nb=#b-1 }
	do
	  if i=na then b[j] next j+:=1
	  else { compare only first components, as second one always increase }
	    let (x,):ai=a[i], (y,):bj=b[j] { x,y are sort keys, ai,bj elements }
	    in if x<=y then ai next i+:=1 else bj next j+:=1 fi
	  fi
	od
      fi
  then
    rec_fun ms ([int,int] v, int l) = [int,int]:
      if l>=3 then let h=l\2 in merge(ms(v[:h],h),ms(v[h:],l-h))
      elif l=2 and (let (x,)=v[0], (y,)=v[1] in x>y) then v~[:] { swap }
      else v { either l=1 or v sorted }
      fi
  in ([int] v) [int]: { actual body of inv_standardisation }
    for (,org_i) in ms(for a@i in v do (a,i) od,#v) { attach index to entries }
    do org_i od { afterward just recover the permuted original indices }

{ the same for a list of rationals; the result is still a list of integers }
set inv_standardisation = ([rat]->[int]):
  let merge([rat,int] a, [rat,int] b) = { merge based on first component }
      let i=0, j=0, na=#a { |na>=1| }, nb=#b { original length |nb>=2| }
      in b #:= a~[0] { sentinel; when this becomes b[j], then |a| is emptied }
      ; while i<na or j<nb { run until |i=na=#a-1| and |j=nb| }
	do
	  if i=na then b[j] next j+:=1
	  else { compare only first components, as second one always increase }
	    let (x,):ai=a[i], (y,):bj=b[j] { |x|, |y| are the sort keys }
            { when |j=nb| then |y| is sentinel, so |x<=y| for all |x| in |a| }
	    in if x<=y then ai next i+:=1 else bj next j+:=1 fi
	  fi
	od
  then
    rec_fun ms ([rat,int] v, int l) = [rat,int]:
      case l-1
      in v
      , let (x,)=v[0], (y,)=v[1] in if x>y then v~[:] else v fi
      else { |l>=3| } let h=l\2 in merge(ms(v[:h],h),ms(v[h:],l-h))
      esac
  in ([rat] v) [int]: { actual body of inv_standardisation }
    for (,org_i) in ms(for a@i in v do (a,i) od,#v) { attach index to entries }
    do org_i od { afterward just recover the permuted original indices }

{ inv_standardisation -> order of indices to select from original for sorting }
set sort_by ((KGBElt -> int) f)= ([KGBElt] v) [KGBElt]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od
set sort_by ((Param->int) f) = ([Param] v) [Param]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od
set sort_by( (WeylElt -> int) f)= ([WeylElt] v) [WeylElt]:
    for index in inv_standardisation(for x in v do f(x) od) do v[index] od

set sort_by (([int]->int) f) = ([[int]] v) [[int]]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od

{ also need sorting by rationals; take easily written but roundabout approach }
set sort ([rat] v) = [rat]: for index in inv_standardisation(v) do v[index] od

{ the following two are used in complex_nilpotent_orbits }
set sort_by ((vec,rat-> rat) f) = ([vec,rat] v) [vec,rat]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od
set sort_by ((ratvec,[vec]->int) f) = ([ratvec,[vec]] v) [ratvec,[vec]]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od



{for use in K_norm.at: sorting of KParams}
set sort_by ( ( (KGBElt,ratvec) -> int) f ) =
  ([KGBElt,ratvec] v) [KGBElt,ratvec]:
    for index in inv_standardisation(for x in v do f(x) od) do v[index] od

set sort_by (((Param,bool)->int) f) = ([(Param,bool)] v) [(Param,bool)]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od

set sort_by ( (Split,Param->int) f) = ([(Split,Param)] v) [(Split,Param)]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od

{ for use in K_norm.at, sorting of KParamPol }
set sort_by ( (Split,(KGBElt,ratvec)->int) f) =
  ([(Split,(KGBElt,ratvec))] v) [(Split,(KGBElt,ratvec))]:
    for index in inv_standardisation(for x in v do f(x) od) do v[index] od

{ one more, used in combinatorics.at }
set sort_by ( (int,bool->int) f) =
  ([int,bool] v) [int,bool]:
    for index in inv_standardisation(for x in v do f(x) od) do v[index] od

{ and so forth for any type; this really should be second-order typed }

{ Here are example calls of the model functions above. They can be defined
  here because reducibility_points and height are built-in functions (those
  defined in basic.at could also be used). If however you need to sort on a
  custom attribute defined elsewhere, DON'T do so here (and don't include
  modules to make that possible); rather call sort_by in the script where that
  custom attribut is defined. (You might need to extend the above list of
  models if a new value type is involved; that is OK and in fact recommended.)

  For instance LKT.at defines the attribute LKT_dimensions, and then defines
  sort_by_dimension in a call of sort_by, whose argument uses that attribute.
}

{ sort list of pairs [(Param,bool)] by #reducibility_points of Param }
set sort_by_reducibility_points = ([(Param,bool)]->[(Param,bool)]):
  sort_by((Param p,bool x) int: #reducibility_points(p) )

{ sort list [Param] by #reducibility_points of Param }
set sort_by_reducibility = ([Param]->[Param]):
  sort_by((Param p) int: #reducibility_points(p) )

{ Sort list of parameters by height }
set sort_by_height = ([Param] -> [Param]): sort_by( height@Param )

{ Same for a list of parameters with a Split attached (ignored for sorting) }
set sort_by_height = ([(Split,Param)] -> [(Split,Param)]):
 sort_by( (Split s,Param p) int: height(p) )

{ sorting fixed size vectors lexicographically }
set lex_lesseq (vec v,vec w) = bool: { assert(#v=#w); }
   for x@i in v do if x!=w[i] then return x<w[i] fi od; true

set merge ([vec] a, [vec] b) = [vec]: { merge weakly increasing lists }
  let na=#a in
  if na=0 then b
  else let i=0, j=0, nb=#b { original length of b }
  in b #:= a~[0] { sentinel; when this elt becomes b[j], then a is emptied }
  ; while { run until i=na and j=nb=#b-1 }
      if i=na then j<nb do b[j] next j+:=1
      else do
        if lex_lesseq(a[i],b[j]) then a[i] next i+:=1 else b[j] next j+:=1 fi
      fi
    od
  fi

set sort = ([vec]->[vec]): { merge sort }
  let rec_fun ms ([vec] v, int l) = [vec]: { invariant includes l=#v }
    if l<3 then if l<2 or lex_lesseq(v[0],v[1]) then v else v~[:] { swap } fi
    else let half=l\2 in merge( ms(v[:half],half), ms(v[half:],l-half) )
    fi
  in { sort = } ([vec] v) [vec]: ms(v,#v)

set reverse_sort ([vec] v) = [vec]: sort(v)~[:]

{ sort unique }
set merge_u ([vec] a, [vec] b) = [vec]: { merge unique weakly increasing lists }
  let na=#a in
  if na=0 then b
  else let i=0, j=0, nb=#b { original length of b }
  in b #:= a~[0] { sentinel; when this elt becomes b[j], then a is emptied }
  ; while { run until i=na and j=nb=#b-1 }
      if i=na then j<nb do b[j] next j+:=1
      else do
        if lex_lesseq(a[i],b[j])
        then a[i] next if a[i]=b[j] then j+:=1 fi; i+:=1
        else b[j] next j+:=1
        fi
      fi
    od
  fi

set sort_u = ([vec]->[vec]): { sort, keeping unique copy of duplicates }
  let rec_fun ms ([vec] v, int l) = [vec]: { invariant includes l=#v }
    if l<2 then v { for l=2 let |merge_u| do the three way choice }
    else let half=l\2 in merge_u( ms(v[:half],half), ms(v[half:],l-half) )
    fi
  in { sort_u = } ([vec] v) [vec]: ms(v,#v)

{ sorting rational ratvectors lexicographically }
set lex_lesseq (ratvec v,ratvec w) = bool: { assert(#v=#w); }
   for x@i in v do if x!=w[i] then return x<w[i] fi od; true

set merge ([ratvec] a, [ratvec] b) = [ratvec]: { merge weakly increasing lists }
  let na=#a in
  if na=0 then b
  else let i=0, j=0, nb=#b { original length of b }
  in b #:= a~[0] { sentinel; when this elt becomes b[j], then a is emptied }
  ; while { run until i=na and j=nb=#b-1 }
      if i=na then j<nb do b[j] next j+:=1
      else do
        if lex_lesseq(a[i],b[j]) then a[i] next i+:=1 else b[j] next j+:=1 fi
      fi
    od
  fi

set sort = ([ratvec]->[ratvec]): { merge sort }
  let rec_fun ms ([ratvec] v, int l) = [ratvec]: { invariant includes l=#v }
    if l<3 then if l<2 or lex_lesseq(v[0],v[1]) then v else v~[:] { swap } fi
    else let half=l\2 in merge( ms(v[:half],half), ms(v[half:],l-half) )
    fi
  in { sort = } ([ratvec] v) [ratvec]: ms(v,#v)

set reverse_sort ([ratvec] v) = [ratvec]: sort(v)~[:]

{ sort unique }
set merge_u ([ratvec] a, [ratvec] b) = [ratvec]: { merge }
  let na=#a in
  if na=0 then b
  else let i=0, j=0, nb=#b { original length of b }
  in b #:= a~[0] { sentinel; when this elt becomes b[j], then a is emptied }
  ; while { run until i=na and j=nb=#b-1 }
      if i=na then j<nb do b[j] next j+:=1
      else do
        if lex_lesseq(a[i],b[j])
        then a[i] next if a[i]=b[j] then j+:=1 fi; i+:=1
        else b[j] next j+:=1
        fi
      fi
    od
  fi

set sort_u = ([ratvec]->[ratvec]):  { sort, keeping unique copy of duplicates }
  let rec_fun ms ([ratvec] v, int l) = [ratvec]: { invariant includes l=#v }
    if l<2 then v { for l=2 let |merge_u| do the three way choice }
    else let half=l\2 in merge_u( ms(v[:half],half), ms(v[half:],l-half) )
    fi
  in { sort_u = } ([ratvec] v) [ratvec]: ms(v,#v)
