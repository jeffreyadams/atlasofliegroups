set projector (CharacterTable ct, W_rep (dim,ops), [int] char_values) = mat:
  let rd=ct.root_datum_parent, Q=null(dim,dim) in
  for (w,action) in W_parabolic_act(rd,all_simples(rd),dim,ops)
{  do Q+:=character_value(tab,w,char_values)*action}
  do Q+:=char_values[ct.class_index(w)]*action
  od; Q

{ restrict representation pi to isotypic subspace (image space of projector) }
set restrict_representation_isotypic (
    CharacterTable ct, W_rep pi, vec char_values) = W_rep:
  let (basis,factors)=projector(ct,pi,char_values).adapted_basis
  { operators have integral matrices w.r.t. |basis|, so restriction is OK }
  then P=basis[:#factors] { saturated lattice basis of image of the projector }
  in (#P ,for T in pi.operators do restrict_action(T,P) od)

{ projector for a cell representation }
set projector (CharacterTable ct, WCell cell, vec char_values) = mat:
  projector(ct,cell_representation(ct,cell),char_values)

{ given a cell, compute the cell represetation pi, find the smallest k so that
  <pi,sym^k(reflection)>!=0, then this inner product is 1, and the unique
  irreducible in common is special; use the character of sym^k(reflection)
  to compute the projection operator onto the special
}
set special_projector (CharacterTable ct, WCell cell) = mat:
  let cell_rep = cell_representation(ct,cell)
  then char = ct.sym_powers_reflection[smallest_degree(ct,character(ct,cell_rep))]
  in projector(ct,cell_rep,char)

{ given a cell, compute the special_projector, and use this to construct
  the special representation itself
}
set special_representation_of_cell (CharacterTable ct, WCell cell) = W_rep:
  let cell_rep = cell_representation(ct,cell)
  then char = ct.sym_powers_reflection[smallest_degree(ct,character(ct,cell_rep))]
  in restrict_representation_isotypic(ct,cell_rep,char)

{special_projectors for a list of cells}
set special_projectors(CharacterTable ct, [WCell] cells) = [mat]:
  for cell in cells do special_projector(ct,cell) od

