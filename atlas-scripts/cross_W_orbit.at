<basic.at
<Weylgroup.at

{ orbit of |x| by cross actions from |gens|, with example transportin w }
set cross_sub_orbit ([WeylElt] gens, KGBElt x) = ([KGBElt],[WeylElt]):
  let rd = x.root_datum then orbit= [x], ws = [id_W(rd)], done=0
  then absent (KGBElt y) = bool: none(#orbit,(int i)bool:orbit[i]=y)
  in
  while done<#orbit
  do
    let a=orbit[done], w = ws[done] in done+:=1 { pop |(w,a)| from queue }
  ; for s in gens
    do let b=cross(s,a) in
      if absent(b) then ws #:= s*w ;  orbit #:= b fi
    od
  od; (orbit,ws)

set cross_orbit (KGBElt x) = ([KGBElt],[WeylElt]):
  cross_sub_orbit(x.root_datum.W_gens,x)

{ solve for w in W in y=cross(w,x); at least one solution should exist }
set cross_divide (KGBElt y,KGBElt x) = WeylElt:
  let (orbit,ws)=cross_orbit(x) then i=first(#orbit,(int i)bool:orbit[i]=y) in
  if i<0 then error("Did not find ",y," in orbit of ",x) fi; ws[i]
