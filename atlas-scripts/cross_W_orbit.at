<basic.at
<sort.at { for |sort_u@(int,int->bool)| and |merge@(int,int->bool)| }
<Weylgroup.at

{ orbit of |x| by cross actions from |gens|, with example transportin w }
set cross_sub_orbit ([WeylElt] gens, KGBElt x) = [KGBElt,WeylElt]:
(  let G = x.real_form
   then index = for :KGB_size(G) do minus_1 od
   , orbit = [(x,id_W(x.root_datum))]
   , i=0
in index[#x]:=0 { mark |x| as seen, and present in |orbit[0]| }
;  while
      let k=#orbit { variable future position of first new element to be found }
      then news = [KGBElt,WeylElt]:
         while i<#orbit
         do let (y,witness) = orbit[i] next i+:=1
         in for s in gens
	    do let z=cross(s,y)
	    in if index[#z].< then index[#z]:=k; k+:=1; [(z,s*witness)]
	       else [] { already seen, ignore }
	       fi
	    od.##
	 od.##
   in {while} >#news
   do orbit ##:= news
   od
; for k@i in index do if k.>= then [orbit[k]] else [] fi od.##
)

set cross_orbit (KGBElt x) = [KGBElt,WeylElt]:
  cross_sub_orbit(x.root_datum.W_gens,x)

{ whether |y| is in cross orbit of |x|, and if so a witness }
set is_in_cross_orbit (KGBElt x) = (KGBElt->bool,WeylElt):
   let orbit=cross_orbit(x) in
   (KGBElt y) (bool,WeylElt):
   let n_y=#y
   then k =
     binary_search_first((int i)bool: let (z,)=orbit[i] in n_y<=#z, 0,#orbit)
   then found = k<#orbit and (let(z,)=orbit[k] in z=y)
in (found, let (,witness)=orbit[if found then k else 0 fi] in witness)

{ solve for w in W in y=cross(w,x); at least one solution should exist }
set cross_divide (KGBElt y,KGBElt x) {note argument order} = WeylElt:
   let (found,witness) = is_in_cross_orbit(x)(y)
in if found then witness
   else error("Did not find ",y," in cross orbit of ",x)
   fi
