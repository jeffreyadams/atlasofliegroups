<basic.at
<hodge_K_type_formula.at { for |Phi_S| }
<tensor_product.at

{see hodgeTempered.pdf in Dropbox}

{compute hodge function f\otimes F
 f is an arbitrary Hodge function
 F is a finite dimensional representation of K,
  given as a function from KGB to [ratvec] (should be [vec]?)
   see tensor_product.at
 formula is:
 (f\otimes F)(mu)=
}

{NOTE: most of these functions have local versions inside
the definition of hodge_K_type_formula in hodge_K_type_formula.at
}

{branching to K as a function:}
set branch_function_std (Param p) = multiplicity_function:
  (KType mu): split_as_int(branch_std(p,K_norm(mu))[mu])

{hodge function on a standard module, this calls
hodge_branch_std, which calls hodge_K_type_formula...}
set hodge_function_std (Param p) = hodge_function:
  ( (KType mu)vec: coefficient(hodge_branch_std(p,K_norm(mu)),mu)
  , p.real_form
  )

{shift a parameter by adding v to lambda, result may not be standard}
set shift (vec v,hodge_function h) = hodge_function:
  ( (KType mu)vec: let (x,lr)=%mu in h.f(K_type(x,lr+v)) , h.real_form )

set * (i_poly P, hodge_function f) = hodge_function:
  ((KType mu)vec: convolve(P,f.f(mu)) , f.real_form)

{f=hodge_function, weights (weight function of a K-type), mu
 (f\otimes weights)(mu)=\sum_tau mult(tau,mu\otimes(weights)^*)*f(tau)
 this is a finite sum over the K-types tau appearing in mu\otimes(weights)^*
}
set dual((KGBElt ->[ratvec]) weights)=(KGBElt->[ratvec]):(KGBElt x):for v in weights(x) do -v od

{general hodge tensor product}
set hodge_tensor \
  (hodge_function f, (KGBElt -> [vec]) weights,KType mu) = i_poly:
let rv=poly_0 in for c@p in tensor_product(mu,dual(weights)) {KType_Pol}
do let mu=LKT(p) in  prints("mu=",mu, "f.f(mu)=",f.f(mu));  rv:=poly_plus(rv,split_as_int(c)*f.f(mu)) od;rv

{general hodge tensor product, as a hodge_function}
set hodge_tensor(hodge_function f, (KGBElt -> [vec]) weights)=hodge_function:
((KType mu):hodge_tensor(f,weights,mu),f.real_form)

{L\subset L_1\subset G (see hodgeTempered.pdf section 7 or so}
{hodge tensor product of hodge function on L with wedge^k(u\cap s_1)
u_1 is nilradical of q_1=l_1+u_1, is contained in nilradical u of q=l+u
}
set hodge_tensor_wedge_k_u_cap_s(hodge_function f,Parabolic P_1,int k)=hodge_function:
let weights=sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P_1, k) in
minus_vee_to_the_k(k)*hodge_tensor(f,weights)

{same, as a hodge function}
set hodge_tensor_exterior_u_cap_s(hodge_function f,Parabolic P)=hodge_function:
let rv=nullHodgeFunction(P.real_form) in
 for k:#nilrad_roots(P)
 do rv+:=hodge_tensor_wedge_k_u_cap_s(f,P,k) od;rv

{hodge tensor of hodge_function_std(p) with arbitrary weight function}
set hodge_tensor_std(Param p, (KGBElt -> [vec]) weights,KType mu)=i_poly:
hodge_tensor(hodge_function_std(p),weights,mu)

{hodge tensor of hodge_function_std(p) with arbitrary weight function,
as a hodge_function}
set hodge_tensor_std(Param p, (KGBElt -> [vec]) weights)=hodge_function:
((KType mu):hodge_tensor_std(p,weights,mu),p.real_form)

{hodge tensor of hodge_function_std(ParamPol P) with arbitrary weight function}
set hodge_tensor_std(ParamPol P, (KGBElt -> [vec]) weights,KType mu)=i_poly:
let rv=poly_0 in for c@p in P do
rv:=poly_plus(rv,split_as_int(c)*hodge_tensor_std(p,weights,mu)) od;rv

{hodge tensor of hodge_function_std(ParamPol P) with arbitrary weight function,
as a hodge_function}
set hodge_tensor_std(ParamPol P, (KGBElt -> [vec]) weights)=hodge_function:
((KType mu):hodge_tensor_std(P,weights,mu),P.real_form)

{hodge tensor hodge_function_std(p) with wedge^k(u_1\cap s)}
set hodge_tensor_wedge_k_u_cap_s_std(Param p,Parabolic P_1,int k)=hodge_function:
{get out of the induction!}
if k=0 then branch_function_std_as_hodge_function(p)
else
let weights=sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P_1, k) in
minus_vee_to_the_k(k)*hodge_tensor_std(p,weights)
fi

{hodge tensor hodge_function_std(p) with wedge^k(u_1\cap s), as a hodge function}
set hodge_tensor_exterior_u_cap_s_std(Param p,Parabolic P)=hodge_function:
let rv=nullHodgeFunction(p.real_form) in
 for k:#nilrad_roots(P)+1
 do rv+:=hodge_tensor_wedge_k_u_cap_s_std(p,P,k) od;rv

{assume S is sorted by height}
{map from HodgeKTypePols to hodgeParamPols, given a set S of K-types}
set Phi_S_inverse (HodgeKTypePol KP, [KType] S) = hodgeParamPol:
   let rec_fun solve_one(HodgeKTypePol KP,[KType] S,hodgeParamPol rv) =
         hodgeParamPol:
      let n=first(for mu in S do !=coefficient(KP,mu) od)
      in if n.< then rv
         else let c=i_poly: coefficient(KP,S[n]), p=parameter(S[n]) in
	    solve_one(KP-Phi_S(c*p,S),S,rv+c*p)
	 fi
   in solve_one(KP,S,nullHodgeParamPol(KP.real_form))

{map from hodge functions to hodgeParamPols, given a set S of K-types}
set Omega_S_inverse(hodge_function f,[KType] S) = hodgeParamPol:
   Phi_S_inverse(Psi_S(f,S),S)

set hodge_tensor_std(Param p, (KGBElt -> [vec]) weights)=hodge_function:
((KType mu):hodge_tensor_std(p,weights,mu),p.real_form)

set hodge_tensor_wedge_k_u_cap_s_std(Param p,Parabolic P_1,int k)=hodge_function:
let weights=sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P_1, k) in
minus_vee_to_the_k(k)*hodge_tensor_std(p,weights)

set hodge_tensor_exterior_u_cap_s_std(Param p,Parabolic P)=hodge_function:
let rv_hf=nullHodgeFunction(p.real_form) in
for k:#nilrad_roots(P)+1
do
let add=hodge_tensor_wedge_k_u_cap_s_std(p,P,k) in prints("k:",k,"add:",add);rv_hf+:=add od;rv_hf
