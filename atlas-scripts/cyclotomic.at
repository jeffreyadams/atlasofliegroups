<basic.at
<number_theory.at { factorization, totient function |phi@int| and such }
<sort.at { we need to sort divisors }
<Gaussian_elim.at { rational matrix operations, linear system solving }
<polynomial.at { for all polynomial operations }

{ This file implements arithmetic in cyclotomic fields

  While much of the computation (notably cyclotomic polynomials themselves) is
  integer-based, the field elements will be represented as lists of rationals.

  We avoid using |polynomial.at| as it implements its |poly| type as |vec|,
  which has inherent overflow problems; coefficients of elements of a cyclotomic
  field can get large rapidly when inverses are taken.
}

set_type
[ CyclotomicField = (int order, [int] Phi)
{ represent cyclotomic field by order and minpoly of generating root of 1 }
, CyclotomicFieldElement = ([rat] v,CyclotomicField F)
{ using [rat] (not ratvec) for elements in a cyclotomic field avoids overflow }
]

{ to_denominator(r,N): integer $a$ such that rational $r$ is congruent to
  $a/N$ modulo 1; it is a precondition that |denom(r)| divides |N|.
  The application is that $\exp(2\pi i r)=\zeta^a$ where $\zeta=\exp(2\pi i/N)$
}
set to_denominator (rat r, int N) = int:
   let (numer,denom)=%(r%1) { reduce modulo 1, then split }
   then (q,r)=N\%denom
   in assert(=r,"root of unity is not in the specified cyclotomic field");
   q*numer

{ cyclotomic Fields and their elements }

{.construct a cyclotomic field.}
set cyclotomic_field (int n) = CyclotomicField:
   (n,cyclotomic_polynomial(n).coefficients)
set CF = cyclotomic_field@int  {abbreviation}

set degree (CyclotomicField F) = int: #F.Phi-1

set = (CyclotomicField E,CyclotomicField F) = bool: F.order=E.order

{ a utility function like |%@(rat_poly,rat_poly)|, but fixing dividend first,
  reducing |rat_poly| mod |int_poly|, and returning a remainder of fixed length
}
set reduce_mod ([int] Phi) = ([rat]->[rat]):
   assert(Phi~[0]=1,"Non monic cyclotomic polynomial?"); let n=#Phi-1 in
   ([rat] v) [rat]:
   (  if #v<n then v ##:= for :n-#v do rat:0 od fi { ensure enough length }
   ;  for i: #v-n do let c=v~[i] in for j:n from 1 do v~[i+j]-:=c*Phi~[j] od od
   ;  v[:n] { just return remainder, drop |v[n:]| which contains quotient }
   )

{ make constructor function for cyclotomic field elements, ensures reduction }
set element (CyclotomicField F) = ([rat]->CyclotomicFieldElement):
   ([rat] v) CyclotomicFieldElement: (reduce_mod(F.Phi)(v),F)

{ same constructor, but used with field as second argument }
set cyclotomic_field_element ([rat] v, CyclotomicField F) =
       CyclotomicFieldElement: F.element(v)

{.embed Q in cyclotomic field as (images of) constant polynomials.}
set embed (rat r,CyclotomicField F) = CyclotomicFieldElement: F.element([r])

set one (CyclotomicField F) = CyclotomicFieldElement:  embed(1,F)
set zero (CyclotomicField F) = CyclotomicFieldElement: embed(0,F)

set = (CyclotomicFieldElement(v,F),CyclotomicFieldElement(w,G)) = bool:
   assert(F=G,"cyclotomic fieds differ in comparison");
   assert(#v=#w and #F.Phi=#v+1,"unnormalized cyclotimic field element(s)");
   all(for c@i in v do c=w[i] od) { compare without converting to |ratvec| }
set != (CyclotomicFieldElement x,CyclotomicFieldElement y) = bool: not x=y
set = (CyclotomicFieldElement(v,F)) = bool:(v,F)=F.zero

set != (CyclotomicFieldElement x) = bool: not x=x.F.zero

set primitive_root (CyclotomicField F) = cyclotomic_field_element([0,1],F)

{operations on elements of cyclotomic fields}

{ additive operators do not need to call |reduce_by| }
set + (CyclotomicFieldElement (v,F),CyclotomicFieldElement (w,G)) =
      CyclotomicFieldElement:
   assert(F=G,"cyclotomic fields do not agree"); (for c@i in v do c+w[i] od,F)
set - (CyclotomicFieldElement (v,F),CyclotomicFieldElement (w,G)) =
      CyclotomicFieldElement:
   assert(F=G,"cyclotomic fields do not agree"); (for c@i in v do c-w[i] od,F)

{ negation and scalar multiplication need no reduction either }
set - (CyclotomicFieldElement (v,F)) = CyclotomicFieldElement:
   (for c in v do -c od,F)
set * (rat r, CyclotomicFieldElement (v,F)) = CyclotomicFieldElement:
   (for c in v do r*c od,F)

{.cyclotomic field multiplication.}
set * (CyclotomicFieldElement (v,F),CyclotomicFieldElement (w,G)) =
      CyclotomicFieldElement:
   assert(F=G,"cyclotomic fields do not agree"); F.element(convolve(v,w))

set is_rational (CyclotomicFieldElement(v,)) = bool: =v[1:]
set to_rational (CyclotomicFieldElement z) = rat:
   assert(z.is_rational,"element is not rational"); z.v[0]

set is_integer(CyclotomicFieldElement z) = bool:
   z.is_rational and z.to_rational.is_integer
set to_integer(CyclotomicFieldElement z) = int: z.to_rational.rat_as_int

{ embed $\Q$ as roots of unity in F via $t\mapsto\exp(2\pi i t)$ }
set exp_1 (rat r,CyclotomicField F) = CyclotomicFieldElement:
   let k=to_denominator(r,F.order) in F.element(for :k do rat:0 od # /1)

set zeta_power (int k, CyclotomicField F) = CyclotomicFieldElement:
   { first reduce $X^k$ odulo $X^n-1$, then modulo $\Phi(n)$ }
   F.element(for :k%F.order do rat:0 od # (rat:1) )
   { equivalent to |F.element([rat]:id_mat(F.order)[k%F.order]| if you prefer }

{ the Galois group over $\Q$ of |F| is the multiplicative group mod |F.order|
  the function |Galois_matrix| gives the matrix on the standard basis (the
  initial powers of |zeta|) of the action of the Galois group element for |k|
}
set Galois_matrix (int k,CyclotomicField F) = [[rat]]: { |gcd(k,F.order)=1| }
   for i:degree(F) do zeta_power(k*i,F).v od

set Galois_matrices(CyclotomicField F) = [[[rat]]]:
   for i in invertibles_modulo(F.order) do Galois_matrix(i,F) od

set Galois_action (int k, CyclotomicFieldElement(v,F)) = CyclotomicFieldElement:
{ action on field element: use matrix multiplication |times@([[rat]],[rat]| }
   (times(Galois_matrix(k,F),v),F)

set matrix_of_multiplication (CyclotomicFieldElement (,F):z) = [[rat]]:
   for i:degree(F) do v(z*zeta_power(i,F)) od

set norm (CyclotomicFieldElement z) = rat: det(matrix_of_multiplication(z))

{ three ways of computing inverse of element of cyclotomic field: using
  conjugates and norm in the cyclotomic field (may involve huge coefficients),
  inverting by applying the inverse of the multiplication matrix, and (last
  and best) inverting by solving the "multiplication gives 1" linear system
}

{.inverse of z=products of nontrivial Galois conjugates/norm.}
set inverse_by_norm (CyclotomicFieldElement(v,F):z) = CyclotomicFieldElement:
   let w=F.one in
   for A in Galois_matrices(F)[1:] do w*:=F.element(times(A,v)) od; (/norm(z))*w

{ better solutions based on linear system solving from Gaussian-elim.at }

{.inverse of z = inverse of (matrix of multipliciation by z) applied to F.one.}
set inverse_by_matrix (CyclotomicFieldElement(,F):z) = CyclotomicFieldElement:
   (times(inverse(matrix_of_multiplication(z)),F.one.v),F)

set inverse_by_solve (CyclotomicFieldElement(,F):z) = CyclotomicFieldElement:
   (a_solution(matrix_of_multiplication(z),F.one.v),F)

{ the last one is the most straightforward and seems best to use: }

{.inverse of element in cyclotomic field.}
set inverse = inverse_by_solve@CyclotomicFieldElement

set / = inverse@CyclotomicFieldElement { unary division is inverse }

set / (CyclotomicFieldElement(v,F), CyclotomicFieldElement z) =
      CyclotomicFieldElement:
   (a_solution(matrix_of_multiplication(z),v),F)

set ^ (CyclotomicFieldElement z,int k) = CyclotomicFieldElement:
   if k.< then set (k,z):=(-k,inverse(z)) { force non-negative exponent } fi;
   let bin_k = [bool]: while >k do let (q,r)=k\%2 in k:=q; !=r ~od in
   if =#bin_k then { |k=0| } z.F.one
   else assert(bin_k[0],"Zero leading bit?"); let p=z in
      for odd in bin_k[1:] do p*:=p { always square }; if odd then p*:=z fi od
   ;  p
   fi

{ order of element of F, returns 0 if element not of finite order }
set order(CyclotomicFieldElement x)= int:
   let one=x.F.one, div=divisors(x.F.order*2)
   then first=first(#div,(int i)bool: x^div[i]=one)
   in if first.< then 0 else div[first] fi

{if z\in CF(n) is an n^th root of unity, write z=zeta_n^k}
set power_of_primitive_root(CyclotomicFieldElement z)=int:
assert(z^(z.F.order)=z.F.one,"z is not an n^th root of 1");
first(z.F.order,(int i)bool:z.F.primitive_root^i=z)

{in CF(n): if r=a/b and b divides n then return zeta_n^a}
set root_of_unity(rat r,CyclotomicField F)=CyclotomicFieldElement:
assert(is_integer(F.order/r.denom),"not a root of unity in F");
F.primitive_root^(rat_as_int(r.numer*F.order/r.denom))

{.convert cyclotomic field element to a string for output.}
set to_string (CyclotomicFieldElement(v,F)) = string:
   to_rat_poly(v,"x").to_string +" in F("+ F.order+ ")"

{.display cyclotomic field element as polynomial in x.}
set show (CyclotomicFieldElement z) = void: prints(to_string(z))

set complex_conjugate(CyclotomicFieldElement(v,F)) = CyclotomicFieldElement:
  let result=F.zero in for c@j in v do result+:=c*zeta_power(-j,F) od; result

set bar = complex_conjugate@CyclotomicFieldElement
set is_real (CyclotomicFieldElement z) = bool: z=z.bar

set absolute_value_squared (CyclotomicFieldElement z) = CyclotomicFieldElement:
   z*z.bar

{. all cyclotomic factors of polynomial P, as list of positive integers .}
set cyclotomic_factors (int_poly P) = [int]:
  let n=1 in
##while let l=#P.coefficients in l>0
    and n<7*l { condition to force termination, without missing out much cases }
  do let (Q,R)=monic_divide(P,cyclotomic_polynomial(n)) in
     if =R then P:=Q; [n] else n+:=1; [] fi
  od

{ write a rational polynomial as a product of cyclotomic polynomials, assumed to
  be possible (if not we hang because it is hard to tell when to give up trying)
  return value [a_1,...] means Phi_{a_1}*Phi_{a_2}*..
}
set product_of_cyclotomic (rat_poly(X,f,)) = [int]:
   (to_int_poly(for c in f do c.rat_as_int od,X),1,[int]:[]).
   (rec_fun divide(int_poly f, int cur_degree, [int] degrees) [int]:
      if degree(f).= then degrees { terminating case }
      else let Phi = cyclotomic_polynomial(cur_degree)
	   then (g,R1)=monic_divide(f,Phi)
	   in
	if =R1
	then divide(g,cur_degree,degrees#(cur_degree))
	else divide(f,cur_degree+1,degrees)
	fi
      fi
   )

