<basic.at
<lattice.at { for (co)restrict_action }
<torus.at { for torus }
<ratmat.at {needed for simply_connected_cover et. al. }

{----------------some more general group constructions----------------}

{ real forms }

{ preferred terminology when argument is not an inner class: inner_forms }

set inner_forms (RealForm G) = real_forms(InnerClass:G)

set print_real_forms(InnerClass ic)= void:
  for n@i in form_names(ic) do prints(i,": ",n) od

set print_inner_forms (RealForm G) = void:
begin print_real_forms(G)
; prints("To define a real form rf do: set rf=real_forms(G)[i]")
end

{ defining split groups }

set split_form(InnerClass ic) = RealForm:
( let rd = root_datum(ic) then ic_split = inner_class(rd,-id_mat(rank(rd))) in
  quasisplit_form
  ( if distinguished_involution(ic)=distinguished_involution(ic_split)
    then ic { try to retain the same inner class }
    else ic_split
    fi
  )
)

{ direct product of RootDatum, InnerClass and RealForm }

set *(RootDatum R,RootDatum S) = RootDatum:
  root_datum(block_matrix(simple_roots(R),simple_roots(S))
            ,block_matrix(simple_coroots(R),simple_coroots(S)) )

set *(InnerClass ic1,InnerClass ic2) = InnerClass:
  let di =
    block_matrix(distinguished_involution(ic1),distinguished_involution(ic2))
  in inner_class(root_datum(ic1)*root_datum(ic2),di)

set * (RealForm G,RealForm H) = RealForm:
( let xG=KGB(G,0), xH=KGB(H,0) in
  real_form { synthetic }
  ( inner_class(G)*inner_class(H)
  , block_matrix(involution(xG),involution(xH))
  , torus_factor(xG)##torus_factor(xH)
  )
)

{ ---------------- radical, i.e. maximal central torus ---------------- }

set radical (RootDatum rd) = RootDatum: { central torus as separate root datum }
  let empty = null(rank(rd)-semisimple_rank(rd),0) in root_datum(empty,empty)

set radical (InnerClass ic) = RealForm: { unique real form of central torus }
  let rd = root_datum(ic)
  then xi0 = restrict_action(distinguished_involution(ic),coradical_basis(rd))
  in quasisplit_form(inner_class(radical(rd),xi0))

set maximal_central_torus = (RootDatum->RootDatum): radical@RootDatum
set maximal_central_torus = (InnerClass->RealForm): radical@InnerClass

{ -------------derived, adjoint inner class and real form--------------  }

set derived (InnerClass ic) = InnerClass:
  let (der_rd,proj)=derived_info(root_datum(ic))
  in inner_class(der_rd,corestrict_action(proj,distinguished_involution(ic)))

set derived_info(InnerClass ic)=(InnerClass,mat):
  let (der_rd,proj)=derived_info(root_datum(ic))
  in (inner_class(der_rd,corestrict_action(proj,distinguished_involution(ic))),proj)

set mod_central_torus (InnerClass ic) = InnerClass:
  let (quot_rd,inj)=mod_central_torus_info(root_datum(ic))
  in inner_class(quot_rd,restrict_action(distinguished_involution(ic),inj))

{ transform involution theta to basis of simple roots }
set adjoint_transform (RootDatum rd, mat theta) = mat:
  let  image = theta*simple_roots(rd), ssr = semisimple_rank(rd) in
  ssr ^ { form a square matrix of size ssr with the following rows: }
    for i: ssr do ratvec_as_vec(fundamental_coweight(rd,i)*image) od

set adjoint (InnerClass ic) = InnerClass:
  let rd = root_datum(ic)
  in inner_class(adjoint(rd)
                ,adjoint_transform(rd,distinguished_involution(ic))
		)
set derived (RealForm G) = RealForm:
( let (der_rd,proj)=derived_info(root_datum(G))
  then xi0 = corestrict_action(proj,distinguished_involution(InnerClass:G))
  then tf=torus_factor(KGB(G,0)), der_fc = der_rd.fundamental_coweights
  in
  real_form { synthetic }
    ( inner_class(der_rd,xi0)
    , xi0
    , sum(der_rd.rank, for alpha@i in G.simple_roots do der_fc[i]*(tf*alpha) od)
    )
)

set adjoint (RealForm G) = RealForm:
( let adj_ic = adjoint(inner_class(G)) in
  real_form { synthetic }
    ( adj_ic
    , distinguished_involution(adj_ic)
    , torus_factor(KGB(G,0))*simple_roots(root_datum(G)) { to adjoint }
    )
)

{ ----------------tests for classes of groups---------------- }

set is_relatively_split (RealForm G) = bool: { whether is_split(derived(G))) }
  compact_rank(most_split_Cartan(G))=compact_rank(radical(InnerClass:G))

set is_abelian(RootDatum rd)=bool: =semisimple_rank(rd)

{  converting between root data, and including a change of basis matrix }

{Converting rd=(A,B)  (A=simple_roots, B=simple_coroots)
to  (A_new,B_new), also return  |ratmat| M (or |mat|)
M  = change of basis matrix from X*(T) to X^*(T_new)
^M = change of basis matrix from X_*(T_new) to X_*(T)
M satisfies:
M*A=A_new
^M*B_new=B
Note: ^A*B=C=^A_new*B_new (C is the Cartan matrix)
the built-in |derived_info| is of this form
with |mat| in place of |ratmat|
Similarly |mod_central_torus_info, except that in
M satisfies the transpose conditions:
^M*A=A_new
M*B_new=B
}

{derived_info and mod_central_torus_info are built-in}

{.adjoint root datum and change of basis matrix.}
set adjoint_info (RootDatum rd) = (RootDatum,mat): { change weight basis to simple roots }
let A=simple_roots(rd) then
A_new=id_mat(semisimple_rank(rd)) then
B_new=Cartan_matrix(rd) in
(root_datum(A_new,B_new), left_inverse(A))

{.simply connected cover of complex group, with change of basis matrix.}
set simply_connected_cover_info(RootDatum rd)=(RootDatum, ratmat):
assert(is_semisimple(rd), "rd is not semisimple");
let A=simple_roots(rd) then
A_new=^Cartan_matrix(rd) then
B_new=id_mat(rank(rd)) in
(root_datum(A_new,B_new), A_new*rational_inverse(A))

{.simply connected cover of complex group}
set simply_connected_cover(RootDatum rd)=RootDatum:
let (rd_sc,)=simply_connected_cover_info(rd) in rd_sc

{.simply connected cover of derived group, with change of basis matrix.}
set simply_connected_cover_derived_info(RootDatum rd)=(RootDatum,ratmat):
let (rd_der,M)=derived_info(rd) then
(rd_sc,N)=simply_connected_cover_info(rd_der) in (rd_sc,N*M)

{.simply connected cover of complex group}
set simply_connected_cover_derived(RootDatum rd)=RootDatum:
let (rd_sc,)=simply_connected_cover_derived_info(rd) in rd_sc
