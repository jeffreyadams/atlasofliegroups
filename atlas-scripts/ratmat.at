{ implement type |ratmat| that makes doing linear algebra over $\Q$ possible }

{ This is firmly based on built-in limited integer |mat| support, and aims
  at providing an interface that resemble what basic.at does for |mat|

  By loading this file, you declare BEING AWARE that the chosen representation
  for rational matrices is susceptible to overflow problems for large matrices
  or those with complicated rational entries, and ACCEPTING the consequences.

  For safer rational linear algebra, use the Gaussian_elim.at script.
  Conversion functions |to_ratmat| and |to_rowrowrat| between |ratmat| and the
  [[rat]] type used there are defined below.
}

<basic.at
<matrix.at

set_type ratmat = (mat,string,int) { matrix, slash, common denominator }
{ the void component avoids unary/binary conflicts, as for -@(mat,int) }

{ a trick to locally rebind |s| (defined in basic.at) to constant string "/" }
save_s : s
set !s = "/"

set gcd(mat M) = int: gcd(for c in M do gcd(c) od)

set simplify(ratmat(M,,d)) = ratmat:
  let g=gcd([gcd(M),d]) in (M\g,s,d\g)

set / (mat M,int d) = ratmat:
  assert(!=d,"Division of matrix by 0");
  simplify(if >d then (M,s,d) else (-M,s,-d) fi)

set * (rat f,mat M) = ratmat: let (n,d)=%f in (n*M)/d
set / (mat M,rat f) = ratmat: (/f)*M

set entry (ratmat(M,,d),int i,int j) = rat: M[i,j]/d

{ matrix defined by its dimension and expression for general entry }
set matrix ((int,int)(r,c),(int,int->rat) f) = ratmat:
  let val = [[rat]]: for i:r do for j:c do f(i,j) od od
  then D = lcm(for row in val do lcm(for e in row do denom(e) od) od)
  in simplify(r#for j:c do for i:r do let (n,d)=%val[i][j] in n*(D\d) od od,s,D)

set n_rows (ratmat(M,,))= int: n_rows(M)
set n_columns (ratmat(M,,))= int: n_columns(M)

set columns (ratmat(M,,d)) = [ratvec]: for c in M do c/d od
set rows (ratmat(M,,d)) = [ratvec]: for c in ^M do c/d od
set column (ratmat(M,,d),int j) = ratvec: M[j]/d
set row (ratmat(M,,d),int i)    = ratvec: (^M)[i]/d

set columns_with ((int,ratvec->bool) p,ratmat(M,,d)) = ratmat:
  let res = [vec]: [] in
  for col@j in M do if p(j,col/d) then res #:= col fi od; n_rows(M)#res / d
set columns_with ((ratvec->bool) p,ratmat T) = ratmat:
  columns_with(((int,ratvec)(,col))bool: p(col),T)
set columns_with ((int->bool) p,ratmat(M,,d)) = ratmat:
  { we can use mat version here } columns_with(p,M) / d

set rows_with ((int,ratvec->bool) p,ratmat(M,,d)) = ratmat:
  let res = [vec]: [] in
  for row@i in ^M do if p(i,row/d) then res #:= row fi od; n_columns(M)^res / d
set rows_with ((ratvec->bool) p,ratmat T) = ratmat:
  rows_with(((int,ratvec)(,row))bool: p(row),T)
set rows_with ((int->bool) p,ratmat(M,,d)) = ratmat:
  { we can use mat version here } rows_with(p,M) / d

set det (ratmat(M,,d)) = rat: det(M)/d^n_rows(M) { this very easily overflows }

set ^ (ratmat(M,,d)) { transpose } = ratmat: (^M,s,d)

set + (ratmat(M,,d),ratmat(MM,,dd)) = ratmat: simplify(dd*M+d*MM,s,d*dd)
set - (ratmat(M,,d),ratmat(MM,,dd)) = ratmat: simplify(dd*M-d*MM,s,d*dd)
set - (ratmat(M,,d)) = (-M,d,())

set * (ratvec v,ratmat(M,,d)) = ratvec: v*M/d
set * (ratmat(M,,d),ratvec v) = ratvec: M*v/d

set * (ratmat(M,,d),mat MM) = ratmat: simplify(M*MM,s,d)
set * (mat M,ratmat(MM,,d)) = ratmat: simplify(M*MM,s,d)
set * (ratmat(M,,d),ratmat(MM,,dd)) = ratmat: simplify(M*MM,s,d*dd)

set / (ratmat(M,,d)) = ratmat:
   let (A,f)=invert(M) in
   assert(!=f,"inverse of singular rational matrix"); (d/f)*A

set ^ (ratmat(M,,d):Md,int e) = ratmat:
   if >=e then (M^e,s,d^e) else let (A,,m) = /Md, e1 = -e in (A^e1,s,m^e1) fi

set ratmat_as_mat (ratmat(M,,d)) = mat:
   assert(abs(d)=1,"matrix is not integral"); d*M
set mat_as_ratmat (mat M) = ratmat:(M,"/",1)
set diagonal(ratvec v) = ratmat: let (w,d)=%v in (diagonal(w),"/", d)

{convert [ratvec] to ratmat, and define resulting operations involving a ratmat}
set ratvecs_as_ratmat ([ratvec] A) = ratmat:
   let d=lcm(for v in A do let (,denom)=%v in denom od) in
   (for v in A do ratvec_as_vec(d*v) od,"/",d)

set to_ratmat ([[rat]] A) = ratmat: for c in A do ratvec:c od.ratvecs_as_ratmat
set to_rowrowrat (ratmat A) = [[rat]]: for c in A.columns do [rat]:c od

set ^([ratvec] M) = ratmat: { transpose } ^(ratvecs_as_ratmat(M))
set * ([ratvec] M,ratmat MM) = ratmat: ratvecs_as_ratmat(M)*MM
set * (ratmat M,[ratvec] MM) = ratmat: M*ratvecs_as_ratmat(MM)
set + ([ratvec] M,ratmat MM) = ratmat: ratvecs_as_ratmat(M)+MM
set + (ratmat M,[ratvec] MM) = ratmat: M+ratvecs_as_ratmat(MM)
set - ([ratvec] M,ratmat MM) = ratmat: ratvecs_as_ratmat(M)-MM
set - (ratmat M,[ratvec] MM) = ratmat: M-ratvecs_as_ratmat(MM)

set inverse (ratmat(M,,d)) = ratmat: let (Minv,e)=invert(M) in d*Minv/e
set solve (ratmat(M,,d), ratvec v) = maybe_a_ratvec: solve(M,v*d)

{also define resulting operations involving a mat}
set * ([ratvec] M,[ratvec] MM)=ratmat:
  ratvecs_as_ratmat(M)*ratvecs_as_ratmat(MM)
set + ([ratvec] M,[ratvec] MM)=ratmat:
  ratvecs_as_ratmat(M)+ratvecs_as_ratmat(MM)
set - ([ratvec] M,[ratvec] MM)=ratmat:
  ratvecs_as_ratmat(M)-ratvecs_as_ratmat(MM)

{define inverse of mat as ratmat}
set rational_inverse(mat M) = ratmat:inverse(mat_as_ratmat(M))

{ left inverse of injective (full column rank) rational matrix
  adapted from |weak_left_inverse| in matrix.at
}
set left_inverse(ratmat(A,,d)) = ratmat:
(  let (M,C,pivots,)=echelon(A), c=#A
in if #M<c then error("not injective (rank is ",#M,"<",c,")") fi
;  let (Tri,R)= ech_up(M,pivots) then (T1,d1)=invert_ech(Tri[:c,:])
   then (num,den)=%(d/d1) { simplify fraction before combining }
in ( num*C*T1*R[:c,:] , s, den)
)

{.right inverse of a rational matrix.}
set right_inverse(ratmat(A,,d)) = ratmat: { formal dual of left_inverse }
(  let (M,C,pivots,)=echelon(^A), c=A.n_rows
in if M.n_rows<c then error("row rank ",M.n_rows," not full (",c,")") fi
;  let (Tri,R)= ech_up(M,pivots) then  (T1,d1)=invert_ech(Tri[:c,:])
   then (num,den)=%(d/d1) { simplify fraction before combining }
in ( ^(num*C*T1*R[:c,:]) , s, den)
)

set ratvec_to_string(ratvec v) = string: { show ratvec as [rat], simplified }
   ## for a in v
      do let (n,d)=%a in
         if d=1 then int_format(n) else int_format(n)+"/"+int_format(d) fi
       + " "
      od

{ convert ratmat, i.e. (mat,string,int), to [[rat]] }
set ratmat_to_bigmat (ratmat(A,,d)) = [[rat]]:
  for i:n_columns(A) do [rat]: A[i]/d od

set show (ratmat(M,,d)) = void:
   for v in M do prints(ratvec_to_string(v/d)) od

{ finally restore |s| from basic.at, and free the identifier |save_s| }
s : save_s
forget save_s
