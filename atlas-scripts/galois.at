<basic.at
<groups.at
<generate_groups.at
<sort.at
<parameters.at
<lattice.at

{ G is a RealForm
  pi0(G)=order of component group of G(R)
  H1(G)=order of Galois cohomology H^1(Gamma,G)
}

{ square_classes(ic) =
  list of all square classes of inner class, each a list of real form numbers
  square_classes(G) = list of all square classes of inner class of G
}
set square_classes (InnerClass ic) = [[int]]:
  square_classes(Cartan_class(ic,0)) { the most compact Cartan }
{ for a RealForm just convert it to its InnerClass, Cartan(0) is the same }

{ list of integer labels of real forms, each repeated for strong real forms}
set strong_real_forms_indices(InnerClass ic) = [int]:
  sort(##square_classes(fundamental_Cartan(ic)))

{ list of real forms, each repeated for strong real forms }
set strong_real_forms(InnerClass ic) = [RealForm]:
let rf=ic.real_forms in for i in ic.strong_real_forms_indices do rf[i] od

{ assume you want all strong real forms, i.e. Cartan 0 }
set print_strong_real (RealForm G) = void:
  print_strong_real(fundamental_Cartan(G)) { implicitly convert to InnerClass }

{ find(vecs,k) returns the (smallest) int j such that k in occurs in vecs[j]
  returns -1 otherwise
}
set find ([[int]] vecs, int k) = int:
  first(#vecs,(int i): is_member(vecs[i])(k))
set part_containing (int k) = ([[int]] parts) [int]:
  let pred=contains(k),i=#parts-1 in { do program out the loop, just for fun }
  while >=i and not pred(parts[i]) do i-:=1 od; parts[i] { raises error if i<0 }

{ associated to a real form \theta is an element of Z^\theta/(1+\theta)Z
  (theta can be taken to be the distinguished involution delta)
  if theta=\theta_x then x^2\in Z^\Gamma represents this class
  form_number(G) is the number of the real form
  the central invariant index is the entry in square_classes(G) containing this number
  for example inner class of Sp(4,R)
  square_classes=([2],[1,0,0])
  form_number(Sp(4,R))=2
  central_invariant_index(Sp(4,R))=0
  form_number(Sp(2,0))=0 form_number(Sp(1,1))=1
  central_invariant_index(Sp(2,0))=central_invariant_index(Sp(1,1))=1
}
set central_invariant_index (InnerClass ic, int k) = int:
  find(square_classes(ic),k)
set central_invariant_index (RealForm G) = int:
  find(square_classes(G),form_number(G))

{central_invariant@RealForm is the same as square@RealForm,
 except that we will view its values in Z^delta/(1+delta)Z}
set central_invariant(RealForm G)=ratvec:square(G)  {see parameters.at}
set central_invariant(InnerClass ic,int i)=ratvec:central_invariant(ic.real_forms[i])

{two ratvecs in P^v, each gives an element of Z, assumed to be
in Z^delta. They define the same central invariant if they
are equivalent modulo (1+delta)Z+X^*
}
{


set in_one_plus_delta_Z(InnerClass ic,ratvec v)=bool:
find(ic.one_plus_delta_Z,map_to_center(ic,v))!=-1

set one_plus_delta_Z_der(InnerClass ic)=[ratvec]:
let (ic_d,M)=ic.derived_info in  {^M maps X_*(T_der) to X_*(T)} 
sort_u(for v in ic.derived.elements_of_center do ^M*map_to_center(ic_d,(1+^ic_d.distinguished_involution)*v) od)

set in_one_plus_delta_Z_der(InnerClass ic,ratvec v)=bool:
find(ic.one_plus_delta_Z_der,map_to_center(ic,v))!=-1
}

set in_one_plus_delta_Z(InnerClass ic,ratvec v)=
assert(ic.is_equal_rank,"Only equal rank case at the moment");
let M=1+ic.distinguished_involution {2*Id} then
N=ic.simple_roots then
J=intersection(M,N) in
{let ()=prints("M=",M,new_line,"N=",N, new_line,"J=",J, "v*J/2", v*J/2) in}
is_integer(v*J/2)

{only equal rank}
set equal_central_invariant(InnerClass ic,ratvec v,ratvec w)=bool:in_one_plus_delta_Z(ic,v-w)

{only equal rank}
set equal_central_invariant(RealForm G,ratvec v)=bool:
equal_central_invariant(G.inner_class,G.central_invariant,v)

{only equal rank}
set real_forms_given_central_invariant(InnerClass ic,ratvec v)=[RealForm]:
##for G in ic.real_forms do if equal_central_invariant(G,v) then [G] else [] fi od

{only equal rank}
set strong_real_forms_given_central_invariant(InnerClass ic,ratvec v)=[RealForm]:
##for G in ic.strong_real_forms do if equal_central_invariant(G,v) then [G] else [] fi od

{any group, strong real forms x with x^2=1 are in bijection with
strong real forms G where central_invariant(G)=central_invariant(G.quasicompact_form)
note that the central invariant might not be trivial, for example
in U(2,2) Z/Z^2={iI,-I} in atlas
}
set strong_real_forms_central_invariant_e(InnerClass ic)=[RealForm]:
let v=central_invariant(ic.quasicompact_form) in
##for G in ic.strong_real_forms do if G.central_invariant=v then [G] else [] fi od








{
  strong_real_forms_same_type(ic,k)
  strong_real_forms_same_type(G)
  returns a list [int] (with multiplicity)
  of the real form numbers in given inner class with same x^2 as given real form
  real form is given by (inner class, number) or (RealForm G)
  if j occurs with multiplicity this means several strong real forms
  mapping to the given real form
  for example if ic=inner_class(Spin(4,4)) then
  strong_real_forms_type(ic,0)=[4,0,0,0,0]
  meaning one split strong real form and 4 compact ones
}
set strong_real_forms_same_type (InnerClass ic, int k) = [int]:
  part_containing(k)(square_classes(ic))
set strong_real_forms_same_type (RealForm G) =
  part_containing(form_number(G))(square_classes(G))

{strong real forms with central invariant: central element k}
set strong_real_forms_type(InnerClass ic,int k)=[int]:square_classes(ic)[k]

{ H^1(\Gamma,G)=H^1(\theta,G) is the number of strong real forms with
  given x^2\in Z
}
set H1 (RealForm G) = int: #strong_real_forms_same_type(G)

{ calculate H1 for all simple groups of given rank bounds, both simply
  connected and adjoint uses all_simple from generate_groups.at
}
set iterate_H1 (int min_rank, int max_rank) = void:
  let announce(string s,int rank) = void:
    prints("Calculating H^1(Gamma,G) for ",s," simple groups of rank ",rank)
  in
  for rank:max_rank-min_rank+1 from min_rank
  do
    for isogeny in ["sc","ad"]
    do prints("-"*73) { separator }
    ; if (isogeny ="sc") then announce("simply connected",rank)
      elif(isogeny ="ad") then announce("adjoint", rank)
      fi
    ; prints("")
    ; for g in all_simple(isogeny,rank) do prints(g,"   ",H1(g)) od
    od
  od

set pi0 (RealForm G) = int: 2^(components_rank(G))
set iterate_H1 (int rank) = void: iterate_H1(rank,rank)
set iterate_H1 = @void: iterate_H1(1,8)

{number of conjugacy classes of involutions of connected
complex group =# strong real forms with central invariant e}
set conjugacy_classes_involutions(RootDatum rd)=int:
#strong_real_forms_same_type(compact_form(rd))
