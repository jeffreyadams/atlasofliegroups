<basic.at
<groups.at
<generate_groups.at

{ G is a RealForm
  pi0(G)=order of component group of G(R)
  H1(G)=order of Galois cohomology H^1(Gamma,G)
}

{ square_classes(ic) =
  list of all square classes of inner class, each a list of real form numbers
  square_classes(G) = list of all square classes of inner class of G
}
set square_classes (InnerClass ic) = [[int]]:
  square_classes(Cartan_class(ic,0)) { the most compact Cartan }
{ for a RealForm just convert it to its InnerClass, Cartan(0) is the same }

{ assume you want all strong real forms, i.e. Cartan 0 }
set print_strong_real (RealForm G) = void:
  print_strong_real(Cartan_class(G,0)) { no need to convert to InnerClass here }

{ identify SO*(2m) via the information of square_classes(SO(2m,0)) }
set SOstar (int n) = RealForm:
  let ic=InnerClass:SO(n,0) then sc1=square_classes(ic)[1] { starred forms }
  in real_form(ic,sc1[0]) { select first of the starred real forms }
set Spinstar (int n) =
  let ic=InnerClass:Spin(n,0) then sc1=square_classes(ic)[1]
  in real_form(ic,sc1[0])
{ PSOstar used to take square_classes of SO(n,0) (no P); that cannot be right? }
set PSOstar (int n) = RealForm:
  let ic=InnerClass:PSO(n,0) then sc1=square_classes(ic)[1]
  in real_form(ic,sc1[0])

{ find(vecs,k) returns the (smallest) int j such that k in occurs in vecs[j]
  returns -1 otherwise
}
set find_class ([[int]] vecs, int k) = int:
  first(#vecs,(int i): is_member(vecs[i])(k))
set part_containing (int k) = ([[int]] parts) [int]:
  let pred=contains(k),i=#parts-1 in { do program out the loop, just for fun }
  while >=i and not pred(parts[i]) do i-:=1 od; parts[i] { raises error if i<0 }

{ associated to a real form \theta is an element of Z^\theta/(1+\theta)Z
  if theta=\theta_x then x^2\in Z^\Gamma represents this class
  form_number(G) is the number of the real form
  the central invariant is the entry in square_classes(G) containing this number
  for example inner class of Sp(4,R)
  square_classes=([2],[1,0,0])
  form_number(Sp(4,R))=2
  central_invariant(Sp(4,R))=0
  form_number(Sp(2,0))=0 form_number(Sp(1,1))=1
  central_invariant(Sp(2,0))=central_invariant(Sp(1,1))=1
}
set central_invariant (InnerClass ic, int k) = int:
  find_class(square_classes(ic),k)
set central_invariant (RealForm G) = int:
  find_class(square_classes(G),form_number(G))

{
  strong_real_forms_same_type(ic,k)
  strong_real_forms_same_type(G)
  returns a list [int] (with multiplicity)
  of the real form numbers in given inner class with same x^2 as given real form
  real form is given by (inner class, number) or (RealForm G)
  if j occurs with multiplicity this means several strong real forms
  mapping to the given real form
  for example if ic=inner_class(Spin(4,4)) then
  strong_real_forms_type(ic,0)=[4,0,0,0,0]
  meaning one split strong real form and 4 compact ones
}
set strong_real_forms_same_type (InnerClass ic, int k) = [int]:
  part_containing(k)(square_classes(ic))
set strong_real_forms_same_type (RealForm G) =
  part_containing(form_number(G))(square_classes(G))

{ H^1(\Gamma,G)=H^1(\theta,G) is the number of strong real forms with
  given x^2\in Z
}
set H1 (RealForm G) = int: #strong_real_forms_same_type(G)

{ calculate H1 for all simple groups of given rank bounds, both simply
  connected and adjoint uses all_simple from generate_groups.at
}
set iterate_H1 (int min_rank, int max_rank) = void:
  let announce(string s,int rank) = void:
    prints("Calculating H^1(Gamma,G) for ",s," simple groups of rank ",rank)
  in
  for rank:max_rank-min_rank+1 from min_rank
  do
    for isogeny in ["sc","ad"]
    do prints("-"*73) { separator }
    ; if (isogeny ="sc") then announce("simply connected",rank)
      elif(isogeny ="ad") then announce("adjoint", rank)
      fi
    ; prints("")
    ; for g in all_simple(isogeny,rank) do prints(g,"   ",H1(g)) od
    od
  od

set pi0 (RealForm G) = int: 2^(components_rank(G))
set iterate_H1 (int rank) = void: iterate_H1(rank,rank)
set iterate_H1 = @void: iterate_H1(1,8)

