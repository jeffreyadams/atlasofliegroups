<basic.at
<induction.at { for |makeS@KGBElt| }

{given a set S of N ratvecs all of length n
 returns all 2^N sums of vectors in subsets of S
 caution: if S is empty this returns [ratvec:[]]
   i.e. the list of 1 ratvec of length 0
   (rather than [ratvec]:[] the empty list of ratvecs, which has length 0)
   this is appropriate since the expected length of the list is 2^N=2^0=1
 otherwise =[null(n),...]

}
set all_sums(mat roots) = [vec]:
   for v in all_0_1_vecs (n_columns(roots)) do roots*v od

{given a set S of N ratvecs all of length n
 return list of sums in all subsets of size k
}
set sums_of_size_k(mat roots,int k) = [vec]:
   for v in all_0_1_vecs_with_sum (n_columns(roots),k) do roots*v od

{like makeS in induction.at, except only keep the roots in u}
set makeS(KGBElt x_G,Parabolic P) = mat:
   let rho_u=rho_u(P), nilrad_roots = mat: nilrad_roots(P)
in columns_with((vec alpha)bool: find(nilrad_roots,alpha).>= , makeS(x_G))

{Given a theta-stable parabolic P and x_G\in KGB(G)
 return a set of nci roots of H, whose restrictions to H^{theta_x} are
 the weights of H^theta on u\cap s
 each nci root contributes itself
 each pair of complex roots for G contributes one of them
Note: our application will be to L_0\subset L\subset G
 q=l+u is the parabolic, we're interested in tensoring L_0\cap K-types
 for this command all that matters is \theta_x restricted to H
 so L_0 plays no role
}
{
Dangerous bend: this is a KGBElt for L (what is needed for a weight function to compute
tensor products) but the roots are for G, so embed_KGB(x_L,G)
}
set nci_nilrad_roots_restricted_to_H_theta (KGBElt x_L,Parabolic P) = mat:
(  assert(is_parabolic_theta_stable(P),"P is not theta-stable");
   let x_G=embed_KGB(x_L,P.real_form)
in columns_with
    ((vec alpha)bool: is_noncompact_imaginary(alpha,x_G) , nilrad_roots(P)) ##
   for root in makeS(x_G,P) do root od
)

{returns a function taking a KGBElt to [ratvec]
}
set nci_nilrad_roots_restricted_to_H_theta(Parabolic P) =  (KGBElt x_L) [vec]:
   nci_nilrad_roots_restricted_to_H_theta(x_L,P)

{ first compute the previous function to give a set of n roots
 run over the binom(n,k) subsets of size k of this set, and return their sums }
set sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta (Parabolic P,int k) =
     (KGBElt x_L) [vec]:
  sums_of_size_k(nci_nilrad_roots_restricted_to_H_theta(x_L,P),k)

{ first compute the ante-previous function to give a set of n roots
 run over the 2^n subsets of this set, and return their sums }
set sums_nci_nilrad_roots_restricted_to_H_theta (Parabolic P) =
      (KGBElt x_L)[vec]:
  all_sums(nci_nilrad_roots_restricted_to_H_theta(x_L,P))
