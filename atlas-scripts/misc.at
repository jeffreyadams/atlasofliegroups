<basic.at

{ test if an integer is even, or a rational is an integer }
set is_nonnegative (vec v) = bool: >=v
set is_positive (vec v) = bool: >v

{ test if a ratvec is in fact a vec (integers)}
set is_positive (ratvec v) = bool: is_positive(numer(v))
set is_nonnegative (ratvec v)= bool: is_nonnegative(numer(v))

{ transform ParamPol into a list of (Split,Param) pairs; previously built-in }
set % (ParamPol P) = [(Split,Param)]: for c@p in P do (c,p) od

{ int_part and s_part of a ParamPol, s.t. P=int_part(P)+s*s_part(P) }
set int_part (ParamPol P) = ParamPol: 0*P + for c@p in P do (c.int_part,p) od
set s_part (ParamPol P) = ParamPol: 0*P + for c@p in P do (c.s_part,p) od

{ simpler syntax for param command: param(G,3,...) for param(KGB(G,3),...)  }
set param(RealForm G,int k, vec lambda_rho,ratvec nu) = Param:
  param(KGB(G,k),lambda_rho,nu)

{ replace non-final parameter with ParamPol
  this function used to return a [Param] instead, with coefficients ignored }
set finalize (Param p) = ParamPol: p

set Finalize(Param p)=Param: let f=finalize(p) in
assert(#f=1,"finalize(p) has more than one term, use finalize(p)");first_param(f)

set finalize ([Param] P) = ParamPol: { will fail on an empty list }
  P[0].null_module + for p in P do (Split:1,p) od

{ evaluate at s=t for t integer (or rational?): replace w=a+bs with a+bt }
{ would seem to make sense only if t^2=1, so if either t=1 or t=-1 }
set  #(Split w,int t)=let (a,b)=%w in int: a+t*b
set  #(Split w,rat t)=let (a,b)=%w in rat: a+t*b
set  #(ParamPol P,int t)= ParamPol: { with integer coefficiens }
  null_module(real_form(P)) +  for w@q in P do (w#t,q) od

{properties of groups}

set fiber_partition(RealForm G) = [int]: fiber_partition(Cartan_class(G,0),G)

set in_distinguished_fiber (KGBElt x) = bool:
  involution(x)=distinguished_involution(real_form(x))

set distinguished_fiber (RealForm G) = [KGBElt]:
  for x in KGB(G) do if x.in_distinguished_fiber then x else break fi od

set ss_rank (RootDatum rd) = semisimple_rank(rd)

set dimension (RootDatum rd) = 2*nr_of_posroots(rd)+rank(rd)

set root_length(RootDatum rd,vec alpha) = int: rat_as_int(alpha*rho_check(rd))
set is_simple_root(RootDatum rd,[int] alpha) = bool: root_length(rd,alpha)=1

set simple_imaginary_subsystem (KGBElt x) = (mat,mat): { simple (co)roots }
  x.imaginary_sys.simple_system_from_positive

set simple_real_subsystem (KGBElt x) = (mat,mat): { simple (co)roots }
  x.real_sys.simple_system_from_positive

set to_binary (int length, int n) = vec:
  let v=null(length) in
  while (length-:=1)>=0 and n!=0 do let (q,r)=n\%2 in v[length]:=r; n:=q od; v

set generate_all_binary = (int->[vec]): all_0_1_vecs@int

{generate all subsets of a set of integers}
set generate_all_subsets ([int] S) = [[int]]:
  let rec_fun g (int k) = [[int]]: { subsets of first k elements of S }
    if =k then [[]] { one empty subset of the empty set }
    else let subs = g(k-1), last=S[k-1] in subs ## for s in subs do s#last od
    fi
  in g(#S)

{generate all subsets of a set of vectors}
set generate_all_subsets([vec] S) = [[vec]]:
    for A in generate_all_subsets(for i:#S do i od) do for i in A do S[i] od od

{all 2^n subsets of a set of rational vectors}
set generate_all_subsets([ratvec] S) = [[ratvec]]:
    for A in generate_all_subsets(for i:#S do i od) do for i in A do S[i] od od

{A is a subset of B}
set is_subset([int] A,[int] B)=bool:
all(for a in A do find (B,a)!=-1 od)

{A is a proper subset of B}
set is_proper_subset([int] A,[int] B)=bool:
is_subset(A,B) and #A<#B

{complement of A in B}
set complement([Param] A,[Param] B)=[Param]:
##for p in B do if find(A,p)=-1 then [p] else [] fi od

{ nicer display of Splits }
set prettyPrint (Split w) = string:
  let (a,b)=%w in
  if   b=0 then int_format(a)
  elif a=0 then
       if b=1 then "s" elif b=-1 then "-s" else int_format(b)+"s" fi
  elif b=1 then int_format(a)+"+s"
  elif b=-1 then int_format(a)+"-s"
  elif b<-1 then ## [ int_format(a), int_format(b) ,"s"]
  else ## [ int_format(a), "+", int_format(b), "s" ]
  fi

{ nice output of ParamPol:
  prettyPrint the coefficients, print terms in order of x }
set prettyPrint (ParamPol P)= void:
for w@p in P
do prints("(",prettyPrint(w),")*",p,", ",infinitesimal_character(p)) od

{. Cartesian power (#height)^rank, lists of length rank of numbers <height .}
set rec_fun box(int height, int rank) = [[int]]:
  all_words(for :rank do height od) { converted from [vec] to [[int]] }

{. Cartesian product (#heights[0])*(#heights[1])*...*(heights~[0]) .}
set rec_fun box([int] heights) = [[int]]: all_words(heights) { converted }

set flatten = ## @ [[int]]

{delete trailing zeros, a.k.a. |strip_to_partition| from combinatorics.at }
set delete_trailing_zeros([int] list)=[int]:
if =list then null(0) else list[:#list-first(for i:#list do !=list~[i] od)] fi

set delete_leading_zeros([int] list)=[int]:
if =list then null(0) else list[first(for i:#list do !=list[i] od):] fi

{  more basic functions involving roots   }

{for logical convenience}
set not_a_root(RootDatum rd,vec v)=bool:not is_root(rd,v)
set not_a_root(RootDatum rd)=(vec -> bool):(vec v):not_a_root(rd,v)

{index of root in list of all roots}
set all_root_index(RootDatum rd,vec alpha)=int:find(rd.roots,alpha)
set all_root_index(RootDatum rd)=(vec -> int):(vec alpha):all_root_index(rd,alpha)

{index of root in list of simple roots}
set simple_root_index(RootDatum rd,vec alpha)=int:find(rd.simple_roots,alpha)
set simple_root_index(RootDatum rd)=(vec -> int):(vec alpha):simple_root_index(rd,alpha)

{return 0...n-1=simple root index of alpha (if positive simple) or -alpha (if negative simple)
or -1 to indicate an error
}
set pm_simple_root_index(RootDatum rd,vec alpha)=int:
if is_posroot(rd,alpha) then  rd.simple_root_index(alpha) else rd.simple_root_index(-alpha) fi
set pm_simple_root_index(RootDatum rd)=(vec -> int):(vec alpha):pm_simple_root_index(rd,alpha)

{sgn(alpha)alpha is positive}
set sgn(RootDatum rd,vec alpha)=int:
assert(is_root(rd,alpha),"not a root");
if is_posroot(rd,alpha) then 1 else -1 fi
set sgn(RootDatum rd)=(vec->int):(vec alpha):sgn(rd,alpha)

{alpha>0: height(alpha)=sum of coefficients of simple roots
 alpha<0: height(alpha)=height(-alpha)(
}
set height(RootDatum rd,vec alpha)=int:
assert(is_root(rd,alpha),"not a root");
abs(rat_as_int(rho_check(rd)*alpha))
set height(RootDatum rd)=(vec->int):(vec alpha):height(rd,alpha)

{list roots of given height}
set roots_of_height(RootDatum rd,int height)=[vec]:
## for alpha in roots(rd) do if height(rd,alpha)=height then [alpha] else [] fi od

set max_height(RootDatum rd)=int:max(for alpha in rd.roots do height(rd,alpha) od)

{all roots, sorted by height}
set roots_by_height(RootDatum rd)=[[vec]]:for i:max_height(rd) do roots_of_height(rd,i) od

{return (p,q) where
alpha+p\beta is a root (maximal such p)
alpha-q\beta is a root (maximal such q)
}
{set root_string(RootDatum rd, vec alpha, vec beta)=(int,int):
assert(not alpha=-beta,"alpha=-beta");
let x = first(for i:4 do  not is_root(rd,alpha+i*beta) od) then
y = first(for i:4 do not  is_root(rd,alpha-i*beta) od) in (x-1,y-1)
}
set root_string(RootDatum rd, vec beta, vec alpha)=(int,int):
assert(not alpha=-beta,"alpha=-beta");
let x = first(for i:4 do  not is_root(rd,alpha+i*beta) od) then
y = first(for i:4 do not  is_root(rd,alpha-i*beta) od) in (x-1,y-1)

set root_string(RootDatum rd)=((vec,vec)->(int,int)):(vec alpha,vec beta):root_string(rd,alpha,beta)

{write a positive root as a sum of simple}
set rec_fun posroot_as_sum_of_simple(RootDatum rd,vec alpha)=[vec]:
assert(is_posroot(rd,alpha),"root is not positive");
 if is_simple_root(rd,alpha) then [alpha] else
 let i=first(for i:ss_rank(rd) do alpha*simple_coroots(rd)[i]>0 od) in
 let beta=simple_roots(rd)[i] in beta#posroot_as_sum_of_simple(rd,alpha-beta) fi

{write any root as sum of simple or sum of (-simple)}
set rec_fun root_as_sum_of_simple(RootDatum rd,vec alpha)=[vec]:
if is_posroot(rd,alpha) then posroot_as_sum_of_simple(rd,alpha) else
-posroot_as_sum_of_simple(rd,-alpha) fi

{alpha>0: return alpha_1  (alpha_1 simple) so alpha= alpha_1+(other simple roots...)
 alpha<0: return -alpha_1 (alpha_1 simple) so alpha=-alpha_1-(other simple roots...)
}
set simple_root_summand(RootDatum rd,vec alpha)=vec:
if is_posroot(rd,alpha) then 
let i=first(for i:ss_rank(rd) do alpha*simple_coroots(rd)[i]>0 od) in simple_roots(rd)[i] else 
let i=first(for i:ss_rank(rd) do alpha*simple_coroots(rd)[i]<0 od) in -simple_roots(rd)[i] fi

