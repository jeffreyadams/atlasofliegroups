{ the functions in this file have not been carefully checked }

<basic.at
<kl.at { for |composition_series| }

{
  translate Param p, representing a standard module, at infinitesimal character
  gamma, to a new infinitesimal character gamma_new
  assumes gamma,gamma_new are dominant, shift=gamma_new-gamma is integral
  replaces (x,lambda,nu) with (x,lambda+shift,nu+shift)
  if gamma,gamma_new are regular, p and T(p,gamma_new) will have
    identical block structure
  if gamma is regular and gamma_new is singular, block of T(p,gamma_new)
    will be a quotient of block at gamma
  if gamma or gamma_new is not dominant, no guarantees (but no test either)
}
set translate_by (Param p, vec shift) = Param:
  let (x,lambda_rho,gamma)=%p in param(x,lambda_rho+shift,gamma+shift)

{ translate to infinitesimal character |gamma_new|, must lie in $\gamma+X^*$ }
set T (Param p, ratvec gamma_new) = ParamPol:
  let (shift,d) = %(gamma_new-infinitesimal_character(p)) in
  assert(@:d=1,"cannot translate to "+to_string(gamma_new));
  ParamPol: { finalize } translate_by(p,shift)

{ translate a |ParamPol| by translating each term }
set translate_by (ParamPol P, vec shift) = ParamPol:
  P.null_module + for w@q in P do (w,translate_by(q,shift)) od

{ the same, specifying destination infinitesimal character for first term; this
  should only be used when all terms of |P| have same infinitesimal character
}
set T (ParamPol P, ratvec gamma_new) = ParamPol:
  if =P then P { without any terms, there is nothing to change }
  else
    let gamma = infinitesimal_character(first_param(P))
    in { finalize } translate_by(P,ratvec_as_vec(gamma_new-gamma))
  fi

{ weight such that shift by its negative sends |gamma| to integral wall |k|,
  projecting parallel to all other walls
}
set to_wall (RootDatum id, int k, ratvec gamma) = ratvec:
  fundamental_weight(id,k)*(coroot(id,k)*gamma)

{ translate parameter p to simple root wall #k of the integral root system }
set Psi (Param p,int k) = ParamPol:
  let gamma=infinitesimal_character(p)
  then id = integrality_datum(root_datum(p),gamma)
  then (shift,d) = % -to_wall (id,k,gamma)
  in assert(@:d=1,"cannot project to wall "+k); { finalize } translate_by(p,shift)

{ translate p to intersection of set of simple root walls of integral system }
set Psi (Param p, [int] S) = ParamPol:
( let gamma=infinitesimal_character(p)
  then id=integrality_datum(root_datum(p),gamma)
  then (shift,d) = % - sum( rank(id), for k in S do to_wall(id,k,gamma) od )
  in assert(@:d=1,"cannot project to wall intersection "+to_string(S))
; { finalize } translate_by(p,shift)
)

{ translate |P| from assumed initial infinitesimal character |gamma| to the
  root wall #k of the integral root system }
set Psi (ParamPol P,ratvec gamma,int k) = ParamPol:
( let id = integrality_datum(root_datum(P),gamma)
  then (shift,d) = % -to_wall (id,k,gamma)
  in assert(@:d=1,"cannot project to wall "+k)
; P.null_module + for w@q in P do (w,translate_by(q,shift)) od
)

{ translate |P| from assumed initial infinitesimal character |gamma| to the
  intersection of set of simple root walls for |S| of the integral system,
  parallel to other walls (calling this is not very meaningful if the assumption
  about the infinitesimal character fails).
}
set Psi (ParamPol P, ratvec gamma, [int] S)= ParamPol:
( let  id=integrality_datum(root_datum(P),gamma)
  then (shift,d) = % - sum( rank(id), for k in S do to_wall(id,k,gamma) od )
  in assert(@:d=1,"cannot project to wall intersection "+to_string(S))
; translate_by(P,shift)
)

{ assuming that all terms of |P| have same infinitesimal character, deduce
  |gamma| in |Psi@(ParamPol,ratvec,int)| from the first term of |P|, if any }
set Psi (ParamPol P, int k)= ParamPol:
  if =P then P else Psi(P,infinitesimal_character(P.first_param),k) fi

{ assuming that all terms of |P| have same infinitesimal character, deduce
  |gamma| in |Psi@(ParamPol,ratvec,[int])| from the first term of |P|, if any }
set Psi (ParamPol P, [int] S)= ParamPol:
  if =P then P else Psi(P,infinitesimal_character(P.first_param),S) fi

{ corrected version handles non-integral infinitesimal character
  whether translation of irreducible parameter p to gamma is non-zero
  the name is too cute to change, but |J_will_survive| would be more accurate
}
set I_will_survive (Param p,ratvec gamma) = bool:
   for alpha_v@i in integrality_datum(p.root_datum,gamma).simple_coroots
   do is_descent(i,p) and =alpha_v*gamma
   od.none { no singular simple descents of integral subsystem }

{ translation functor of irreducible; returns |ParamPol| with at most one term }
set T_irr (Param p,ratvec v) = ParamPol:
if p.infinitesimal_character=v then p { trivial case }
elif is_dominant(p.root_datum,v)
then
{ p.infinitesimal character is assumed to be dominant, if v is also dominant
  then we're staying in the chamber, and T_irr(p) is simply shifting the
  parameter, just like for a standard module. However that the result is 0 iff:
  <alpha^vee,lambda>=0 where alpha is a simple root in the tau-invariant of p}
  #I_will_survive(p,v)*T(p,v) { multiply by 1 or 0 }
else { hard case (maybe crossing a wall): to standards, shift, back to irreds }
  T(character_formula(p),v).composition_series
fi

{ return an actual Param if nonzero }
set T_irr_nonzero (Param p,ratvec v) = Param:
  let P=T_irr(p,v) in
  assert(@:P.!=,"module is 0");
  assert(@:#P=1,"module is not irreducible");
  first_param(P)

{translate an irreducible from singular to regular}
{move an irreducible parameter to regular infinitesimal character}
set make_regular_irr (Param p) = Param:
   T_irr_nonzero(p,p.infinitesimal_character +two_rho(p.root_datum))

{ translate a |ParamPol| by translating each term by the same shift }
set T_irr (ParamPol P, ratvec gamma_new)= ParamPol:
  if =P then P { without any terms, there is nothing to change }
  else
    let gamma = infinitesimal_character(first_param(P))
    then shift = ratvec_as_vec(gamma_new-gamma)
    in sum(P.real_form,for w@q in P do w*T_irr(q,shift) od)
  fi

set Psi_irr (ParamPol P,int k) = ParamPol:
  composition_series(Psi(character_formula(P),k))

{ the "pseudo-tau" invariant }
{ this is a subset of simple integral roots such that:
  1) one can translate to this wall (i.e., the requisite translation is in X^*)
  2) this translation is 0
  If G is simply connected this should be the usual tau_invariant
  Example: the trivial representation of SO(3), the unique simple root
  is in the pseudo-tau invariant, but you can't translate to the wall,
  since rho is not in the root lattice

  root k of the integral roots is in pseudo-tau(p) if
  <gamma,alpha_k^v>*fund_weight is integral, and
  Psi(p,k)=0 or its x(Psi(p,k)) gets changed by finalize
  (here Psi(p,k) is the translation of the standard module for p)
}

set pseudo_tau_bitset (Param p)= (int,(int->bool)):
  let gamma = infinitesimal_character(p)
  then id=integrality_datum(real_form(p),gamma)
  in
  ( semisimple_rank(id)
  , (int k): let (shift,d)=%(fundamental_weight(id,k)*(coroot(id,k)*gamma))
    in d=1 and =translate_by(p,shift)
  )

{ set of integers, defining a subset of the simple integral roots }
set pseudo_tau (Param p) = [int]: list(pseudo_tau_bitset(p))

{ set of integers, defining a subset of the simple integral roots }
set pseudo_tau_complement (Param p)= [int]: complement(pseudo_tau_bitset(p))

{ push Param p to the most singular place where the irreducible is non-zero,
  i.e. to all of the root walls not in the pseudo_tau_invariant
}
set make_maximally_singular (Param p) = ParamPol: Psi(p,pseudo_tau_complement(p))
