< induction.at {for theta_stable_quasi_data}
< unity.at {for deform_support}
< hermitian.at {for to_ht}
<K_types.at {for branch_std}
<time.at {for print_time_string}
<cohom_reductionND {for factor_params, factor_K_types}
<derived_cover.at
<K.at {for projection_to_K_matrix}
{ <sub_cells.at {for is_complex}}
{trying to get at bottom layer K-types. Use D for bound on height, d
for bound on number of terms. The "min" refers to the theta-stable
parabolic built by theta_stable_quasi_data. Parabolics _containing_
that one should certainly be supported; there's a chance also of
getting useful information from parabolics _not_ containing it.}
{"pairs" is...}

{K_signature_irrB is hermitian_form_irr_to_ht; K_signature_irr is hermitian_form_irr truncated.
Haven't figured out which is faster when.}
set bottom_verbose = false

set deform_support(Param p, int D) = KTypePol:
    to_ht(deform_support(p), D)

set two_rho_u_check(KGPElt Q) = vec:
    two_rho_check(Q.real_form) - two_rho_check(Q.Levi)

{The result of cohomological induction on the level of K}
set theta_induce_K(KTypePol QL, RealForm G) = KTypePol:
K_type_pol(sum(G, for c@pL in QL do c*theta_induce_standard(param(pL),G) od))

set theta_induce_signature(Param pL, RealForm G) = KTypePol:
    theta_induce_K(hermitian_form_irreducible(pL),G)

{Each (tauG,tauL) in output list is a Q-bottom layer K-type for p with (Q,pL) =
theta_stable_quasi_data(p). D is the largest height to which to compute
K-types. For now assume K connected.}
set min_bottom(Param p, int D) = [(KType,KType)]:
    let (Q,pL) = theta_stable_quasi_data(p), {x = p.x, lambda = p.lambda}
    	G = p.real_form
    then () = assert(height(p) <= D,"can't ask for min_bottom to D < height(p)")
    then L = Q.Levi
    then xcL = KGB(L,0)
    then xcG = embed_KGB(xcL, G), LKTG = LKTs(p)[0], LKTL = LKTs(pL)[0]
    then TRUCH = two_rho_u_check(Q)
    then bottom = TRUCH*(highest_weight(LKTG, xcG).mu)
    then too_many_taus = monomials(branch_std(p,D))
    { monomials(deform_support(p,D)) }
    then taus = for tau in too_many_taus
       	       do if {height(tau) > height(LKTG) and}
	       	      TRUCH*(highest_weight(tau, xcG).mu) = bottom
	       	  then [tau]
	  	  else []
	  	  fi
	  	od.##
    then shift = highest_weight(LKTG,xcG).mu - highest_weight(LKTL,xcL).mu
    in  for tau in taus
    	do (tau, K_types(K_highest_weight_from_K0_weight(xcL,
       	       	       highest_weight(tau,xcG).mu - shift))[0])
	od

{Same thing, computed from L. Each (tau,tauL) in output list is a bottom layer
K-type and the corr L\cap K-type. ASSUME K CONNECTED
List includes LKT pairs, so always nonempty.}
set min_L_bottom(Param p, int D) = [(KType,KType)]:
    let (Q,pL) = theta_stable_quasi_data(p), {x = p.x, lambda = p.lambda,}
    	G = p.real_form
    then L = Q.Levi
    then xcL = KGB(L,0)
    then xcG = embed_KGB(xcL, G), LKTG = LKTs(p)[0],
    	 LKTL = LKTs(pL)[0]
    then shift = K0_param(LKTG, xcG).lambda_minus_rho - K0_param(LKTL,xcL).lambda_minus_rho
    	 {highest_weight(LKTG,xcG).mu - highest_weight(LKTL,xcL).mu}
    then DL = D-height(p) + height(pL)
    then too_many_tauLs = monomials(branch_std(pL,DL)) {reps of L\cap K}
    then K0 = K_0(xcG), LK0 = K_0(xcL)
    then answer =  for tauL in too_many_tauLs
       	      	   do let weight = K0_param(tauL,xcL).lambda_minus_rho + shift
		   in if is_dominant(K0,weight)
		      then let tau = K_types(K_highest_weight_from_K0_weight(xcG, weight))[0]
		     	   in if height(tau) <= D then [(tau,tauL)] else [] fi
		       else []
	  	       fi
		    od.##
    in answer

{meant to be applied to quasisplit simple L}
set next_heights(RealForm L) = int:
    let N = if not is_quasisplit(L) then 0
    	    elif is_abelian(L) then 0
    	    else max(for p in all_parameters_gamma(L, null(L.rank))
    	     	     do next_heights(p, (semisimple_rank(L) + 3)\2)
	     	     od.##)
    	    fi
     in N {if not is_simple(L)
     	then (N+1)\2
	else N
	fi}

{allow NON-height 0 K-type entries}
set_type
[RF_sig_tables =
( ( -> int) real_form_size
  , ( -> ) clear
  , ( -> vec) K_type_size {number of LKTs for each real form}
  , ( -> vec) K_type_pol_size
  , ( -> vec) Param_size
  , ((KType, int) -> KTypePol) branch_entry {branch std to height}
{  , ((KType, int) ->) branch_append {branch std to height, don't report}}
  , ((Param,int) -> (KTypePol,KTypePol)) sig_entry {signature to height}
{  , ((Param,int) ->) append}
  , (int -> RealForm) real_form_index
  , (int, int -> int) branch_height {largest ht to which K type j on real form i has been branched}
  , (int, int -> int) sig_height {largest ht to which param j on real form i has had sig computed}
  , ( -> int) bottom_branch_time
  , ( -> int) bottom_sig_time
)
]

set make_RF_sig_tables () = RF_sig_tables:
(  let real_form_hash = make_RealForm_hash()
   then deltas = [mat]: [] {distinguished involution for each form}
   then param_hashes = [Param_hash] : [] {one for each real form}
   then K_type_hashes = [KType_hash] : [] {one for each real form; list of LKTs of params}
   then K_type_pol_hashes = [KTypePol_hash] : []  {one for each real form}
   then branches = [vec] : [] {one vec for each real form, of size #K types;
   		   	      ith entry is index of branching KTypePol for KType #i}
   then sigs = [[vec]]: [] {one [vec] for each real form, one vec for each Param}
   then branch_heights = [vec]: [] {one list for each real form; jth entry is vec with ith entry the height
   		       	 	   to which branch(param i) is known}
   then sig_heights = [vec]: [] {one list for each real form; jth entry is vec with ith entry the height
   		       	 	   to which sig(param i) is known}
   then bottom_branch_time = int: 0
   then bottom_sig_time = int: 0
   then clear() = void:
       let () = real_form_hash.clear()
       then () = deltas:=[]
       then () = param_hashes:=[]
       then () = K_type_hashes:=[]
       then () = K_type_pol_hashes := []
       then () = branches := []
       then () = sigs := []
       then () = branch_heights := []
       then () = sig_heights := []
       then () = bottom_branch_time := 0
       then () = bottom_sig_time := 0
       in ()
   then add_real_form(RealForm S) = int:
   	let RF = real_form_hash.size()
	then rf = real_form_hash.match(S)
	then () =  if rf = RF {haven't seen this real form before}
	     	   then deltas := (deltas next deltas:=[]) #S.distinguished_involution;
		   	param_hashes := (param_hashes next param_hashes:= []) #make_Param_hash();
		        K_type_hashes := (K_type_hashes next K_type_hashes:= []) #make_KType_hash();
		        K_type_pol_hashes := (K_type_pol_hashes next K_type_pol_hashes:= [])
		       	       	 	     #make_KTypePol_hash();
		        branches := (branches next branches:=[])#null(0);
		        sigs := (sigs next sigs := []) # [];
		        branch_heights := (branch_heights next branch_heights:=[])#null(0);
			sig_heights := (sig_heights next sig_heights:=[])#null(0)
		   fi
	 in rf
   then add_K_type(KType mu) = (int, int): {real form index, K type index}
   	let rf = add_real_form(mu.real_form)
	then KTYPENUM = K_type_hashes[rf].size()
	then ktypenum = K_type_hashes[rf].match(mu)
	then () = if ktypenum = KTYPENUM {haven't computed with mu before}
	     	  then let pol = 1*mu
	     	       then m = K_type_pol_hashes[rf].match(pol)
		       then () = branches[rf] #:= m
		       then () = branch_heights[rf] #:= height(mu)
		       then () = assert(real_form_hash.size() = #K_type_pol_hashes,"RF_sig_table damaged")
        	       then () = assert(real_form_hash.size() = #K_type_hashes,"RF_sig_table damaged")
		       then () = assert(real_form_hash.size() = #param_hashes,"RF_sig_table damaged")
		       then () = assert(#sigs[rf] = param_hashes[rf].size(), "RF_sig_table damaged")
		       then () = assert(#branches[rf] = K_type_hashes[rf].size(), "RF_sig_table damaged")
		       in ()
		  fi
	in (rf, ktypenum)
   then add_K_type(KType mu, int D) = (int, int, int): {this time add to height; D should be >= height(mu)}
   	let rf = add_real_form(mu.real_form)
	then KTYPENUM = K_type_hashes[rf].size()
	then ktypenum = K_type_hashes[rf].match(mu)
	then () = if ktypenum = KTYPENUM {haven't computed with mu before}
	     	  then let start_branch = elapsed_ms()
		       then pol = branch_std(mu,D)
	     	       then m = K_type_pol_hashes[rf].match(pol)
		       then () = bottom_branch_time +:= elapsed_ms() - start_branch
		       then () = branches[rf] #:= m
		       then () = branch_heights[rf] #:= D
		       then () = assert(real_form_hash.size() = #K_type_pol_hashes,"RF_sig_table damaged")
        	       then () = assert(real_form_hash.size() = #K_type_hashes,"RF_sig_table damaged")
		       then () = assert(real_form_hash.size() = #param_hashes,"RF_sig_table damaged")
		       then () = assert(#sigs[rf] = param_hashes[rf].size(), "RF_sig_table damaged")
		       then () = assert(#branches[rf] = K_type_hashes[rf].size(), "RF_sig_table damaged")
		       in ()
		   else {we've seen mu before}
		       if branch_heights[rf][ktypenum] < D
		       then let tempbranchhts = branch_heights[rf]
		       	    then tempbranches = branches[rf]
		       	    then start_branch = elapsed_ms()
		       	    then pol = branch_std(mu, D)
		       	    then () = bottom_branch_time +:= elapsed_ms() - start_branch
		       	    then m = K_type_pol_hashes[rf].match(pol)
		       	    then () = tempbranches[ktypenum]:=m
		       	    then () = tempbranchhts[ktypenum] :=  D
		       	    then () = branch_heights[rf] := tempbranchhts
			    then () = branches[rf] := tempbranches
		       	    in()
		        fi
		    fi
	in (rf, ktypenum, branches[rf][ktypenum])
   then add_param(Param p) = (int, int):
   	let  rf = add_real_form(p.real_form)
	then PNUM = param_hashes[rf].size()
	then pnum = param_hashes[rf].match(p)
	then () = if pnum = PNUM {haven't computed with p before}
	     	  then let (pos,neg) = if #LKTs(p) = 1
		       		       then (K_type_pol(p), 0*K_type_pol(p))
				       else let sig = convert_cform_hermitian(K_type_pol(finalize_extended(p*0, deltas[rf])))
				      	    in (sum(p.real_form, for c@tau in sig do let (a,) = %c in a*tau  od),
				               	sum(p.real_form, for c@tau in sig do let (,b) = %c in b*tau  od))
				       fi
		       then (pos_ind,neg_ind) = (K_type_pol_hashes[rf].match(pos), K_type_pol_hashes[rf].match(neg))
then () = sigs[rf] := if #sigs[rf] = 0 then [[pos_ind,neg_ind]]
		     	      	      	     else (sigs[rf] next sigs[rf] := [])# [pos_ind,neg_ind]
				      	     fi
		       then () = sig_heights[rf] #:= 0
		       then () = assert(real_form_hash.size() = #K_type_pol_hashes,"RF_sig_table damaged")
		       then () = assert(real_form_hash.size() = #param_hashes,"RF_sig_table damaged")
		       then () = assert(real_form_hash.size() = #branch_heights,"RF_sig_table damaged")
		       then () = assert(real_form_hash.size() = #sig_heights,"RF_sig_table damaged")
		       then () = assert(#sigs[rf] = param_hashes[rf].size(), "RF_sig_table damaged")
		       in ()
		  fi
	 in (rf,pnum)

   then add_param(Param p, int D) = (int, int, int, int):
   	let  rf = add_real_form(p.real_form)
	then PNUM = param_hashes[rf].size()
	then pnum = param_hashes[rf].match(p)
	then () = if pnum = PNUM {haven't computed with p before}
	     	  then let start_sig = elapsed_ms()
	     	       then (pos,neg) = K_signature_irr(p, D)
		       then () = bottom_sig_time +:= elapsed_ms() - start_sig
		       then (p,q) = (K_type_pol_hashes[rf].match(pos), K_type_pol_hashes[rf].match(neg))
		       then () = sigs[rf] := if #sigs[rf] = 0 then [[p,q]]
		     	      	      	     else (sigs[rf] next sigs[rf] := [])# [p,q]
				      	     fi
		       then () = sig_heights[rf] := (sig_heights[rf] next sig_heights[rf]:=[])#D
		       then () = assert(real_form_hash.size() = #K_type_pol_hashes,"RF_sig_table damaged")
		       then () = assert(real_form_hash.size() = #param_hashes,"RF_sig_table damaged")
		       then () = assert(real_form_hash.size() = #branch_heights,"RF_sig_table damaged")
		       then () = assert(#sigs[rf] = param_hashes[rf].size(), "RF_sig_table damaged")
		       in ()
		   else {we've seen p before}
		       if sig_heights[rf][pnum] < D
		       then let tempsigs = sigs[rf]
		       	    then tempsights = sig_heights[rf]
		       	    then start_sig = elapsed_ms()
		       	    then (pos,neg) = K_signature_irr(p, D)
		       	    then () = bottom_sig_time +:= elapsed_ms() - start_sig
		       	    then (pos_ind,neg_ind) = (K_type_pol_hashes[rf].match(pos), K_type_pol_hashes[rf].match(neg))
		       	    then () = tempsigs[pnum] :=  [pos_ind,neg_ind]
		       	    then () = tempsights[pnum]:=D
		       	    then () = sigs[rf]:=tempsigs
			    then () = sig_heights[rf] := tempsights
		       	    in()

		       fi
		   fi
	 in (rf,pnum, sigs[rf][pnum][0], sigs[rf][pnum][1])

   in
   ( ( -> int): { real_form_size } @int: real_form_hash.size()
   , ( -> ): {clear} clear
   , ( -> vec): {K_type_size} @vec: for hash in K_type_hashes do hash.size() od
   , ( -> vec): {K_type_pol_size} @vec: for hash in K_type_pol_hashes do hash.size() od
   , ( -> vec): {Param_size} @vec: for hash in param_hashes do hash.size() od
   , ((KType,int) -> KTypePol): {branch_entry} (KType mu, int D) KTypePol:
     begin
     	let (rf, ktypenum,m) = add_K_type(mu,D)
	in to_ht(K_type_pol_hashes[rf].index(m), D)
     end
   , ((Param,int) -> (KTypePol,KTypePol)): {sig_entry} (Param p, int D)
     (KTypePol,KTypePol):
     begin
	let (rf,pnum,pos_ind,neg_ind) = add_param(p,D)
	in (K_type_pol_hashes[rf].index(pos_ind), K_type_pol_hashes[rf].index(neg_ind))
     end
    , (int -> RealForm): {real_form_index} (int j): real_form_hash.index(j)
   , ((int, int) -> int): {branch_height} (int rf, int ktypenum): branch_heights[rf][ktypenum]
   , ((int, int) -> int): {sig_height} (int rf, int pnum): sig_heights[rf][pnum]
   , ( -> int): {bottom_branch_time} @int: bottom_branch_time
   , ( -> int): {bottom_sig_time} @int: bottom_sig_time
  )
)

{whether to use RF_sig_tables in bottom layer computation}
set RF_code = true

set rf_sig_tables = make_RF_sig_tables()

{If Q = LU is a parabolic represented by KGPElt (S,x), then S is the set of simple roots of L; so
the derived simple factors derLj of L have simple roots Sj partitioning S. Answer is [Sj]}
set simple_factor_root_partition(KGPElt Q) = [[int]]:
    let L = Q.Levi, G = Q.real_form
    in for Lj in simple_factors(L)
       do for alpha in Lj.simple_roots do root_index(G,alpha) od
       od
set mbfTime = int: 0 {time spent in min_bottom_factors}
{4 seconds in this for Sp(6,R) out of 10 seconds total}
set min_bottom_factors(KType mu) = ([[(KType, KType)]], [int]):
    let p = parameter(mu), start = elapsed_ms()
    then (Q,pL) = theta_stable_quasi_data(p), G = p.real_form, ProjK = projection_to_K_matrix(mu.inner_class)
    then SFRP = simple_factor_root_partition(Q)
    then muL = LKT(pL), L = Q.Levi
    then dermuLs = derived_factor_K_types2(muL) {each dermuLj is on a simple derived derLj}
    then derLs = derived_simple_factors(L)
    then DLjs = for derLj in derLs do next_heights(derLj) od
    then xcG = embed_KGB(KGB(L,0),G)
    then muwt=K0_param(mu,xcG).lambda_minus_rho {size is rank(K)}
    then K0 = K_0(xcG)
    then dertauLs = [[KType]]: {jth list on derived simple factor derLj}
    	 for dermuLj@j in dermuLs
	 do if RF_code {should use bottom_data}
	    then monomials(rf_sig_tables.branch_entry(dermuLj,DLjs[j]))
	    else monomials(branch(dermuLj, DLjs[j]))
	    fi
	 od
    then dertauLjshifts =
    	 for listj@j in dertauLs {list of derLj types}
    	 do let dermuLwtj = K0_param(listj[0]).lambda_minus_rho
	    in for dertauLj in listj
	       do K0_param(dertauLj).lambda_minus_rho - dermuLwtj {this is a wt for K on derLj}
	       od
	 od
    then tauwts = for shiftlist@j in dertauLjshifts
    	 	   do let Sj = SFRP[j]
		      in for dertauLjshift in shiftlist
    	 	      	 do muwt + ratvec_as_vec(sum(K0.rank, for xi@k in fundamental_coweights(derLs[j])
			      	       	       		      do ProjK*((dertauLjshift)*xi*G.simple_roots[Sj[k]])
							      od))
		      od
		   od
{then () = mbfTime +:= elapsed_ms() - start}{Sp(6): .84 secs to here}
    then LKdata = for listj@j in dertauLs
       	 	  do let taulist = tauwts[j]
		     in [(KType, KType)]: {meant to be list of pairs (tau, dertauLj) with
	     	      	       tau bottom layer for G, dertauLj corr LjK-type}
			for taujwt@m in taulist
			do if is_dominant(K0, taujwt)
  	             	   then [(K_types(K_highest_weight_from_K0_weight(xcG, taujwt))[0],
		   	    	 listj[m])]
	  	   	   else []
	  	    	   fi
	     		od.##
		   od
     {then () = mbfTime +:= elapsed_ms() - start}
     then helpful_js = for j:#LKdata
     	  	       do if #LKdata[j] > 1
		       	  then [j]
			  else []
			  fi
		       od.##
      then () = mbfTime +:= elapsed_ms() - start {Sp(6): 4.1 secs to here}
      in (for j in helpful_js do LKdata[j] od, helpful_js)
 
{table of bottom layer data indexed by KType}
set_type
[min_bottom_data =
( ( -> int) size
  , ( -> ) clear
  , (KType->([[(KType,KType)]], [int])) helpful_entry {subset of entry where list has more than one elt (so
    						      might detect nonunitarity), and the corr numbers of derLj
						      (among the derived simple factors of L}
  , (KType->int) G_min_height {largest height of a G K-type in helpful_entry; at least height(mu)}
  , (int -> KType) K_type_index
  , (int -> ([[(KType,KType)]],[int])) data_index
{  , ( -> int) min_bottom_factors_time}
  )
]

set make_min_bottom_data () = min_bottom_data:
(  let K_type_hash = make_KType_hash()
   then bottom_data = [([[(KType, KType)]], [int])]:[] {one helpful_entry for each K-type}
   then heights = vec: [] {one for each K-type}
   {then min_bottom_factors_time = int: 0}
   then clear() = void:
       let () = K_type_hash.clear()
       then () = bottom_data:=[]
       {then  () = bottom_factors_time := 0}
       in ()
   then enter(KType mu) = int:
       let M = K_type_hash.size()
       then m = K_type_hash.match(mu)
       then () = if m = M
	     	 then let start = elapsed_ms()
		      then mbf = min_bottom_factors(mu)
		      then () = bottom_data #:= mbf
		      then (lists,) = mbf
		      then () = heights#:= if #lists = 0 then height(mu)
		      	      		   else max(for list in lists
					   	    do max(for (tau,) in list
						       	   do height(tau)
							   od)
						    od)
					    fi
		      in () {bottom_factors_time +:= elapsed_ms() - start}
		 fi
        then () = assert(#bottom_data = K_type_hash.size(),"min_bottom_data damaged")
	then () = assert(#heights = #bottom_data,"min_bottom_data damaged")
	in m
   in
   ( ( -> int): { size } @int: K_type_hash.size()
   , ( -> ): {clear} clear
   , (KType->([[(KType,KType)]], [int])): {helpful_entry} (KType mu) ([[(KType,KType)]], [int]):
     begin
	let m = enter(mu)
	in bottom_data[m]
     end
   , (KType->int): {G_min_height} (KType mu) int:
     begin
	let m = enter(mu)
	in heights[m]
     end
   , (int -> KType): {K_type_index} (int j): K_type_hash.index(j)
   , (int -> ([[(KType,KType)]],[int])): {data_index} (int j) ([[(KType,KType)]],[int]): bottom_data[j]
  )
)

{use this constant one instead of carrying around bott_data}
set minBottomData = make_min_bottom_data()

set basis_lambda_differential_0(mat theta) = mat: {columns are weights lambda with (1+theta)lambda = 0,
    				   	    	  mod (1-theta)X^*}
    let E = eigen_lattice(theta, -1)
    then(A,v) = adapted_basis(in_lattice_basis(E,1-theta))
    in E*columns_with((int j):v[j] = 2,A)

set all_even_lambda_differential_0(RootDatum rd, mat theta) = [vec]:
    let basis = basis_lambda_differential_0(theta), (RSC,) = {real simple coroots}
    	      	simple_system_from_positive(real_poscoroots(rd,theta), real_posroots(rd,theta))
    in for v in all_0_1_vecs(n_columns(basis))
       do let C = basis*v
       	  in if all(for ac in RSC do is_even(ac*C) od)
	     then [C]
	     else []
	     fi
	od.##

{this time counter INCLUDES the time in bottom_factor, which is separately counted by bfTime. Correct
at printing in FPP_globalDirac.at}
set befmoreTime = int:0 {time spent with non-minimal parabolics}
set mbefTime = int: 0 {time spent in min_bottom_elim_factors}

set coh_ind_is_unitary(Param p) = bool:
    let {mu = LKTs(p)[0],} G = p.real_form
    then (Q,pL) = theta_stable_quasi_data(p)
    then gamma = pL.infinitesimal_character + G.rho - pL.real_form.rho
    then () = if not (is_dominant(G,gamma))
    	      then return is_unitary_hash(p)
	      fi {now induction is at least weakly good}
    then derpLjs = derived_factor_params2(pL) {one for each derived simple factor derLj}
    then test = all(for derpLj in derpLjs do is_unitary_hash(derpLj) od)
    then () = if all(for j in Q.S do gamma*G.simple_coroots[j] > 0 od) {is_good(pL,G)}
    	      then return test
	      fi
    then () = if test
    	      then return true
	      fi
    in is_unitary_hash(p)

{false guarantees not unitary, but true does not guarantee unitary}
set min_bottom_elim_factors(Param p) = bool:
    let start = elapsed_ms(), (,pL) = theta_stable_quasi_data(p)
    {then () = if is_unitary_hash(pL) then return true fi} {seems to slow things down}
    then derpLjs = derived_factor_params2(pL)
    then answers = [(->bool)]:
    	 for mu in LKTs(p)
    	 do let (helpful_data, helpful_js) = minBottomData.helpful_entry(mu)
	    then DG = minBottomData.G_min_height(mu)
	    {then () = mbefTime +:= elapsed_ms()-start}
    	    in if #helpful_js = 0
	       then return true
	       else let helpful_derpLjs = for j in helpful_js do derpLjs[j] od
    	 {one for each helpful derived simple factor derLj}
    	      	    then helpful_derxLjs = for derpLj in helpful_derpLjs do derpLj.x od
    		    then helpful_derLjs = for derpLj in helpful_derpLjs do derpLj.real_form od
    		    then helpful_DLs = for derLj in helpful_derLjs do next_heights(derLj) od
    		    {we wish these dermuLjs were LKTs of derpLj; may need to twist pLj to make this true??}
    		    then helpful_dermuLjs = for j@k in helpful_js
    	 		    		    do let (,dermuLj) = helpful_data[k][0] in dermuLj
			    		    od
      					    {check derpLj has dermuLj as a LKT}
		    {then () = mbefTime +:= elapsed_ms()-start}
    		    then () = for derpLj@k in helpful_derpLjs
		    	      do {assert(not K_type_pol(derpLj)[helpful_dermuLjs[k]].=,"oops, we needed a twist")}
			      	 if K_type_pol(derpLj)[helpful_dermuLjs[k]].=
		   	      	 then let twistk = all_even_lambda_differential_0(helpful_derLjs[k].dual,
					  	 -helpful_derxLjs[k].involution.^)
				      then () = if bottom_verbose then prints("need a twist at p = ",p) fi
		   		      then twistxLk = let Genx = KGB_elt_gen(helpful_derxLjs[k])
				      in for t@i in twistk
			   	      	 do let () = Genx.torus_factor +:= t {now need to force real}
			      	      	    in KGB(helpful_derLjs[k], KGB_elt(Genx).number)
			   	      	 od
		    	         then twistpLk = for yLk in twistxLk
		    	 	      	       	 do parameter(yLk, derpLj.lambda, derpLj.nu)
				    		 od
		    		 then m = first(for derqLk in twistpLk
		    	     	       	  	do K_type_pol(derqLk)[helpful_dermuLjs[k]] != 0
				       		od)
		    		  then () = if m < 0
		     	       	       	    then prints("x twisting failed at p = ",p,", k = ",k)
			       	  	    else helpful_derpLjs[k] := twistpLk[m]
			       	  	    fi
		    		  	    in ()
		    		  fi
			       od {now helpful_derpLjs are aligned with K-types in helpful_entry}
		     {time spent is all before here}
                     then multG = branch_irr(p,DG)
                     in @: all( [(->bool)]: {list of functions, one for each helpful factor Lj}
	       	     	  	        for k:#helpful_js
	       				do let (posLj, negLj) =
					       if RF_code
	    	      	    	    	       then rf_sig_tables.sig_entry(helpful_derpLjs[k], helpful_DLs[k])
			   	    	       else K_signature_irr(helpful_derpLjs[k],max(
							for (,tauLj) in helpful_data[k]
		       	  				 do height(tauLj)
		      	   				  od))
				    	       fi
	              			   then () = if posLj[helpful_dermuLjs[k]] = 0
		       	        	   	     then posLj := negLj
			        		     fi
	              			   then pairs = helpful_data[k]
	                  		   in @:all( [(->bool)]:
			     	    	      	     for(tauj, tauLj) in pairs[1:]
				    		     do @bool: int_part(posLj[tauLj]) >= int_part(multG[tauj])
				    		     od )
	       			        od)
		   fi
             od
	then answer = all(answers)
	then () = if not answer then attest_is_unitary(p,answer) fi
	then () = mbefTime +:= elapsed_ms()-start
        in answer

set min_bottom_elim_factors(Param p, KTypePol P) = bool:
    let start = elapsed_ms(), (,pL) = theta_stable_quasi_data(p)
    {then () = if is_unitary_hash(pL) then return true fi} {seems to slow things down}
    then derpLjs = derived_factor_params2(pL)
    then answers = [(->bool)]:
    	 for mu in LKTs(p)
    	 do let (helpful_data, helpful_js) = minBottomData.helpful_entry(mu)
	    then DG = minBottomData.G_min_height(mu)
	    {then () = mbefTime +:= elapsed_ms()-start}
    	    in if #helpful_js = 0
	       then return true
	       else let helpful_derpLjs = for j in helpful_js do derpLjs[j] od
    	 {one for each helpful derived simple factor derLj}
    	      	    then helpful_derxLjs = for derpLj in helpful_derpLjs do derpLj.x od
    		    then helpful_derLjs = for derpLj in helpful_derpLjs do derpLj.real_form od
    		    then helpful_DLs = for derLj in helpful_derLjs do next_heights(derLj) od
    		    {we wish these dermuLjs were LKTs of derpLj; may need to twist pLj to make this true??}
    		    then helpful_dermuLjs = for j@k in helpful_js
    	 		    		    do let (,dermuLj) = helpful_data[k][0] in dermuLj
			    		    od
      					    {check derpLj has dermuLj as a LKT}
		    {then () = mbefTime +:= elapsed_ms()-start}
    		    then () = for derpLj@k in helpful_derpLjs
		    	      do {assert(not K_type_pol(derpLj)[helpful_dermuLjs[k]].=, "oops, we needed a twist")}
		   	      	  if K_type_pol(derpLj)[helpful_dermuLjs[k]].=
				  then let twistk = all_even_lambda_differential_0(helpful_derLjs[k].dual,
					  	 -helpful_derxLjs[k].involution.^)
				      then () = if bottom_verbose then prints("need a twist at p = ",p) fi
		   		      then twistxLk = let Genx = KGB_elt_gen(helpful_derxLjs[k])
				      in for t@i in twistk
			   	      	 do let () = Genx.torus_factor +:= t {now need to force real}
			      	      	    in KGB(helpful_derLjs[k], KGB_elt(Genx).number)
			   	      	 od
		    	         then twistpLk = for yLk in twistxLk
		    	 	      	       	 do parameter(yLk, derpLj.lambda, derpLj.nu)
				    		 od
		    		 then m = first(for derqLk in twistpLk
		    	     	       	  	do K_type_pol(derqLk)[helpful_dermuLjs[k]] != 0
				       		od)
		    		  then () = if m < 0
		     	       	       	    then prints("x twisting failed at p = ",p,", k = ",k)
			       	  	    else helpful_derpLjs[k] := twistpLk[m]
			       	  	    fi
		    		  	    in ()
		    		  fi
			       od {now helpful_derpLjs are aligned with K-types in helpful_entry}
		     {time spent is all before here}
                     then multG = branch_std(P,DG)
                     in @: all( [(->bool)]: {list of functions, one for each helpful factor Lj}
	       	     	  	        for k:#helpful_js
	       				do let (posLj, negLj) =
					       if RF_code
	    	      	    	    	       then rf_sig_tables.sig_entry(helpful_derpLjs[k], helpful_DLs[k])
			   	    	       else K_signature_irr(helpful_derpLjs[k],max(
							for (,tauLj) in helpful_data[k]
		       	  				 do height(tauLj)
		      	   				  od))
				    	       fi
	              			   then () = if posLj[helpful_dermuLjs[k]] = 0
		       	        	   	     then posLj := negLj
			        		     fi
	              			   then pairs = helpful_data[k]
	                  		   in @:all( [(->bool)]:
			     	    	      	     for(tauj, tauLj) in pairs[1:]
				    		     do @bool: int_part(posLj[tauLj]) >= int_part(multG[tauj])
				    		     od )
	       			        od )
		   fi
             od
	then answer = all(answers)
	then () = if not answer then attest_is_unitary(p,answer) fi
	then () = mbefTime +:= elapsed_ms()-start
        in answer

set min_bottom_test_factors(Param p) = bool:
    if not min_bottom_elim_factors(p)
    then false
    else is_unitary_hash(p)
    fi

{set min_bottom_test_factors(Param p,[[(KType,KType)]] helpful_data, [int] helpful_js, KTypePol P) = bool:
    if not min_bottom_elim_factors(p, helpful_data, helpful_js, P)
    then return false
    else is_unitary_hash(p)
    fi}

set min_bottom_test_factors(Param p, KTypePol P) = bool:
    if not min_bottom_elim_factors(p, P)
    then return false
    else is_unitary_hash(p)
    fi

set bfTime = int: 0
{dropped "min" from name, because Q need not be smallest. K-types are found on L, then lifted to G.}
{Important to make sure tau's have height at most D.}
set bottom_factors(KType mu, KGPElt Q, int D) = [[(KType, KType)]]:
    let p = parameter(mu), Dshift = D - height(mu), start = elapsed_ms()
    then (Q0,pL0) = theta_stable_quasi_data(p), G = p.real_form, L = Q.Levi
    then pL = first_param(theta_induce_standard(pL0,L)), SFRP = simple_factor_root_partition(Q)
    then muL = LKT(pL)
    then dermuLs = derived_factor_K_types2(muL) {each dermuLj is on a simple derived derLj}
    then DLjs = for dermuLj in dermuLs do height(dermuLj) + Dshift od
    then derLs = derived_simple_factors(L) {DERIVED simple factors}
    then xcG = embed_KGB(KGB(L,0),G)
    then K0 = K_0(xcG), ProjK = projection_to_K_matrix(mu.inner_class)
    then muwt = K0_param(mu,xcG).lambda_minus_rho
    then dertauLs = [[KType]]: {jth list on derived simple factor derLj}
    	 for dermuLj@j in dermuLs
	 do if RF_code
	    then monomials(rf_sig_tables.branch_entry(dermuLj,height(dermuLj)+Dshift))
	    else monomials(branch(dermuLj,height(dermuLj)+Dshift ))
	    fi
	 od
    then dertauLjshifts =
         for listj@j in dertauLs {list of derLj types}
         do let dermuLwtj = K0_param(listj[0]).lambda_minus_rho {highest weight}
            in for dertauLj in listj
               do K0_param(dertauLj).lambda_minus_rho - dermuLwtj {this is a wt for K on derLj}
               od
         od
    then tauwts = for shiftlist@j in dertauLjshifts
                   do let Sj = SFRP[j]
                      in for dertauLjshift in shiftlist
                         do muwt + ratvec_as_vec(sum(K0.rank, for xi@k in fundamental_coweights(derLs[j])
                                                              do ProjK*((dertauLjshift)*xi*G.simple_roots[Sj[k]])
                                                              od))
                      od
                   od
    then () = bfTime+:= elapsed_ms() - start
    in for listj@j in dertauLs
       do let taulist = tauwts[j]
       	  in [(KType, KType)]: {meant to be list of pairs (tau, dertauLj) with
                               tau bottom layer for G, dertauLj corr LjK-type}
             for taujwt@m in taulist
             do if is_dominant(K0, taujwt) {MAY NOT BE CORRECT HEIGHT!}
                then let tauj = K_types(K_highest_weight_from_K0_weight(xcG, taujwt))[0]
		     in if height(tauj) <= D
		     	then [(tauj, listj[m])]
			else []
			fi
                else []
                fi
             od.##
         od

{false guarantees not unitary, but true does not guarantee unitary}
{LKdata[j] is [(tauj,tauLj)]: tauLj is an Lj\cap K-type inducing to a bottom layer tauj of p.}
set bottom_elim_factors(Param p, KGPElt Q, [[(KType,KType)]] LKdata) = bool:
    let start = elapsed_ms(), {answers = for k:#LKdata do false od,}
    	(,pL0) = theta_stable_quasi_data(p), L = Q.Levi
    then (mu,) = LKdata[0][0]
    then () = if K_type_pol(p)[mu] = 0
       	      then return prints("mu isn't a LKT of p"); true
       	      fi
    then () = if sum(for pairs in LKdata do #pairs od) = #LKdata
    	      then return true
	      fi
    then pL = first_param(theta_induce_standard(pL0,L))
    {then () = if is_unitary_hash(pL) then return true fi}{seems to slow things}
    then derpLjs = derived_factor_params2(pL) {one for each derived simple factor derLj}
    then badjs = {#(#derpLjs)}
    	       	 for derpLj@j in derpLjs
    	       	 do if is_unitary_hash(derpLj)
		    then []
		    else [j]
		    fi
		 od.##
    then () = if #badjs = 0 then return true fi
    then badderpLjs = for j in badjs do derpLjs[j] od
    then badderxLjs = for badderpLj in badderpLjs do badderpLj.x od
    then badderLjs = for badderpLj in badderpLjs do badderpLj.real_form od
    {we wish these dermuLjs were LKTs of derpLj; need to twist derpLj to make this true.}
    then baddermuLjs = for j in badjs
    	 	       do let (,muLj) = LKdata[j][0] in muLj od
      {check badderpLj has baddermuLj as a LKT}
    then () = for badderpLj@k in badderpLjs
      	      	do {assert(not K_type_pol(badderpLj)[baddermuLjs[k]].=,"oops, we needed a twist")}
		   if K_type_pol(badderpLj)[baddermuLjs[k]].=
		   then let twistk = all_even_lambda_differential_0(badderLjs[k].dual, - badderxLjs[k].involution.^)
		   	then () = if bottom_verbose then prints("twisting derpLj needed at p = ",p, ", j = ",badjs[k]) fi
		   	then twistxLs = let Genx = KGB_elt_gen(badderxLjs[k])
				      	in for t@i in twistk
			   	      	   do let () = Genx.torus_factor +:= t
					      {need to force real form}
			      	      	      in KGB(badderpLj.real_form, KGB_elt(Genx).number) 
			   	      	   od
		    	then twistbadderpLks = for yLk in twistxLs
		    	 	      	do parameter(yLk, badderpLj.lambda, badderpLj.nu)
				    	od
		    	then m = first(for badderqLk in twistbadderpLks
		    	     	       do K_type_pol(badderqLk)[baddermuLjs[k]] != 0
				       od)
		    	then () = if m < 0
		     	       	  then prints("x twisting failed at p = ",p,", k = ",k)
			       	  else badderpLjs[k] := twistbadderpLks[m]
			       	  fi
		    	in ()
		    fi
		od
       then DG = max(for j in badjs
       	    	     do max(for (tauj,) in LKdata[j]
			    do height(tauj)
			    od)
		     od)
       then DLs = for j in badjs
       	    	  do max(for (,tauLj) in LKdata[j]
		     	 do height(tauLj)
			 od)
		  od
       then multG = branch_irr(p,DG)
       then result = all( [(->bool)]: {list of functions, one for each factor Lj}
	       for j@k in badjs
	       do
	       let (posLj, negLj) =
	       	   if RF_code
		   then rf_sig_tables.sig_entry(badderpLjs[k], DLs[k])
		   else K_signature_irr(badderpLjs[k], DLs[k])
		   fi
	       then () = if posLj[baddermuLjs[j]] = 0
		       	 then posLj := negLj
			 fi
	       in @:all( [(->bool)]:
			for(tauj, tauLj) in LKdata[j][1:]
			do {prints(posLj[tauLj]," ",multG[tauj]);}
			@bool: int_part(posLj[tauLj]) >= int_part(multG[tauj])
			od )
	       od )
        then () = if not result then attest_is_unitary(p,result) fi
	then () = {mbefTime} befmoreTime +:= elapsed_ms()-start
	in result

{false guarantees not unitary, but true does not guarantee unitary}
{Here P K-character of p to heights of pairs, NOT BRANCH!}
{LKdata refers to ONE LKT of p}
set bottom_elim_factors(Param p, KGPElt Q, [[(KType,KType)]] LKdata, KTypePol P) = bool:
    let start = elapsed_ms(), {answers = for k:#LKdata do false od,}
    	(,pL0) = theta_stable_quasi_data(p)
    then (mu,) = LKdata[0][0], L =Q.Levi
    then () = if K_type_pol(p)[mu] = 0
       	      then return prints("mu isn't a LKT of p"); true
       	      fi
    then () = if sum(for pairs in LKdata do #pairs od) = #LKdata
    	      then return true
	      fi
    then pL = first_param(theta_induce_standard(pL0,L))
    {then () = if is_unitary_hash(pL) then return true fi}{seems to slow things down}
    then derpLjs = derived_factor_params2(pL) {one for each derived simple factor derLj}
    then badjs = {#(#derpLjs)}
		 for derpLj@j in derpLjs
    	       	 do if is_unitary_hash(derpLj)
		    then []
		    else [j]
		    fi
		 od.##
    {then () = if #badjs < #LKdata then prints(#LKdata, "  ",#badjs) fi}
    then () = if #badjs = 0 then return true fi
    then badderpLjs = for j in badjs do derpLjs[j] od
    then badderxLjs = for badderpLj in badderpLjs do badderpLj.x od
    then badderLjs = for badderpLj in badderpLjs do badderpLj.real_form od
    {we wish these dermuLjs were LKTs of derpLj; need to twist derpLj to make this true.}
    then baddermuLjs = for j in badjs
    	 	       do let (,muLj) = LKdata[j][0] in muLj od
      {check badderpLj has baddermuLj as a LKT}
    then () = for badderpLj@k in badderpLjs
      	      	do {assert(not K_type_pol(badderpLj)[baddermuLjs[k]].=, "oops, we needed a twist")}
		   if K_type_pol(badderpLj)[baddermuLjs[k]].=
		   then let twistk = all_even_lambda_differential_0(badderLjs[k].dual, - badderxLjs[k].involution.^)
		   	then () = if bottom_verbose then prints("twisting derpLj needed at p = ",p, ", j = ",badjs[k]) fi
		   	then twistxLs = let Genx = KGB_elt_gen(badderxLjs[k])
				      	in for t@i in twistk
			   	      	   do let () = Genx.torus_factor +:= t
					      {need to force real form}
			      	      	      in KGB(badderpLj.real_form, KGB_elt(Genx).number) 
			   	      	   od
		    	then twistbadderpLks = for yLk in twistxLs
		    	 	      	do parameter(yLk, badderpLj.lambda, badderpLj.nu)
				    	od
		    	then m = first(for badderqLk in twistbadderpLks
		    	     	       do K_type_pol(badderqLk)[baddermuLjs[k]] != 0
				       od)
		    	then () = if m < 0
		     	       	  then prints("x twisting failed at p = ",p,", k = ",k)
			       	  else badderpLjs[k] := twistbadderpLks[m]
			       	  fi
		    	in ()
		    fi
		od
      { then () = for derpLj@j in derpLjs
      	      	do assert(K_type_pol(derpLj)[dermuLjs[j]] != 0, "derpLj does not have LKT dermuLj")
		od }
     then DG = max(for j in badjs
       	    	     do max(for (tauj,) in LKdata[j]
			    do height(tauj)
			    od)
		     od)
     then DLs = for j in badjs {pairs in LKdata}
     	      	do max(for (,tauLj) in LKdata[j] do height(tauLj) od)
		od
     then Pmult = branch_std(P, DG)
     then result = all( [(->bool)]: {list of functions, one for each factor Lj}
	       for j@k in badjs {pairs@j in LKdata} {this is automatically true if derpLj is unitary, so omit those}
	       do 
	       let pairs = LKdata[j]
	       then (posLj, negLj) = if RF_code
	    	      	    	     then rf_sig_tables.sig_entry(badderpLjs[k], DLs[k])
			   	     else K_signature_irr(badderpLjs[k], DLs[k])
				     fi
	       then () = if posLj[baddermuLjs[k]] = 0
		       	 then posLj := negLj
			 fi
	       in @:all( [(->bool)]:
			for(tauj, tauLj) in pairs[1:]
			do {prints(posLj[tauLj]," ",multG[tauj]);}
			@bool: int_part(posLj[tauLj]) >= int_part(Pmult[tauj])
			od )
	       od )
     then () = if not result then attest_is_unitary(p,result) fi
     then () = {mbefTime} befmoreTime +:= elapsed_ms() - start
     in result

{permutation of the simple roots defined by delta}
set delta_on_simple(InnerClass ic) = [int]:
    let r = ic.semisimple_rank, SR = ic.simple_roots, delta = ic.distinguished_involution
    in for i:r do first(for j:r do SR[i] = delta*SR[j] od) od

{all theta-stable parabolics containing a given one}
set larger_Ps(KGPElt Q) = [KGPElt]:
    let S= Q.S, x = Q.x, L = Q.Levi
    then xL = inverse_embed_KGB(x,L), G = x.real_form
    then Sc = complement(G.semisimple_rank,S), DOS = delta_on_simple(G),
    	 delta = G.distinguished_involution
    then fixc = for a in Sc
    	      	do if DOS[a] = a
		   then [a]
		   else []
		   fi
		od.##
    then pairsc = for a in Sc
    	 	  do if DOS[a] > a
		     then [[a,DOS[a]]]
		     else []
		     fi
		  od.##
    then PSfixc = power_set(#fixc), PSpairsc = power_set(#pairsc)
    then Snew = S
    in for A in PSfixc
       do for B in PSpairsc
       	  do (S## for i in A
	     	 do fixc[i]
		 od
	      ## for j in B
	      	 do pairsc[j]
		 od.##.sort , x)
	  od
       od.##

{for each pair (MN,pM), p is cohomologically induced from pM. First
pair is theta_stable_quasi_data(p), last is (G,p).}
set larger_Qps(Param p) = [(KGPElt,Param)]:
    let (Q,pL) = theta_stable_quasi_data(p)
    then LPs = larger_Ps(Q)
    in for P in LPs
       do let M = P.Levi
       	  in (P, first_param(theta_induce_standard(pL,M)))
       od

{these are the maximal proper theta-stable Levis from which p is naturally cohom induced, with inducing reps}
set max_Qs(KGPElt Q) = [KGPElt]:
    let S= Q.S, x = Q.x, L = Q.Levi
    then xL = inverse_embed_KGB(x,L), G = x.real_form
    then Sc = complement(G.semisimple_rank,S), DOS = delta_on_simple(G),
    	 delta = G.distinguished_involution
    then fixc = for a in Sc
    	      	do if DOS[a] = a
		   then [a]
		   else []
		   fi
		od.##
    then pairsc = for a in Sc
    	 	  do if DOS[a] > a
		     then [[a,DOS[a]]]
		     else []
		     fi
		  od.##
    in [KGPElt]: for a in fixc do (complement(G.semisimple_rank, [a]),x) od##
	 	 for v in pairsc do (complement(G.semisimple_rank,v), x) od


{these are the maximal proper theta-stable Levis from which p is naturally cohom induced, with inducing reps}
set max_Qps(Param p, [KGPElt] maxQs) = [(KGPElt,Param)]:
    let (Q0,pL0) = theta_stable_quasi_data(p)
    in for Q in maxQs
       do (Q,first_param(theta_induce_standard(pL0,Q.Levi)))
       od

set max_Qps(Param p) = [(KGPElt,Param)]:
    let (Q0,pL0) = theta_stable_quasi_data(p)
    then maxQs = max_Qs(Q0)
    in for Q in maxQs
       do (Q,first_param(theta_induce_standard(pL0,Q.Levi)))
       od

{returns is_good, is_weakly_good, is_weakly_fair for each maximal Q from which p is coh ind}
set max_goodness(Param p) = [(bool, bool, bool)]:
    let maxQps = max_Qps(p), G = p.real_form
    in for (Q,pL) in max_Qps(p)
       do let L = pL.real_form
       	  then gamma = pL.infinitesimal_character + G.rho - L.rho
       	  then gamma0 = gamma - sum(G.rank, for xi@j in L.fundamental_weights
    	 	  	  	       do (simple_coroots(L)[j]*gamma)*xi od)
       	  in (is_dominant(G,gamma) and is_regular(G,gamma), is_dominant(G,gamma), is_dominant(G,gamma0))
       od

{For the irreducible p, lists the K-types to height D which are bottom layer for some proper parabolic;
the smallest such parabolic is defined by the simple coroots in S. S always contains the coroots S0
vanishing on p.d_lambda.}
set bottom_K_types(KType mu, int D) = [(KType,[int])]:
    let q = param(mu)
    then (Q0,) = theta_stable_quasi_data(q), G = mu.real_form
    then L0 = Q0.Levi, (S0,) = Q0
    then S0c = complement(G.semisimple_rank,S0), DOS = delta_on_simple(G),
    	 delta = G.distinguished_involution
    then fixc = for a in S0c {type [int]}
    	      	do if DOS[a] = a
		   then [a]
		   else []
		   fi
		od.##
    then pairsc = for a in S0c {type [[int]]}
    	 	  do if DOS[a] > a
		     then [[a,DOS[a]]]
		     else []
		     fi
		  od.##
    then fixc_cowts = mat:
    	 if #fixc = 0
	 then null(rank(G),0)
    	 else for a in fixc
    	      do G.fundamental_coweights[a].numer
	      od
	 fi
    then pairsc_cowts = mat:
    	 if #pairsc = 0
	 then null(rank(G),0)
    	 else for pair in pairsc
    	      do sum(G.rank, for a in pair do G.fundamental_coweights[a].numer od)
              od
	 fi
    then xcL0 = KGB(L0,0)
    then xcG0 = embed_KGB(xcL0, G)
    then too_many_taus = monomials(branch_irr(q,D))
    then hwt0 = highest_weight(too_many_taus[0],xcG0).mu
    then too_many_shifts = for tau in too_many_taus
    	 	       	 do highest_weight(tau,xcG0).mu - hwt0
			 od
    then too_many_Ss = [[int]]:
    	 for shift in too_many_shifts
	 do S0## (for col@i in fixc_cowts
		  do if (shift*col).= then [] else [fixc[i]] fi
		  od.##)
	      ## (for col@j in pairsc_cowts
		  do if (shift*col).= then [] else pairsc[j] fi
		  od.##)
         od  {these are the coroots needed to make a parabolic
		       	    for which corr tau is bottom layer}
    in for tau@k in too_many_taus
       do if #too_many_Ss[k]= G.semisimple_rank then []
	  else [(tau, too_many_Ss[k].sort)]
	  fi
       od.##

{cands is meant to be a list of K-types above mu that are bottom layer
for parabolic defined by S}
set newQs(KType mu, [(KType,[int])] cands) = [KGPElt]:
    let x = param(mu).x
    then max_size = max(for (,S) in cands do #S od)
    then min_size = min(for (,S) in cands do #S od)
    then cands_by_size = [[int]]:
    	 for size: max_size+1 - min_size from min_size
       	 do for (,S) in cands
	    do if #S= size then [S] else [] fi
	    od.##.sort_u
       	 od.##{zeroth term is guaranteed to be Smin, defined by mu.d_lambda}
    in for S in cands_by_size
       do KGPElt: (S,x)
       od

set newQs(KType mu, int D) = [KGPElt]:
    let cands = bottom_K_types(mu,D)
    in newQs(mu, cands)

set newQs(Param p, int D) = [KGPElt]:
    let cands = ## for mu in LKTs(p)
    	      	   do bottom_K_types(mu,D)
		   od
    then max_size = max(for (,S) in cands do #S od)
    then min_size = max(min(for (,S) in cands do #S od),1) {max prevents including Borel}
    then cands_by_size = [[int]]:
    	 for size: max_size+1 - min_size from min_size
       	 do for (,S) in cands
	    do if #S= size then [S] else [] fi
	    od.##.sort_u
       	 od.##{zeroth term is guaranteed to be Smin, defined by mu.d_lambda}
    then x = LKTs(p)[0].x
    in for S in cands_by_size
       do KGPElt: (S,x)
       od

{For the irreducible p, lists the K-types to height D which are bottom layer for some proper parabolic;
the smallest such parabolic is defined by the simple coroots in S. S always contains the coroots S0
vanishing on p.d_lambda.}
set bottom_K_types(Param p, int D) = [(KType,[int])]:
    let q = first_param(finalize(p))
    then (Q0,) = theta_stable_quasi_data(q), {x = p.x, lambda = p.lambda}
    	G = p.real_form
    then L0 = Q0.Levi, (S0,) = Q0
    then S0c = complement(G.semisimple_rank,S0), DOS = delta_on_simple(G),
    	 delta = G.distinguished_involution
    then fixc = for a in S0c {type [int]}
    	      	do if DOS[a] = a
		   then [a]
		   else []
		   fi
		od.##
    then pairsc = for a in S0c {type [[int]]}
    	 	  do if DOS[a] > a
		     then [[a,DOS[a]]]
		     else []
		     fi
		  od.##
    then fixc_cowts = mat:
    	 if #fixc = 0
	 then null(rank(G),0)
    	 else for a in fixc
    	      do G.fundamental_coweights[a].numer
	      od
	 fi
    then pairsc_cowts = mat:
    	 if #pairsc = 0
	 then null(rank(G),0)
    	 else for pair in pairsc
    	      do sum(G.rank, for a in pair do G.fundamental_coweights[a].numer od)
              od
	 fi
    then xcL0 = KGB(L0,0)
    then xcG0 = embed_KGB(xcL0, G)
    then too_many_taus = monomials(branch_irr(q,D))
    then hwt0 = highest_weight(too_many_taus[0],xcG0).mu
    then too_many_shifts = for mu in too_many_taus
    	 	       	 do highest_weight(mu,xcG0).mu - hwt0
			 od
    then too_many_Ss = [[int]]:
    	 for shift in too_many_shifts
	 do S0## (for col@i in fixc_cowts
		  do if (shift*col).= then [] else [fixc[i]] fi
		  od.##)
	      ## (for col@j in pairsc_cowts
		  do if (shift*col).= then [] else pairsc[j] fi
		  od.##)
         od  {these are the coroots needed to make a parabolic
		       	    for which corr tau is bottom layer}
    in for tau@k in too_many_taus
       do if #too_many_Ss[k]= G.semisimple_rank then []
	  else [(tau, too_many_Ss[k])]
	  fi
       od.##

{returns is_good, is_weakly_good, is_weakly_fair}
set goodness(Param p, KGPElt Q) = (bool, bool, bool):
    let (P0,pL0) = theta_stable_quasi_data(p), L = Q.Levi, G = p.real_form
    then pL = first_param(theta_induce_standard(pL0,L))
    then gamma = pL.infinitesimal_character + G.rho - pL.real_form.rho
    then gamma0 = gamma - sum(G.rank, for xi@j in L.fundamental_weights
    	 	  	  	      do (simple_coroots(L)[j]*gamma)*xi
				      od)
    in (is_dominant(G,gamma) and is_regular(G,gamma), is_dominant(G,gamma), is_dominant(G,gamma0))

{whether to use _more versions of bottom layer tests for unitarity}
set more_flag = false

{meant to hold nonunitary reps identified first by more}
set more_good_hash = make_Param_hash()

{D is meant to be max(height(tau) for tau in BKT. nQs are the parabolics where bottom layer might help.}
{nQs is meant to be new_Qs(), P the K-character of P}
{meant to be applied AFTER min_bottom_elim_factors, so skip minimal nQ}
{need to be sure nQs does not include a Borel}
set bottom_elim_factors_more(Param p, [KGPElt] nQs, int D, KTypePol P)= bool:
    let start =  elapsed_ms(), G=p.real_form
    then three_bools = max_goodness(p), maxQps = max_Qps(p), R = more_good_hash.size()
    {then () = if #nQs > 1}
    then () = if not all(for Q in nQs{[1:]}
    	    	      	 do all(for mu in LKTs(p)
			      	do @:bottom_elim_factors(p, Q, bottom_factors(mu,Q,D), P)
				od)
		         od) {this seems to be quite rare??}
	       then let MG = more_good_hash.size()
		    then mg = more_good_hash.match(p)
		    then () = if bottom_verbose and mg=MG
			      then prints("at p = ",p,", more helped!")
			      fi
                    then () = attest_is_unitary(p,false)
		    then () = befmoreTime +:= elapsed_ms() - start
		    in return false
	       fi
     then good = first(for (g,,) in three_bools do g od)
     then () = if good>=0
    	       then let (,pL) =  maxQps[good]
	      	    then () = if bottom_verbose then prints("p = ",p," is a good one!") fi
                    then answer = is_unitary_hash(pL)
                    then () = attest_is_unitary(p,answer)
		    then () = befmoreTime +:= elapsed_ms() - start
                    in return answer
	      	fi
     then wk_good = first(for (,wg,) in three_bools do wg = true od)
     then () = if wk_good >= 0 {form on p is induced from form on L}
    	       then let (,pL) = maxQps[wk_good]
	       	    then HG = theta_induce_signature(pL,G), Ip = theta_induce_irreducible(pL,G)
		    then G_pure = is_pure(HG)
		    in  befmoreTime +:= elapsed_ms() - start;
                        attest_is_unitary(p, G_pure);
			return G_pure
	        fi
     {then () = if bottom_verbose then prints("sorry, don't know") fi}
     then () = befmoreTime +:= elapsed_ms() - start
     in true

set bottom_elim_factors_more(Param p, [KGPElt] nQs, int D) = bool:
    let P = to_ht(K_type_pol(character_formula(p)),D)
    in  bottom_elim_factors_more(p, nQs, D, P)

set bottom_elim_factors_more(Param p, int D, KTypePol P) = bool:
    let nQs = newQs(p, D)
    in  bottom_elim_factors_more(p, nQs, D, P)

set bottom_elim_factors_more(Param p, int D) = bool:
    let nQs = newQs(p, D)
    then P = to_ht(K_type_pol(character_formula(p)),D)
    in  bottom_elim_factors_more(p, nQs, D, P)

{P is K-character at least to appropriate height, NOT branch!. Assume already eliminated using minimal P0}
set bottom_test_factors_more(Param p, [KGPElt] nQs, int D, KTypePol P) = bool:
    if not more_flag
    then is_unitary_hash(p) {min_bottom_test_factors(p,P)}
    else
    let start = elapsed_ms(), G = p.real_form
    then () = if not all(for Q in nQs{[1:]}
    	    	      	 do @:all(for mu in LKTs(p)
			      	do @:bottom_elim_factors(p, Q, bottom_factors(mu,Q,D), P)
				od)
		         od)
	       then let MG = more_good_hash.size()
		    then mg = more_good_hash.match(p)
		    then () = if bottom_verbose and mg=MG
			      then prints("at p = ",p,", more helped!")
			      fi
		    then () = attest_is_unitary(p,false)
		    then () = befmoreTime +:= elapsed_ms() - start
		    in return false
	       fi
    {now either bottom layer has succeeded, or it can't help}
    then three_bools = max_goodness(p), maxQps = max_Qps(p)
    then good = first(for (g,,) in three_bools do g od)
    then () = if good>=0
    	      then let (,pL) =  maxQps[good]
	      	   then () = if bottom_verbose then prints("p = ",p," is a good one!") fi
		   then answer = is_unitary_hash(pL)
		   then () = attest_is_unitary(p,answer)
		   in return answer
	      fi
    then wk_good = first(for (,wg,) in three_bools do wg = true od)
    then () = if wk_good >= 0
    	      then let (,pL) = maxQps[wk_good]
	       	   then HG = theta_induce_signature(pL,G), Ip = theta_induce_irreducible(pL,G)
		   then G_pure = is_pure(HG)
		   in befmoreTime +:= elapsed_ms() - start;
		      attest_is_unitary(p,G_pure);
		      return G_pure
	      fi
     then () = if bottom_verbose then prints("sorry, doing is_unitary") fi
     then () = befmoreTime+:= elapsed_ms() - start
     in is_unitary_hash(p)
     fi

set bottom_test_factors_more(Param p, [KGPElt] nQs, int D) = bool:
    if not more_flag
    then is_unitary_hash(p) {min_bottom_test_factors(p)}
    else
    let P = K_type_pol(character_formula(p))
    in bottom_test_factors_more(p, nQs, D, P)
    fi
