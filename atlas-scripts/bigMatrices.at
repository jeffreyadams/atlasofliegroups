<extended_misc.at { for twist@(mat,Param) }
<polynomial.at { for type i_poly }
<KL_polynomial_matrices.at { for KL_P_polynomials@[Param] }

{ The purpose of this file is to do extended group computations working with
  all parameters for the extended group, namely two elements for every
  $\delta$-fixed parameter, and one element for every 2-element $\delta$ orbit
}

set fixed_subset ([Param] B,mat delta) = [Param]:
  ## for p in B do if is_fixed(delta,p) then [p] else [] fi od

set indices_subset ([Param] subset,  [Param] whole) = [int]:
{ if both sets were ordered, we could do:
  let i=0, n=#whole in
  for p in subset do while i<n and whole[i]!=p do i+:=1 od; i od
}
  for p in subset do find(whole,p) od

{ extract one index from each delta-orbit }
set delta_orbit_reps ([Param] B,mat delta) = [int]:
## for p@i in B
   do let q=twist(delta,p) in
      if p=q then [i]
      else let j=find(B,q)  in
{     assert(j>=0, "Block not fixed by delta"); }
         if j.< or i<j then [i] else [] fi
      fi
   od

{complete_indices(B,delta)=[(0,1),(0,-1),...,(k,0),...]
 B[i] delta-fixed contributes (i,1),(i,-1)
 each non-fixed pair (i,j_ contributes (i,0))
}
set complete_indices ([Param] B,mat delta) = [(int,int)]:
## for p@i in B
   do let q=twist(delta,p) in
      if p=q then [(i,1),(i,-1)]
      elif i<find(B,q) then [(i,0)]
      else []
      fi
   od

{ need to finalize extended_block(p,delta)
  only need the result and index into block_of(p)
  also, return right away if empty to avoid "delta not distinguished" bug
  last argument: indices in block_of(p) of fixed entries
}
set my_extended_block (Param p,mat delta) = ([Param],[int]):
  let B=block_of(p)
  then fBd = monomials(p.null_module+for q in fixed_subset(B,delta) do (1,p) od)
  in (fBd,indices_subset(fBd,B))

{ B=[p_0,...,p_n] array of parameters
  B^delta=[p_{i_0},...,p_{i_m}]  delta-fixed parameters
  I=[0,1,...,n], I^delta=[i_0,...,i_m] indices of delta-fixed parameters
  f:I^delta->I: B[f[i]]=B^delta[i]
  g:I -> I^delta\cup -1: B^delta[g[i]]=B[i] if i\in I^delta, or -1 otherwise
  example:
   B=[p_0,...,p_5]
   suppose delta interchanges p_3<->p_4, fixes the rest
   B_delta=[p_0,p_1,p_2,p_5]
   I=[0,1,2,3,4,5]
   I^delta=[0,1,2,5]
   f=[0,1,2,5]         B[f[3]]=B^delta[3]=p_5
   g=[0,1,2,-1,-1,3]   B^delta[g[5]=B[3]=p_5
   complete_indices=[(0,1),(0,-1),(2,1),(2,-1),(3,1),(3,-1),(4,0),(5,1),(5,-1)]
   delta_action=[0,1,2,4,3,5]  so delta_action[i]=j means delta:B[i]=B[j]
   value: [I^delta,g,complete_indices,delta-action]
   tabulate_indices (B,delta)  (this is GL(3,C))
  Value: ([0,1,2,5],[0,1,2,-1,-1,3],
    [(0,1),(0,-1),(1,1),(1,-1),(2,1),(2,-1),(3,0),(5,1),(5,-1)],[0,1,2,4,3,5])
}
set tabulate_indices ([Param] B,mat delta) = ([int],[int],[(int,int)], [int]):
  let B_delta = fixed_subset(B,delta) in
  if =#B_delta then ([],[],[],[])
  else
     let I_delta=indices_subset(B_delta,B), g = for :#B do minus_1 od
  in for i@pos in I_delta do g[i]:=pos od
  ;  (I_delta
     ,g
     ,complete_indices(B,delta)
     ,for p in B do find(B,twist(delta,p)) od
     )
  fi

set !one = vec:[1]

{ some rebranding }
set poly_add (i_poly f,i_poly g) = i_poly: flex_add(f,g)
set poly_sub (i_poly f,i_poly g) = i_poly: flex_sub(f,g)

{
set big_KL_P_polynomials([Param] B,mat delta)=[[vec]]:
let (I_delta,g,complete_indices,delta_action)=tabulate_indices(B,delta) then
B_delta=for i in I_delta do B[i] od then
P=KL_P_polynomials(B) then
P_delta=KL_P_polynomials(B_delta,delta) in
let ()=prints("P_delta=",P_delta) in
if #P_delta=0 then prints("Note: block not delta-fixed");KL_P_polynomials(B) {block is not fixed by delta} else let
n=#complete_indices then
rv=zero_poly_matrix(n) in
for a:n do
   let (i,epsilon_i)=complete_indices[a] in
 for b:n-a from a do
   let (j,epsilon_j)=complete_indices[b] in
{    let ()=prints("a=",a," b=",b," i=",i," e_i=",epsilon_i," j=",j," e_j=",epsilon_j)  in }
    if a=b then  rv:=update_matrix_entry(rv,a,b,one) {diagonal entries} else
    if (epsilon_i*epsilon_j=1) {both entries plus or both minus: P+P^delta} then
     let x=g[i] then
         y=g[j] in
{	 let ()=prints("P[i][j]=", P[i][j], " x=", x, " y=", y, " , Pdelta[x][y]=", P_delta[x][y]) in}
         rv:=update_matrix_entry(rv,a,b,divide_by(2,poly_add(P[i][j],P_delta[x][y])))
    elif (epsilon_i*epsilon_j=-1) then {(+,-) or (-,+): P-P^delta}
     let x=g[i] then
         y=g[j] in
         rv:=update_matrix_entry(rv,a,b,divide_by(2,poly_sub(P[i][j],P_delta[x][y])))
    elif abs(epsilon_i)=1 and epsilon_j=0 {(\pm,ind): P} then
      rv:=update_matrix_entry(rv,a,b,P[i][j])
    elif epsilon_i=0 and abs(epsilon_j)=1  {(ind,\pm): P} then
      rv:=update_matrix_entry(rv,a,b,P[i][j])
    elif epsilon_i=0 and epsilon_j=0 then {(ind,ind): P(gamma,mu)+P(gamma,mu^delta)}
      rv:=update_matrix_entry(rv,a,b,poly_add(P[i][j],P[i][delta_action[j]]))
    fi fi od od ;rv fi
}

set big_KL_P_polynomials ([Param] B,mat delta) = i_poly_mat:
  let (I_delta,g,complete_indices,delta_action)=tabulate_indices(B,delta)
  then B_delta = for i in I_delta do B[i] od
  , P=KL_P_polynomials(B)
  then P_delta=KL_P_polynomials(B_delta,delta)
  in
  if =#P_delta
  then prints("Note: block not delta-fixed")
  ; KL_P_polynomials(B) {block is not fixed by delta}
  else let n=#complete_indices then rv=zero_poly_matrix(n) in
     for a:n
     do let (i,epsilon_i)=complete_indices[a] in
        for b:n-a from a
        do let (j,epsilon_j)=complete_indices[b] in
{ prints("a=",a," b=",b," i=",i," e_i=",epsilon_i," j=",j," e_j=",epsilon_j); }
           if a=b
           then  rv:=update_matrix_entry(rv,a,b,one) {diagonal entries}
           elif (epsilon_i*epsilon_j=1) { entries have same sign: P+P^delta}
           then let x=g[i], y=g[j] in
{ prints("P[i][j]=",P[i][j]," x=",x," y=",y," , Pdelta[x][y]=",P_delta[x][y]); }
	     rv:=update_matrix_entry(rv,a,b,poly_add(P[i][j],P_delta[x][y])\2)
	   elif epsilon_i*epsilon_j=minus_1
	   then {(+,-) or (-,+): P-P^delta} let x=g[i], y=g[j] in
	     rv:=update_matrix_entry(rv,a,b,poly_sub(P[i][j],P_delta[x][y])\2)
	   elif abs(epsilon_i)=1 and epsilon_j=0 {(\pm,ind): P}
	   then rv:=update_matrix_entry(rv,a,b,P[i][j])
	   elif epsilon_i=0 and abs(epsilon_j)=1  {(ind,\pm): P}
	   then rv:=update_matrix_entry(rv,a,b,P[i][j])
	   elif epsilon_i=0 and epsilon_j=0
	   then {(ind,ind): P(gamma,mu)+P(gamma,mu^delta)}
	     rv:=update_matrix_entry
		 (rv,a,b,poly_add(P[i][j],P[i][delta_action[j]]))
           fi
        od
     od
  ; rv
  fi

set big_KL_P_polynomials_at_minus_one ([Param] B,mat delta) = mat:
   let (I_delta,g,complete_indices,delta_action)=tabulate_indices(B,delta)
   then B_delta=for i in I_delta do B[i] od
   then P=KL_P_polynomials_at_minus_one(B)
   then P_delta=KL_P_polynomials_at_minus_one(B_delta,delta)
   in
   if shape(P_delta)=(0,0)
   then prints("Note: block not delta-fixed")
   ; KL_P_polynomials_at_minus_one(B) {block is not fixed by delta}
   else let n=#complete_indices then rv=null(n,n) in
      for a:n
      do let (i,epsilon_i)=complete_indices[a] in
	 for b:n-a from a
	 do let (j,epsilon_j)=complete_indices[b] in
{    let ()=prints("a=",a," b=",b," i=",i," e_i=",epsilon_i," j=",j," e_j=",epsilon_j, " P[i][j]=",P[i][j])  in }
	    if a=b then rv[a,b]:=1 {diagonal entries}
	    elif (epsilon_i*epsilon_j=1) { same sign: P+P^delta}
	    then let x=g[i], y=g[j] in
{	 let ()=prints("P[i,j]=", P[i,j], " x=", x, " y=", y, " , Pdelta[x,y]=", P_delta[x,y]) in}
	       rv[a,b]:=rat_as_int((P[i,j]+P_delta[x,y])/2)
	    elif (epsilon_i*epsilon_j=-1)
	    then {(+,-) or (-,+): P-P^delta}
	       let x=g[i], y=g[j] in
{	 let ()=prints(" opps: P[i,j]=", P[i,j], " x=", x, " y=", y, " , Pdelta[x][y]=", P_delta[x][y]) in}
	       rv[a,b]:=rat_as_int((P[i,j]-P_delta[x,y])/2)
	    elif abs(epsilon_i)=1 and epsilon_j=0 {(\pm,ind): P}
	    then rv[a,b]:=P[i][j]
	    elif epsilon_i=0 and abs(epsilon_j)=1  {(ind,\pm): P}
	    then rv[a,b]:=P[i][j]
	    elif epsilon_i=0 and epsilon_j=0
	    then {(ind,ind): P(gamma,mu)+P(gamma,mu^delta)}
		  rv[a,b]:=P[i][j]+P[i][delta_action[j]]
	    fi
	 od
      od ;rv
   fi

set big_KL_P_signed_polynomials ([Param] B,mat delta) = i_poly_mat:
  let (I_delta,g,complete_indices,delta_action)=tabulate_indices(B,delta) in
  if =#I_delta then KL_P_signed_polynomials(B)
  else
     let P=big_KL_P_polynomials(B,delta)
     , lengths = for i:#g do length(B[i]) od
     , n=#complete_indices
     in
     for a:n do for b:n
     do let (i,)=complete_indices[a], (j,)=complete_indices[b] in
        P:=update_matrix_entry(P,a,b,P[a][b]*minus_1^(lengths[i]+lengths[j]))
     od od
  ; P
  fi

set big_KL_P_signed_polynomials_at_minus_one ([Param] B,mat delta) = mat:
  eval(big_KL_P_signed_polynomials(B,delta),-1)

set is_non_negative ([i_poly] polynomials) = bool:
  all(for v in polynomials do is_non_negative(v) od)

set is_non_negative (i_poly_mat M) = bool:
  all(for row in M do is_non_negative(row) od)

set big_KL_Q_polynomials ([Param] B,mat delta) = i_poly_mat:
  prints("computing big_KL_Q polynomials for B, #B=", #B);
  let M=upper_unitriangular_inverse(big_KL_P_signed_polynomials(B,delta)) in
  if not is_non_negative(M) then error("M=: ",M," is not non-negative") fi; M

set done     = [Param]: []
set pointers = [int]: [] { parallel to |done|, point to one of |P_matrices| }
set P_matrices = [i_poly_mat]: []

{ compute matrix for block, but if |B[index]| is in |done| get stored matrix }
set calculate_big_P_signed_polynomials ([Param] B, mat delta, int index) =
      i_poly_mat:
{ prints("#done=",#done); }
  let i=find(done,B[index]) in
  if i.>=
  then { prints("Re-using"); } (P_matrices[pointers[i]])
  else { prints("Calculating"); }
     let P=big_KL_P_signed_polynomials(B,delta) in
     done ##:= B; P_matrices #:= P;
     let n=#P_matrices-1 in pointers ##:= for :#B do n od; P
fi

set calculate_big_P_signed_polynomials_at_minus_one(
    [Param] B, mat delta, int index) = mat:
  eval(calculate_big_P_signed_polynomials(B,delta,index),minus_1)
