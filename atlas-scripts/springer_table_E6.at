<springer_tables.at
<character_tables.at
<character_table_reps.at

{ Let are 21 nilpotent orbits for E6:
atlas> show_nilpotent_orbits("E6".simply_connected)
i   H                    diagram        dim  BC Levi     Cent   A(O)
0   [0,0,0,0,0,0]        [0,0,0,0,0,0]  0    6T1         E6     [1]
1   [1,2,2,3,2,1]        [0,1,0,0,0,0]  22   A1+5T1      A5     [1]
2   [2,2,3,4,3,2]        [1,0,0,0,0,1]  32   2A1+4T1     B3+T1  [1]
3   [2,3,4,6,4,2]        [0,0,0,1,0,0]  40   3A1+3T1     A1+A2  [1]
4   [2,4,4,6,4,2]        [0,2,0,0,0,0]  42   A2+4T1      2A2    [1,2]
5   [3,4,5,7,5,3]        [1,1,0,0,0,1]  46   A1+A2+3T1   A2+T1  [1]
6   [4,4,6,8,6,4]        [2,0,0,0,0,2]  48   2A2+2T1     G2     [1,3,3]
7   [3,4,6,8,6,3]        [0,0,1,0,1,0]  50   2A1+A2+2T1  A1+T1  [1]
8   [4,6,7,10,7,4]       [1,2,0,0,0,1]  52   A3+3T1      B2+T1  [1]
9   [4,5,7,10,7,4]       [1,0,0,1,0,1]  54   A1+2A2+T1   A1     [1,3,3]
10  [4,6,8,11,8,4]       [0,1,1,0,1,0]  56   A1+A3+2T1   A1+T1  [1]
11  [4,6,8,12,8,4]       [0,0,0,2,0,0]  58   D4+2T1      e      [1,2,3]
12  [6,8,10,14,10,6]     [2,2,0,0,0,2]  60   A4+2T1      A1+T1  [1]
13  [6,10,12,18,12,6]    [0,2,0,2,0,0]  60   D4+2T1      A2     [1]
14  [6,8,11,15,11,6]     [1,1,1,0,1,1]  62   A1+A4+T1    e      [1]
15  [7,10,13,18,13,7]    [1,2,1,0,1,1]  64   D5+T1       e      [1]
16  [8,10,14,19,14,8]    [2,1,1,0,1,2]  64   A5+T1       A1     [1,3,3]
17  [8,10,14,20,14,8]    [2,0,0,2,0,2]  66   E6          e      [1,2,3,3,6,6]
18  [10,14,18,26,18,10]  [2,2,0,2,0,2]  68   D5+T1       e      [1]
19  [12,16,22,30,22,12]  [2,2,2,0,2,2]  70   E6          e      [1,3,3]
20  [16,22,30,42,30,16]  [2,2,2,2,2,2]  72   E6          e      [1,3,3]

The duality on these orbits is given as follows:

Name   Diagram Dim Spec Dual   A:Abar Dual_Diagram
0      000000  0   1    E6     1      222222
A1     010000  22  1    E6(a1) 1      222022
2A1    100001  32  1    D5     1      220202
3A1    000100  40  0    E6(a3) 1      200202
A2     020000  42  1    E6(a3) S2     200202
A2+A1  110001  46  1    D5(a1) 1      121011
2A2    200002  48  1    D4     Z3     020200
A2+2A1 001010  50  1    A4+A1  1      111011
A3     120001  52  1    A4     1      220002
2A2+A1 100101  54  0    D4(a1) Z3     000200
A3+A1  011010  56  0    D4(a1) 1      000200
D4(a1) 000200  58  1    D4(a1) S3     000200
A4     220002  60  1    A3     1      120001
D4     020200  60  1    2A2    1      200002
A4+A1  111011  62  1    A2+2A1 1      100101
A5     211012  64  0    A2     Z3     020000
D5(a1) 121011  64  1    A2+A1  1      110001
E6(a3) 200202  66  1    A2     S2Z3   020000
D5     220202  68  1    2A1    1      100001
E6(a1) 222022  70  1    A1     Z3     010000
E6     222222  72  1    0      Z3     000000
}


set E6_nilpotent_orbit_dual_map = (vec->vec):
(  let table = [vec,vec]: { (source,image) }
      [ ([0,0,0,0,0,0] , [2,2,2,2,2,2])
      , ([0,1,0,0,0,0] , [2,2,2,0,2,2])
      , ([1,0,0,0,0,1] , [2,2,0,2,0,2])
      , ([0,0,0,1,0,0] , [2,0,0,2,0,2])
      , ([0,2,0,0,0,0] , [2,0,0,2,0,2])
      , ([1,1,0,0,0,1] , [1,2,1,0,1,1])
      , ([2,0,0,0,0,2] , [0,2,0,2,0,0])
      , ([0,0,1,0,1,0] , [1,1,1,0,1,1])
      , ([1,2,0,0,0,1] , [2,2,0,0,0,2])
      , ([1,0,0,1,0,1] , [0,0,0,2,0,0])
      , ([0,1,1,0,1,0] , [0,0,0,2,0,0])
      , ([0,0,0,2,0,0] , [0,0,0,2,0,0])
      , ([2,2,0,0,0,2] , [1,2,0,0,0,1])
      , ([0,2,0,2,0,0] , [2,0,0,0,0,2])
      , ([1,1,1,0,1,1] , [0,0,1,0,1,0])
      , ([2,1,1,0,1,2] , [0,2,0,0,0,0])
      , ([1,2,1,0,1,1] , [1,1,0,0,0,1])
      , ([2,0,0,2,0,2] , [0,2,0,0,0,0])
      , ([2,2,0,2,0,2] , [1,0,0,0,0,1])
      , ([2,2,2,0,2,2] , [0,1,0,0,0,0])
      , ([2,2,2,2,2,2] , [0,0,0,0,0,0])
      ]
   then leq (int i,int j) = bool:
        let (a,)=table[i], (b,)=table[j] in lex_lesseq(a,b)
   then sigma = sort(#table, leq)
in table := for i in sigma do table[i] od { adjust table to sorted form }
;  { E6_nilpotent_orbit_dual_map = }
   (vec diagram) vec:
   let predicate(int i)= bool: let (key,)=table[i] in lex_lesseq(diagram,key)
   then k = binary_search_first(predicate,0,#table)
   then (source,image) = assert(k<#table,"Wrong E6 diagram"); table[k]
   in assert(source=diagram,"Wrong E6 diagram"); image
)

{ The "Springer map" is given by the following mapping in terms of orbit
  diagrams; the image value are character indices according to the numbering
  of |e6_table| from character_table_E6,at
}
set E6_Springer_map = (vec->int): { orbit diagrams as |vec| values }
(  let table = [vec,int]: { (diagram,character index) }
      [ ([0,0,0,0,0,0] ,  1) { sign: dim=1, deg=36 }
      , ([0,1,0,0,0,0] ,  3) {  6, 25 }
      , ([1,0,0,0,0,1] , 10) { 20, 20 }
      , ([0,0,0,1,0,0] ,  5) { 15, 16 }
      , ([0,2,0,0,0,0] , 14) { 30, 15 }
      , ([1,1,0,0,0,1] , 20) { 64, 13 }
      , ([2,0,0,0,0,2] , 13) { 24, 12 }
      , ([0,0,1,0,1,0] , 17) { 60, 11 }
      , ([1,2,0,0,0,1] , 23) { 81, 10 }
      , ([1,0,0,1,0,1] ,  4) { 10,  9 }
      , ([0,1,1,0,1,0] , 18) { 60,  8 }
      , ([0,0,0,2,0,0] , 21) { 80,  7 }
      , ([2,2,0,0,0,2] , 22) { 81,  6 }
      , ([0,2,0,2,0,0] , 12) { 24,  6 }
      , ([1,1,1,0,1,1] , 16) { 60,  5 }
      , ([2,1,1,0,1,2] ,  7) { 15,  4 }
      , ([1,2,1,0,1,1] , 19) { 64,  4 }
      , ([2,0,0,2,0,2] , 15) { 30,  3 }
      , ([2,2,0,2,0,2] ,  9) { 20,  2 }
      , ([2,2,2,0,2,2] ,  2) { reflection: 6,  1 }
      , ([2,2,2,2,2,2] ,  0) { trivial:    1,  0 }
      ]
   then leq (int i,int j) = bool:
        let (a,)=table[i], (b,)=table[j] in lex_lesseq(a,b)
   then sigma = sort(#table, leq)
in table := for i in sigma do table[i] od { adjust table to sorted form }
;  { E6_Springer_map = }
   (vec diagram) int:
   let predicate(int i)= bool: let (key,)=table[i] in lex_lesseq(diagram,key)
   then k = binary_search_first(predicate,0,#table)
   then (source,image) = assert(k<#table,"Wrong E6 diagram"); table[k]
   in assert(source=diagram,"Wrong E6 diagram"); image
)

set springer_table_E6 () = SpringerTable:
   let ct=character_table_E6() then rd=ct.root_datum {simply_connected("E6")}
   then drd = dual(rd)
in ( ct
   , orbits(rd)
   , (ComplexNilpotent O) ComplexNilpotent:
     complex_nilpotent_from_diagram(drd,E6_nilpotent_orbit_dual_map(O.diagram))
   , (ComplexNilpotent O) ComplexNilpotent:
     complex_nilpotent_from_diagram(rd,E6_nilpotent_orbit_dual_map(O.diagram))
   , (ComplexNilpotent O) int: E6_Springer_map(O.diagram)
   )

{ In the general case we take into account the permutation of the simple root
  indices returned by |test_simple_type| (it is a map from Bourbaki indices to
  |rd| indices, which |stratified_diagram@(ComplexNilpotent,[int])| takes into
  account to get into Bourbaki order, and which |permute| uses to transform the
  dual diagram from |E6_nilpotent_orbit_dual_map| into the order of |dual(rd)|.
}
set springer_table_E6 (RootDatum rd) = SpringerTable:
   let map = test_simple_type("E",rd), drd = dual(rd)
in assert(#map=6,"Root datum has wrong rank "+#map);
   ( character_table_E6(rd)
   , orbits(rd)
   , (ComplexNilpotent O) ComplexNilpotent:
     let diagram = stratified_diagram(O,map)
     then dual_O = vec: E6_nilpotent_orbit_dual_map(diagram)
     in complex_nilpotent_from_diagram(drd,permute(map,dual_O))
   , (ComplexNilpotent dual_O) ComplexNilpotent:
     let diagram = stratified_diagram(dual_O,map)
     then O = vec: E6_nilpotent_orbit_dual_map(diagram)
     in complex_nilpotent_from_diagram(rd,permute(map,O))
   , (ComplexNilpotent O) int: E6_Springer_map(stratified_diagram(O,map))
   )
