<basic.at
<parabolics.at
<W_characters.at
<sort.at { for |sort_u@[vec]| }
<lattice.at { for |restrict_action@(mat,mat)| }
<sparse.at { for column-grouped |sparse_mat| type }

{ data type for representation of W
  operators[i] is the matrix of the action of simple generator #i
}
set_type W_rep = (int dimension, [mat] operators)

{ matrix of pi(w) }
set operator (W_rep (dimension,operators), WeylElt w) = mat:
   product(dimension,for s in w.word ~do operators[s] od)

set operator (W_rep pi) = (WeylElt -> mat):
  (WeylElt w) mat: operator(pi,w)

{ trivial representation of W }
set trivial_W (RootDatum rd) = W_rep:
  (1,for i:semisimple_rank(rd) do id_mat(1) od)

{ Compute characters of W-representations on cells, as obtained from W_cells
  also induced characters from Levi subgroups, and the Steinberg character
}

{character of pi}
set character (WeylClassTable tab, W_rep pi) = [int]:
  for w in tab.class_representatives do trace(pi.operator(w)) od

{ isomorphism test using the character }
set is_isomorphic (WeylClassTable tab, W_rep pi, W_rep sigma) = bool:
  all(tab.n_classes
     ,(int i): let w = tab.class_representatives[i] in
               trace(pi.operator(w))=trace(sigma.operator(w))
     )

{. matrix of inner products of characters of representations .}
set matrix_of_inner_products (WeylClassTable tab,[[int]] characters) = mat:
  let n=#characters
  in matrix((n,n),(int i,int j): tab.inner(characters[i],characters[j]))

{ filter list of representations to a unique copy of any occurring character }
set sort_u (WeylClassTable tab,[W_rep] list) = [W_rep]:
  case #list
  in [], list
  else let chars = for pi in list do character(tab,pi) od
     then sorted = [[int]]: sort_u(chars)
     then positions = for :#sorted do minus_1 od
     in for char@i in chars
        do let j =
           binary_search_first((int j):lex_lesseq(char,sorted[j]),0,#sorted)
           in assert(char=sorted[j]); if positions[j].< then positions[j]:=i fi
        od
     ; for pos in positions do list[pos] od
  esac

{ ----------- cell representations --------------}

{ Type definitions that facilitate handling the output from built-in |W_cells| }
set_type
[ WNode = ([int] tau,[int,int] out_list)
, WGraph = (RootDatum root_datum,[WNode] nodes)
, WCell = ([int] labels, WGraph graph,[sparse_mat] operators)
]
{ now |W_cells@Block| returns      | [[int],[WNode]]  |
  and |W_cells@Param| returns | (int,[[int],[WNode]]) | }
set root_datum(WCell c) = RootDatum: c.graph.root_datum
set nodes(WCell c) = [WNode]: c.graph.nodes
set #(WGraph g) = int: #g.nodes

{ Description of the cell representation taken from messages/wcells.help

  One Weyl group representation attached to the graph, called coherent
  continuation action, may be described as follows. On take a free Z-module with
  basis {L_i} indexed by the block elements i. If root g is in the tau(j), then

    s_g(L_j) = -L_j.

  If g is not in tau(j), then

    s_g(L_j) = L_j + sum_{elements i such that g in tau(i)} m_{i,j} * L_i,

  where m_{i,j} denotes the multiplicity of the edge from i to j. In other
  words, a term m*L_i appears in the sum for s_g(L_j) if the pair (j,m) appears
  in the list for row i and moreover g is in tau(i) but not in tau(j). In matrix
  form, the action of s_g is given by a matrix whose diagonal terms are given
  using Iverson brackets [[]] as a_{j,j} = (-1)^[[g\notin\tau(j)]] and whose
  off-diagonal terms are a_{i,j} = [[g\in\tau(i)\setminus\tau(j)]] m_{i,j}.

  The Hecke algebra action associated to the graph, at q=1 and expressed with
  respect to the basis of irreducible representations, each multiplied by a sign
  given by the parity of its length (so that off-diagonal terms are non
  negative), is similar, but differs in that diagonal entries have opposite
  signs.

  For example, here is a cell

  ([224,247,250,253,256],
   [([0,1,2],[(1,1)]),
    ([0,1,3],[(0,1),(3,1),(4,1)]),
    ([1,2,3],[(3,1)]),
    ([0,2,3],[(1,1),(2,1)]),
    ([0,1,2],[(1,1)])
   ]
  )

  which can be visualized (dropping the m values which are all 1) as

  0[224]: {1,2,3} <-> 1
  1[247]: {1,2,4} <-> 0,3,4
  2[250]: {2,3,4} <-> 3
  3[253]: {1,3,4} <-> 1,2
  4[256]: {1,2,3} <-> 1

  and which gives for the coherent continuation action the matrices, acting from
  the left (so columns are images),

  |-1, 0, 0, 0, 0 |  |-1, 0, 0, 0, 0 |  |-1, 1, 0, 0, 0 |  | 1, 0, 0, 0, 0 |
  | 0,-1, 0, 0, 0 |  | 0,-1, 0, 1, 0 |  | 0, 1, 0, 0, 0 |  | 1,-1, 0, 0, 1 |
  | 0, 0, 1, 0, 0 |, | 0, 0,-1, 1, 0 |, | 0, 0,-1, 0, 0 |, | 0, 0,-1, 0, 0 |
  | 0, 0, 1,-1, 0 |  | 0, 0, 0, 1, 0 |  | 0, 1, 0,-1, 0 |  | 0, 0, 0,-1, 0 |
  | 0, 0, 0, 0,-1 |  | 0, 0, 0, 0,-1 |  | 0, 1, 0, 0,-1 |  | 0, 0, 0, 0, 1 |

  Whenever an off-diagonal coefficient (i,j) is nonzero, then the diagonal entry
  at (i,i) is -1 (as g\in\tau(i)); the one at (j,j) is +1 (g\notin\tau(j))

  In the Hecke action all the diagonal entries are opposite
}

{ sparse matrix of the Hecke action (on the basis of length-parity flipped
  irreducible representations) of the i^th simple reflection on a cell
  A cell is a value of type WCell = ( [int] , [([int],[(int,int)])] ) as
  described in the W_cells@Block command in atlas-functions.help
}

{ the |cell_action| functions really operate on |WGraph| data }

{. matrix for s of graph, of coherent continuation action on irreducibles. }
set graph_action (WGraph (rd,graph),int s) = sparse_mat:
   assert(s.>= and s<rd.semisimple_rank,"bad W generator: "+s);
   let tau_has_s(WNode nd) = bool: is_member(nd.tau)(s) in
   for node@j in graph
   do if node.tau_has_s
      then [(j,-1)] { single diagonal term -1 }
      else (j,1) { diagonal term, the rest come from outward edges } #
        for (i,):link in node.out_list
        do if graph[i].tau_has_s then [link] else [] fi
        od.## { filter, keeping destination nodes with |s| in tau invariant }
      fi
   od

{. matrix of action of product of simple reflections on a cell .}
set graph_action (WGraph graph,[int] w) = mat:
  let n=#graph in
  if =#w then id_mat(n)
  else let result=unsparse(graph_action(graph,w[0]),n) in
     for i:#w-1 from 1 do result:=result*graph_action(graph,w[i]) od
  ;  result
  fi

{. matrix of action of WeylElt on a cell .}
set graph_action(WGraph graph,WeylElt w) = mat:
  graph_action(graph,w.word)


{. matrix of action of i^th simple reflection on a cell .}
set cell_action (WCell cell,int s) = sparse_mat:
  graph_action(cell.graph,s)

{. matrix of action of product of simple reflections on a cell .}
set cell_action (WCell cell,[int] w) = mat:
  graph_action(cell.graph,w)

{. matrix of action of WeylElt on a cell .}
set cell_action(WCell cell,WeylElt w) = mat:
  graph_action(cell.graph,w.word)

{ |W_cells@Param| is built-in and returns (int,[[int],[[int],[int,int]]])
  Now that graph_action is defined we can define functions that return actual
  values of type [WCell]. Note that |WCell| includes the last argument [mat].

 W_cells(p)=     (int,  [ ([int], [ ([int],[(int,int)])  ])  ])
                 (index,[ (labels,[  WNode               ])  ])
 W_cells_of(p)   =[ WCell ]
                 =[([int],  WGraph,[sparse_mat]) ]
                 =[ (labels, (rd,[WNode]), [sparse_mat]) ]
 vertex_and_W_cells(p)
	         =(int,[ WCell ])
                 =(int,[ ([int],  WGraph,[sparse_mat]) ]_
                 =(int,[ (labels, (rd,[WNode]), [sparse_mat]) ])
}
set vertex_and_W_cells(Param p) = (int,[WCell]):
let (vertex,cells) = (int,[[int],[WNode]]): W_cells(p)
then cells_with_action = [WCell]:
  for (labels,nodes) in cells { of types |[int]| respectively |[WNode]| }
  do let (id,):g = WGraph: (p.integrality_datum,nodes)
     then ops = for i:id.semisimple_rank do graph_action(g,i) od
     in (labels,g,ops)
  od
in (vertex,cells_with_action) { |vertex| is number of |p| as used in |labels| }

set W_cells_of(Param p) = [WCell]:
  let (,cells) = vertex_and_W_cells(p) in cells

{. character of representation of W on cell .}
set cell_character (WeylClassTable Wct,WCell cell) = [int]:
  for w in Wct.class_representatives do trace(cell_action(cell,w)) od

{. list of characters of representation on list of cells .}
set cell_characters (WeylClassTable Wct,[WCell] cells) = [[int]]:
  for cell in cells do cell_character(Wct, cell) od

set cells_table (WeylClassTable Wct,[WCell] cells) = mat:
  matrix_of_inner_products(Wct,cell_characters(Wct,cells))

set cells_table_augmented (WeylClassTable Wct, [WCell] cells) = mat:
  let characters =
    cell_characters(Wct,cells) ## [ Wct.trivial, Wct.sign, Wct.reflection ]
  in matrix_of_inner_products(Wct,characters)

set cell_representation (WeylClassTable Wct,WCell cell) = W_rep:
  (#cell.graph,for i:Wct.root_datum.semisimple_rank
	       do unsparse(cell_action(cell,i),#cell.graph) od)

{ list of representations defined by an array of cells }
set cell_representations(WeylClassTable Wct,[WCell] cells)=[W_rep]:
  for cell in cells do cell_representation(Wct,cell) od


{ ------------------- induction ------------------- }

{. promote w in W(Levi) to W(G) }
set promote (WeylClassTable Wct, WeylElt w_L) = WeylElt:
  W_elt(Wct.root_datum, matrix(w_L))

{ all 2^n standard Levis }
set standard_Levis (RootDatum rd) = [RootDatum]:
  for S in power_set(rd.all_simples) do Levi_datum(rd,S) od

{ induction from a Levi factor

  L is a Levi in G, |pi_L| is a class function on W(L)
  we want to compute the class function pi_G=ind_L^G(pi_L) on W(G)

  formula: if C is a conjugacy class for G
  pi_G(C) = |W(G)| / (|W(L)|*|C|)) * \sum |C_j| pi_L(C_j)
  where the sum runs over the W(L)-conjugacy classes in C\cap W(L) (this follows
  from Frobenius reciprocity, pairing pi_L with the indicator function for C)

  In other words the value of |pi_L| on each class C_j in W(L) contributes to
  the induced character value only at the class C of W(G) containing it, and for
  this contribution its character value is multiplied by [W(G):W(L)] * |C|/|C_j|

  algorithm: initialize the result to be the 0-character
  run over conjugacy class representatives in L
  for each conjugacy class representative w_L compute  w_G = class_of (w_L,G)
  and add to the character value at (the class) w_G the  value:
  pi_L(w_L) * index(W(G):W(L))*|conjugacy class of w_L|/|conjugacy class of w|
  The factor by which pi_L(w_L) is mulitplied is integer, as it is the index of
  the centraliser subgroup of w_L in W_L inside its centraliser subgroup of w_G
}
set induce_character (WeylClassTable Wct_G,WeylClassTable Wct_L,[int] pi_L) =
       [int]:
   let rd_G= Wct_G.root_datum, rd_L=Wct_L.root_datum
   then index = rat_as_int(order_W(rd_G)/order_W(rd_L))
   , classes_G=Wct_G.class_representatives  {[WeylElt] for |G|}
   , classes_L=Wct_L.class_representatives  {[WeylElt] for |L|}
   then values_G= [int]: for c in classes_G do 0 od
   , sizes_G = Wct_G.class_sizes
   , sizes_L = Wct_L.class_sizes
in for w_L@i in classes_L
   do let j=Wct_G.class_of(W_elt(rd_G,w_L.matrix))
   in  values_G[j] +:= pi_L[i] * (index * sizes_L[i]/sizes_G[j]).rat_as_int
   od; values_G

{ the sign representation occurs in S^(nr_of_posroots)(reflection), and
  this is the maximum necessary exponent to get all irreducibles }
{. smallest k so that pi occurs in S^k(reflection) .}
set smallest_degree (WeylClassTable Wct, [int] character) = int:
  first(Wct.root_datum.nr_of_posroots+1
       ,(int k) bool: !=Wct.inner(character,Wct.sym_power_refl(k))
       )

{ the Steinberg character (mainly for testing)}

{alternating sum, over all standard Levis, of induced from trivial
 should equal the sign character (if it does not, this function fails) }
set Steinberg_character (RootDatum rd) = [int]:
  let ct_G=W_class_table(rd)
  then result =
     for L in standard_Levis(rd)
     do let ct_L=W_class_table(L) in
        minus_1^semisimple_rank(L) * induce_character(ct_G,ct_L,ct_L.trivial)
     od
     .sum
  in assert(result=ct_G.sign); result

{ ------------ projection on isotypic subspace  ----------- }

{ scalar multiple of projection of representation space of |ops| on isotoypic
  subspace defined by character |char_values| of an irreducible representation

  If and irreducible character |char_values| is not a constituent of the
  representation defined by |ops|, this gives the null matrix; then since
  the result depends linearly on |char_values|, we can even use this when the
  character is reducible, but has a unique irreducible constituent in common
  with |ops|, giving (a multiple of) the projection for that isotypic subspace
}
set projector (WeylClassTable tab, W_rep (dim,ops), [int] char_values) = mat:
  let rd=tab.root_datum, Q=null(dim,dim) in
  for (w,action) in W_parabolic_act(rd,all_simples(rd),dim,ops)
  do Q+:=character_value(tab,w,char_values)*action
  od; Q

{ restrict representation pi to isotypic subspace (image space of projector) }
set restrict_representation_isotypic (
    WeylClassTable Wct, W_rep pi, vec char_values) = W_rep:
  let (basis,factors)=projector(Wct,pi,char_values).adapted_basis
  { operators have integral matrices w.r.t. |basis|, so restriction is OK }
  then P=basis[:#factors] { saturated lattice basis of image of the projector }
  in (#P ,for T in pi.operators do restrict_action(T,P) od)

{ projector for a cell representation }
set projector (WeylClassTable Wct, WCell cell, vec char_values) = mat:
  projector(Wct,cell_representation(Wct,cell),char_values)

{ given a cell, compute the cell represetation pi, find the smallest k so that
  <pi,sym^k(reflection)>!=0, then this inner product is 1, and the unique
  irreducible in common is special; use the character of sym^k(reflection)
  to compute the projection operator onto the special
}
set special_projector (WeylClassTable Wct, WCell cell) = mat:
  let cell_rep = cell_representation(Wct,cell)
  then char = Wct.sym_power_refl(smallest_degree(Wct,character(Wct,cell_rep)))
  in projector(Wct,cell_rep,char)

{ given a cell, compute the special_projector, and use this to construct
  the special representation itself
}
set special_representation_of_cell (WeylClassTable Wct, WCell cell) = W_rep:
  let cell_rep = cell_representation(Wct,cell)
  then char = Wct.sym_power_refl(smallest_degree(Wct,character(Wct,cell_rep)))
  in restrict_representation_isotypic(Wct,cell_rep,char)

{special_projectors for a list of cells}
set special_projectors(WeylClassTable Wct, [WCell] cells) = [mat]:
  for cell in cells do special_projector(Wct,cell) od

{test v, w same up to rational multiple}
set is_rational_multiple (vec v,vec w) = bool: rank(mat:[v,w])<2

{ given list of nonzero vectors return [[int]]
  where each [int] is the indices of the vectors
  which are the same up to multiple
  example: [[1,2],[2,3],[2,4]] -> [[0,2],[1]]}
set group_vectors_up_to_scalar ([vec] list) = [[int]]:
  let result=[[int]]: [], reps=[vec]: [] in
   for v@i in list
   do assert(!=v,"Cell member projects to 0: "+i);
      let j=first(#reps,(int k)bool: is_rational_multiple(reps[k],v)) in
      if j.< then result #:= [i]; reps#:=v else result[j] #:= i fi
   od; result

{ given a cell, compute the projector onto the special representation
  Then cell vertices give the same primitive ideal iff they map to scalar
  multiples of the same vector in the special representation, i.e. the two
  corresponding columns of the matrix are the same up to rational multiple
}
set group_parameters_by_primitive_ideal (WCell cell,mat projector) = [[int]]:
  let grouping=group_vectors_up_to_scalar([vec]:projector{matrix columns})
  , parameters=cell.labels
  in for v in grouping do for w in v do parameters[w] od od

{ nice output of primitive ideal information for a cell }
set print_primitive_ideal_info ([WCell] cells,[mat] projectors) = void:
  let data=
     for cell@i in cells
     do let P=projectors[i] then g=group_parameters_by_primitive_ideal(cell,P)
     in [i.to_string,(#P).to_string,(#g).to_string,g.to_string]
     od
  in prints("Each line has 4 terms:",new_line
           ,"# of cell",new_line,"size of cell", new_line
           , "dimension of special representation of cell",new_line
           , "grouping of parameters in cell by primitive ideal");
     tabulate(data, "llll",2," ")

{ variant function of previous (distinguished by ignored final string argument),
  better suited to large cells
}
set print_primitive_ideal_info([WCell] cells,[mat] projectors,string .) = void:
  for cell@i in cells
  do let P=projectors[i] then g=group_parameters_by_primitive_ideal(cell,P) in
    prints(new_line,"#",i,new_line, "size of cell: ", #P, new_line
          , "dimension of special: ", #g)
  ; for a in g do prints(a) od
  od



{Param->[(int, ([int],(RootDatum,[([int],[(int,int)])],[sparse_mat]) )    )]}
