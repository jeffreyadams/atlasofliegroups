<basic.at
<ratmat.at

{ General linear algebra over $\Z$. In so far as saturation of lattices is
  done, this actually relates to vector spaces over $\Q$, but all computations
  are done with integers only, distinguishing this script from Gaussian-elim.at
}

{ Compute what appears to be called the Hermite form of an integral matrix.

  |M| is an $n\times k$ matrix, so columns of |M| span a $\Z$-submodule $W$
  of $\Z^n$ (the image of M); get canonical generators for this submodule
}
set image_lattice (mat A) = mat:
   let (M,,pivots,)=echelon(A) then c=#M
in for i@j in pivots
   do let col=M[j] then pivot=col[i]
   in for l: c-1-j from j+1 do M[l]-:=col*(M[i,l]\pivot) od
   od; M

{ whether |image_lattice(M)| is a saturated lattice (direct factor of $\Z^n$) }
set is_saturated (mat M) = bool:
   let (M,,pivots,)=echelon(M)
in set (M,):=ech_up(M,pivots); product(M.main_diagonal)=1

{ A function that avoids using |adapted_basis|, |diagonalize|, or other
  functions that may suffer severe coefficient growth; to be used in situations
  where only the (saturated) image subspace as a whole, and possibly a choice
  of a complementary subspace, are needed, not a special basis for the image

  Find dimension |c| of image, and a $\Z$-inverible matrix whose first |c|
  columns span saturation of the image; remaining ones span a chosen complement
}
set adapted_direct_sum (mat M) = (int,mat):
   let (M,,pivot,)=echelon(M) then (r,c)=shape(M), !M0=M
   then R=id_mat(r) { record row operations, held in inversed form }
in { now do coordinate change to make |M| upper triangular }
   for j:c { loop over columns of M while it is being modified in the loop }
   do let col=M[j], piv_j=pivot[j]+1 { only consider few rows now: |j:piv_j| }
   in if j<piv_j { avoid doing any work when our range is a single rows }
      then
         let (d,C)=Bezout(col[j:piv_j]), tM=^M
         then tM_C=tM[j:piv_j] * C, R_C = R[j:piv_j] * ^C.inverse
         { updated rows are now spliced into place in |M| and |R|: }
      in M := c^ for i:r do if i<j or i>pivot[j] then tM[i] else tM_C[i-j] fi od
      ;  R := r# for i:r do if i<j or i>pivot[j] then  R[i] else  R_C[i-j] fi od
      ; assert(M[j,j]=d)
      fi
   od; assert(R*M=M0); (c,R)

set image_subspace (mat M) = mat: { generators for $\Q$-span of image of |M| }
   let (c,R)=adapted_direct_sum(M) in R[:c]

set image_complement_basis (mat M) = mat:
   let (c,R)=adapted_direct_sum(M) in R[c:]

set saturation = image_subspace@mat { intersection of $\Z^n$ with $\Q$-span }

{ a basis representing the quotient by sublattice spanned by columns of |M|;
  tests that this sublattice is a direct factor, and throws an error if not }
set free_quotient_lattice_basis (mat M) = mat:
( let (E,,,)=echelon(M) in { pre-compute echelon }
  assert(E.is_saturated,"sublattice is not a direct factor")
; image_complement_basis(E)
)

{ a basis representing the quotient by saturation of sublattice, so no test }
set saturation_quotient_basis = image_complement_basis@mat


{ |M| is an $n\times k$ matrix; its columns span a submodule $W$ of $\Z^n$.
  Compute $n\times n$ matrix of projection onto the saturation (or $\Q$-span)
  of $W$, parallel to its complement from |adapted_direct_sum(M)|.
}
set projector_to_image (mat M) = mat:
  let (c,R)=adapted_direct_sum(M) in R[ : , :c] * R.inverse[ :c, : ]

{alternate form: an mxc matrix, giving projection to Im(M) in the basis image_subspace(M)}
set image_projector(mat M)= mat:
  let (c,R)=adapted_direct_sum(M) in R.inverse[:c , : ]

{complementary projector, to chosen complement to |image_subspace(M)| }
set projector_mod_image (mat M) = mat:
  let (c,R)=adapted_direct_sum(M) in R[ : ,c: ] * R.inverse[c: , : ]

{alternate form: an mx(m-c) matrix, giving projection to the complement of Im(M),
 in the basis image_complement_basis(M)}
set mod_image_projector(mat M)= mat:
  let (c,R)=adapted_direct_sum(M) in R.inverse[c: , : ]

{ |M| is an $n\times k$ matrix; its columns span a submodule $W$ of $\Z^n$.
  A complement to |image_subspace(M)| is chosen by |adapted_direct_sum(M)|, and
  |decompose(M,w)=(u,v)| with |u| in |image_subspace(M)| and |v| in complement.
}
set decompose (mat M, vec v)= (vec,vec):
   let (c,R)=adapted_direct_sum(M) then R1=R.inverse
in (R[:,:c] * (R.inverse[:c,:] * v), R[:,c:] * (R.inverse[c:,:] * v) )

set decompose (mat M, ratvec w) = (ratvec,ratvec):
   let (v,d)=%w then (v1,v2)=decompose(M,v) in (v1/d,v2/d)


{ assuming M injective and Im(M) is A-stable, return unique B with A*M=M*B,
  which is action of A restricted to that sublattice $\Z^m$, embedded via M
}
set restrict_action (mat A, mat M) = mat: { shapes A: n by n, M: n by m }
   case solve(M,A*M) | B.solution: B
   | else error("Image lattice M is not fixed by A")
   esac

{ assuming M full row rank and ker(M) is A-stable, find unique B with M*A=B*M }
set corestrict_action (mat M,mat A) = mat:  { shapes M: m by n, A: n by n }
   case solve(^M,^(M*A)) | tB.solution: ^tB
   | else error("Kernel of M is not fixed by A")
   esac

{ |M| is an $n\times k$ matrix; its columns span a subspace $W$ of $\Q^n$.
  Assuming this subspace is |A|-stable, |A| induces an operator in $\Q^n/W$;
  return its matrix w.r.t the complement chosen by |adapted_direct_sum(M)|.
}
set quotient_matrix (mat A,mat M) = mat:
  let (c,R)=adapted_direct_sum(M) in (R.inverse[c: , : ]*A*R[ : ,c: ])

set solve_ratvec (mat A, vec v) = ratvec:
  (A,ratvec:v).solve.(rat_requisition("not in span"))

{ integer vector (lattice) solutions to linear system }


set in_lattice (mat A, ratvec u) = bool: { whether v in image lattice of A }
  let (b,n)=%u in n=1 and solve(A,b).any

{test if ratvec v is in lattice L + rational subspace V}
set in_lattice_subspace_sum ([vec] L,[vec] V)=(ratvec->bool):
(ratvec v):
if =#V then in_lattice(L,v) else
 let ck=cokernel(V) then (new_V,,,) = echelon(ck*L) in
 let v_new=ck*v in
 if not is_integer(v_new) then false
  else
  in_lattice(new_V,ratvec_as_vec(v_new))
 fi
fi

set vec_solve (mat A, ratvec u) = maybe_a_vec: { integer solution to A*x=b }
  let (b,n)=%u in if n>1 then no_vec() else solve(A,b) fi

{ express columns of M relative to basis A of a sub-lattice that contains them
  A: nxm matrix, columns are a basis of a Z-module V of rank m
  M: nxr matrix, columns span a submodule of V; returns mxr matrix C,
  column i gives column i of M as a sum of columns of A i.e., A*C=M
}
set in_lattice_basis (mat A,mat M) = mat:
  #A { size m of solutions } # for v in M do required_solution(A,v) od

{---------------- some auxiliary lattice functions -----------------------}

set select_columns ([int] inx, mat M) = mat: columns_with(is_member(inx),M)
set select_rows    ([int] inx, mat M) = mat: rows_with(is_member(inx),M)
set first_columns (int n,mat M) = mat: M[ : , :n]
set first_rows    (int n,mat M) = mat: M[ :n, : ]

{ Basis of intersection lattice of lattices given as images of two matrices
  The key observation is that A*x = B*y can be written (A ## B)*(x ## -y)=0
  So generators for the kernel of the horizontally glued matrix A##B will provide
  (chopping them into parts) generators for the intersection lattice
  If we ensure first that rows of A and B are linearly independent, then
  linearly independent kernel elements remain so after chopping off the second
  part and applying A to their first parts; this gives an intersection basis
}
set intersection (mat A,mat B) = mat:
   let (rA,cA)=shape(A:=image_lattice(A)), (rB,)=shape(B:=image_lattice(B))
   in assert(rA=rB,"A and B must have same number of rows");
   A*first_rows(A.n_columns,kernel(A##B))

{adapted_direct_sum in all its glory
A: (r,n) matrix
 E: echelon form of A is an (r,n) matrix
 E= M##Z where M (r,c) matrix (nonzero columns) and Z=(r,n-c) zero matrix
 echelon(A)=(mat M,mat C,vec s,int eps)  (see atlas-functions.help)
 M: (r,c) matrix, C (n,n) invertible  (s: pivot rows, eps is a sign)
 c=#columns of M
 n-c=dimension(kernel(A))
 Then AC=E=M##Z
 Furthermore M -> (mat N,mat R)
 E: (r,c)  N:(r,c)  R: (r,r) invertible
 (RN)##Z=E##Z=AC
 AC=RN##Z
 Note: image_complement_basis is the last n-c columns of R
}
set adapted_direct_sum_plus (mat A) = (int,mat,mat,mat,mat,mat):
   let (M,C,pivot,)=echelon(A) then (r,c)=shape(M), N=M
   then Z=null(r,n_columns(A)-c)
   then R=id_mat(r) { record row operations, held in inversed form }
in for j:c { loop over columns of N while it is being modified in the loop }
   do let col=N[j] then (d,C)=Bezout(col[j:pivot[j]+1]), tN=^N
   then tN_C=tN[j:pivot[j]+1] * C, R_C = R[j:pivot[j]+1] * ^C.inverse
   in N := c^ for i:r do if i<j or i>pivot[j] then tN[i] else tN_C[i-j] fi od
   ;  R := r# for i:r do if i<j or i>pivot[j] then  R[i] else  R_C[i-j] fi od
   ; assert(N[j,j]=d)
   od; assert(R*N=M);assert(A*C=R*(N##Z));(c,R,N,C,M,Z)

{generators of finite abelian group Z^n/A}
set finite_quotient (mat M) = [vec,int]:
   let (A,v)=filter_units(Smith(M)) in for col@i in A do (col,v[i]) od

{ test if ratvec v is in Z-linear span of columns of ratmat A }
set in_lattice (ratmat A, ratvec v) = bool:
   let (numerator_A,,d)=A in in_lattice(numerator_A,v*d)
