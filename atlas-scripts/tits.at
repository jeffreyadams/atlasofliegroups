<basic.at
<Weylgroup.at
<W_orbit.at

{ An element of the (\delta-extended) Tits group is represented by
  (RootDatum rd,ratvec v,mat theta) representing \exp(2i\pi v) \sigma_w d
  where \theta is the the action of wd on X^*, with w\in W and d is a
  distinguished involution of that lattice (we need to allow both d=\delta and
  d=identity in order to get a group, with mulitplication and inverse). We can
  do without explicitly representing d, since we shall work with the image
  under \theta of the set of positive (co)roots, which set d stabilises.

  So v is a rational coweight taken modulo 1; theta need not be an involution.
  Note that theta is defined as operating from left on X^*; for left action of
  theta on v, use the transpose inverse (right-multiply v by inverse(theta)).
}

set_type Tits_elt = (RootDatum root_datum,ratvec torus_part,mat theta)

{ equality test assumes the root data agree, without check (though it could) }
set = (Tits_elt(,v,theta),Tits_elt(,u,eta)) = bool: =(v-u)%1 and theta=eta
set != ((Tits_elt,Tits_elt)p) = bool: not =p

{ identity in Tits group }
set tits_identity (RootDatum rd) = Tits_elt:
  let r=rank(rd) in (rd,ratvec:null(r),id_mat(r))

{ element (torus factor=1)*delta in twisted Tits group }
set tits_delta (RootDatum rd,mat delta) = Tits_elt: (rd,null(rank(rd)),delta)
set tits_delta (RealForm G) = Tits_elt:
  tits_delta(RootDatum:G,distinguished_involution(InnerClass:G))

{ left multiplication by sigma_s, where s must index a simple root }
set left (int s,Tits_elt(rd,v,theta)) = Tits_elt:
  ( rd
  , let v1 = coreflect(rd,v,s) { permute sigma_s e(v), so act by s on v } in
    if lengthens(rd,s,theta) { valid even if theta=w.delta is not in W }
    then v1
    else v1+coroot(rd,s)/2 { second term represents m_s = sigma_s^2 }
    fi % 1
  , left_reflect(rd,s,theta)
  )

{ right multiplication by sigma_s, where s must index a simple root }
set right (Tits_elt(rd,v,theta), int s) = Tits_elt:
  ( rd
  , if lengthens(rd,theta,s) { again valid even if theta=w.delta not in W }
    then v
    else v+coroot(rd,s)*theta.inverse/2 { got theta' m_s; permute factors }
    fi % 1
  , right_reflect(rd,theta,s)
  )

{ multiplication by canonical lift of WeylElt }
set left (WeylElt w,Tits_elt xi) = Tits_elt:
  assert(w.root_datum=xi.root_datum);
  for s in w.word ~ do xi:=left(s,xi) od; xi

set right (Tits_elt xi, WeylElt w) = Tits_elt:
  assert(w.root_datum=xi.root_datum);
  for s in w.word do xi:=right(xi,s) od; xi

{ left multiply by torus factor \exp(2i\pi v)\sigma_s }
set left ((ratvec,int)(v,s), Tits_elt xi) = Tits_elt:
  let (rd,u,phi) = left(s,xi) in (rd,(u+v)%1,phi)

{ right multiply by torus factor \exp(2i\pi v)\sigma_s }
set right (Tits_elt xi, (ratvec,int)(v,s)) = Tits_elt:
  let (rd,u,phi) = right(xi,s) in (rd,(v*xi.theta.inverse+u)%1,phi)

{ conjugate by simple reflection }
set conjugate (int s, Tits_elt xi) = Tits_elt:
  let sigma_s_inv = (ratvec,int): (coroot(xi.root_datum,s)/2 {=m_s},s) in
  right(left(s,xi),sigma_s_inv)

set conjugate (WeylElt w, Tits_elt xi) = Tits_elt:
  for s in w.word ~ do xi:=conjugate(s,xi) od; xi

{
  for general multiplication, we allow theta and eta to be in either of the
  W-cosets (that of the identity and of \delta). The basic formula is that if
  \sigma_\theta denotes the canonical lift of \theta to the Tits group, which
  is \sigma_w d where d is either the identity or \delta, then the product is

         \sigma_\theta \sigma_\eta = m_S \sigma_{\theta\eta},

  where S is the set of roots \theta(\eta(\Delta^+)\cap\Delta^-)\cap\Delta^+
  and m_S is the image in the torus of the set of the coroots corresponding to
  S. The code below actually computes S using matrices representing coroots as
  their columns (so that the passage from S to m_S is obtained by taking the
  half-sum modulo 1). The action of \theta,\eta is then by transpose inverse.
}
set multiply (Tits_elt(rd,v,theta), Tits_elt({assume rd},u,eta)) = Tits_elt:
  let tt1 = ^theta.inverse
  , neg_crs = columns_with(is_negative_coroot(rd),^eta.inverse*poscoroots(rd))
  in
  ( rd
  , ( v + tt1*u + sum(columns_with(is_positive_coroot(rd),tt1*neg_crs))/2 ) % 1
  , theta*eta
  )

set * = multiply@(Tits_elt,Tits_elt)

{ inverse uses the bicycle lemma (note the (2\-/2) "bicycle" structure):
   sigma_w*sigma_{w^{-1}} = exp(2\pi i(rho^vee-rho^vee*w^{-1})/2)
  whence
   inverse(Tits_elt:(0,theta)) = Tits_elt:(rho_check*(1-theta)/2,inverse(theta))
  (this formula remains valid in both cosets of W)
  and inverse(Tits_elt:(v,theta))=inverse(Tits_elt:(0,theta))*\exp(2\pi i * -v)
    = Tits_elt:(rho_check*(1-theta)/2-v*theta,inverse(theta))
}
set inverse (Tits_elt(rd,v,theta)) = Tits_elt:
  (rd, (rho_check(rd)*(1-theta)/2 - v*theta) % 1, theta.inverse)

{ canonical lift of Weyl group element, assumed reduced, to Tits group }
set lift (WeylElt w) = Tits_elt: left(w,tits_identity(w.root_datum))

{ canonical lift of Weyl group element to \delta-twisted Tits group }
set lift (mat delta, WeylElt w) = Tits_elt:
  left(w,tits_delta(w.root_datum,delta))
set lift (RealForm G, WeylElt w) = Tits_elt: left(w,tits_delta(G))


{ Tits element raised to an integer power }
set ^ (Tits_elt !xi, int n) = Tits_elt:
  if   >n then let result=xi in for :n-1 do result*:=xi od; result
  elif <n then let !xi1=xi.inverse then result=xi1 in
          for :n-1 do result*:=xi1 od; result
  else tits_identity(xi.root_datum)
  fi

set order (Tits_elt xi) = int:
  let id=tits_identity(xi.root_datum), d=order(xi.theta)
  in if xi^d=id then d elif xi^(2*d)=id then 2*d else error() fi
