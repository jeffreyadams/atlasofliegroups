<basic.at
<Weylgroup.at { for |lengthens| (both forms) }
<W_orbit.at

{ An element of the (\delta-extended) Tits group is represented by (RootDatum
  rd,ratvec v,mat theta) representing \exp(2\ii\pi v) \sigma_w d where \theta is
  the the action of wd on X^*, with w\in W and d is a distinguished involution
  of that lattice, allowing for both d=\delta and d=identity. In fact we do not
  directly represent w (separately from d), although we do implement
  multiplications by elements of W (where w represents the canonical lift
  \sigma_w) and we do have a well defined notion of length change for such
  operations, in terms of counting roots in the \theta image of the poscoroots.

  So v is a rational coweight taken modulo 1; theta need not be an involution.
  Note that theta is defined as operating from left on X^*; for left action of
  theta on v, use the transpose inverse (right-multiply v by inverse(theta)).

  The set of values for which \theta is the identity is the torus, an Abelian
  normal subgroup of our Tits group. The basic ingredients of the groups
  structure are the fact that (\sigma_s)^2 for Weyl group generators is a tutus
  element m_s, represented by v=simple_coroot(rd,s)/2, and the commutation
  relations \sigma_s*v=s(v)*\sigma_s where s(v)=v*M_s for the matrix M_s of s.

  Note that if we had used a doubled scale for v (and consequently the map
  $z\mapsto\exp(\ii\pi)$ as well as reduction modulo 2 rather than 1), this
  would have avoided many divisions by 2; it might have been a better idea.
}

set_type [ Tits_elt = (RootDatum root_datum,ratvec torus_part,mat theta) ]

{ equality test assumes the root data agree, without check (though it could) }
set = (Tits_elt(,v,theta),Tits_elt(,u,eta)) = bool: =(v-u)%1 and theta=eta
set != ((Tits_elt,Tits_elt)p) = bool: not =p

{ identity in Tits group }
set tits_identity (RootDatum rd) = Tits_elt:
  let r=rank(rd) in (rd,ratvec:null(r),id_mat(r))

{ element (torus factor=1)*delta in twisted Tits group }
set tits_delta (RootDatum rd,mat delta) = Tits_elt: (rd,null(rank(rd)),delta)
set tits_delta (RealForm G) = Tits_elt:
  tits_delta(RootDatum:G,distinguished_involution(InnerClass:G))

{ right multiplication by sigma_s, where s must index a simple root }
set right (Tits_elt(rd,v,theta), int s) = Tits_elt:
  ( rd
  , if lengthens(rd,theta,s) { valid even if theta=w.delta not in W }
    then v
    else v+coroot(rd,s)*theta.inverse/2 { got theta' m_s; permute factors }
    fi % 1
  , right_reflect(rd,theta,s)
  )

{ left multiplication by sigma_s, where s must index a simple root }
set left (int s,Tits_elt(rd,v,theta)) = Tits_elt:
  ( rd
  , { first sigma_a must cross exp(v), so act by s on v by coreflection: }
    let v1 = coreflect(rd,v,s) in
    if lengthens(rd,s,theta) { again valid even if theta=w.delta is not in W }
    then v1
    else v1+coroot(rd,s)/2 { second term represents m_s = sigma_s^2 }
    fi % 1
  , left_reflect(rd,s,theta)
  )

{ multiplication by canonical lift of WeylElt }
set left (WeylElt w,Tits_elt xi) = Tits_elt:
  assert(w.root_datum=xi.root_datum);
  for s in w.word ~ do xi:=left(s,xi) od; xi

set right (Tits_elt xi, WeylElt w) = Tits_elt:
  assert(w.root_datum=xi.root_datum);
  for s in w.word do xi:=right(xi,s) od; xi

{ left multiply by simple generator with a torus part: \exp(2i\pi v)\sigma_s }
set left ((ratvec,int)(v,s), Tits_elt xi) = Tits_elt:
  let (rd,u,phi) = left(s,xi) in (rd,(u+v)%1,phi)

{ right multiply by simple generator with a torus part: \exp(2i\pi v)\sigma_s }
set right (Tits_elt xi, (ratvec,int)(v,s)) = Tits_elt:
  let (rd,u,phi) = right(xi,s) in (rd,(v*xi.theta.inverse+u)%1,phi)

{ conjugate by simple generator sigma_s }
set conjugate (int s, Tits_elt xi) = Tits_elt:
  let sigma_s_inv = (ratvec,int): (coroot(xi.root_datum,s)/2 {=m_s},s) in
  right(left(s,xi),sigma_s_inv)

{ conjugate by canonical lift sigma_w of Weyl group element }
set conjugate (WeylElt w, Tits_elt xi) = Tits_elt:
  for s in w.word ~ do xi:=conjugate(s,xi) od; xi

{
  for general multiplication, we allow theta and eta to be in either of the
  W-cosets (that of the identity and of \delta). The basic formula is that if
  \sigma_w denotes the canonical lift of w to the Tits group, then one has

         \sigma_{w_1} \sigma_{w_2} = m_{S(w_1,w_2)} \sigma_{w_1 w_2} ,

  where the set of posroots

         S(w_1,w_2) = \Delta^+ \cap w( \Delta^- \cap w'(\Delta^+) ) ,

  is transformed into a torus element m_{S(w_1,w_2)} by applying the map
  v\mapsto\exp(\pi\ii t) to the sum of the corresponding coroots. (The proof is
  by induction on the length of w_1: for the statrting case w_1=e, the set S is
  empty making the result trivial. Otherwise write w_1=sw with l(w)<l(w_1):
  then S(w_1,w_2) is obtained from s.S(w,w_1) (which is a set of posroots) by
  possibly adding the simple root \alpha_s, in the case l(w_1w_2)<l(ww_2).)

  The code below actually computes S using matrices representing coroots as
  their columns (so that the passage from S to m_S is obtained by taking the
  half-sum of the columns modulo 1). The action of \theta,\eta on such a matrix
  is then by left multiplication by the transpose inverse (a right-action).
}
set multiply (Tits_elt(rd,v,theta), Tits_elt({assume rd},u,eta)) = Tits_elt:
  let tt1 = ^theta.inverse
  , neg_crs = columns_with(is_negative_coroot(rd),^eta.inverse*poscoroots(rd))
  in
  ( rd
  , ( v + tt1*u + sum(columns_with(is_positive_coroot(rd),tt1*neg_crs))/2 ) % 1
  , theta*eta
  )

set * = multiply@(Tits_elt,Tits_elt)

{ inverse uses the bicycle lemma (note the (2\.../2) "bicycle" structure):
   sigma_w*sigma_{w^{-1}} = exp(2\pi i(rho^vee-rho^vee*w^{-1})/2)
   {this is a joke; the two 2's cancel, but doing so destroys the bicycle image}
  whence
   inverse(Tits_elt:(0,theta)) = Tits_elt:(rho_check*(1-theta)/2,inverse(theta))
  (this formula remains valid in both cosets of W)
  and inverse(Tits_elt:(v,theta))=inverse(Tits_elt:(0,theta))*\exp(2\pi i * -v)
    = Tits_elt:(rho_check*(1-theta)/2-v*theta,inverse(theta))
}
set inverse (Tits_elt(rd,v,theta)) = Tits_elt:
  (rd, (rho_check(rd)*(1-theta)/2 - v*theta) % 1, theta.inverse)

{ canonical lift of Weyl group element, assumed reduced, to Tits group }
set lift (WeylElt w) = Tits_elt: left(w,tits_identity(w.root_datum))

{ canonical lift of Weyl group element to \delta-twisted Tits group }
set lift (mat delta, WeylElt w) = Tits_elt:
  left(w,tits_delta(w.root_datum,delta))
set lift (RealForm G, WeylElt w) = Tits_elt: left(w,tits_delta(G))


{ Tits element raised to an integer power }
set ^ (Tits_elt !xi, int n) = Tits_elt:
  if   >n then let result=xi in for :n-1 do result*:=xi od; result
  elif <n then let !xi1=xi.inverse then result=xi1 in
          for :n-1 do result*:=xi1 od; result
  else tits_identity(xi.root_datum)
  fi

set order (Tits_elt xi) = int:
  let id=tits_identity(xi.root_datum), d=order(xi.theta)
  in if xi^d=id then d elif xi^(2*d)=id then 2*d else error() fi
