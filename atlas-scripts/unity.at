<to_ht.at
<goodroots.at

{ To test a bunch of parameters attached to one KGB element x, and one
lambda, a good
idea might be to compute N =  next_to_lowest((x,lambda)); then on each
parameter p run unitarity_test(p,N) }

{. gives (one of) the K-types of lowest height above mu in the
standard of LKT mu .}
set next_to_lowest(KType mu) = KType:
    let (,tau) = first_term(K_type_formula(mu) - mu)
    in tau

{. height of a smallest non-lowest K_type of standard with LKT mu .}
set next_height(KType mu)  = int:
    height(next_to_lowest(mu))

{. height of a smallest non-lowest K_type of p .}
set next_height(Param p) = int:
    height(next_to_lowest(LKTs(p)[0]))

{. tests unitarity first on LKTs, then on next-to-lowest, then
everywhere .}
set is_unitary_test(Param p) = bool:
    is_pos_on_LKTs(p) and
    is_unitary_to_ht(p, next_height(p)) and
    is_unitary(p)

{. same as previous if next_height N is known .}
set is_unitary_test(Param p, int N) = bool:
    is_pos_on_LKTs(p) and
    is_unitary_to_ht(p, N) and
    is_unitary(p)

set is_unitary_test2(Param p) = bool:
    is_pos_on_LKTs(p) and
    is_unitary_to_ht(p, height(p) + 4) and
    is_unitary(p)


set is_unitary_test3(Param p) = bool:
    is_pos_on_LKTs(p) and
    is_unitary_to_ht(p, height(p) + 4) and
    is_unitary_to_ht(p, next_height(p)) and
    is_unitary(p)

set is_unitary_testSPHF48(Param p) = bool:
    is_unitary_to_ht(p, 8) and
    is_unitary(p)

set is_unitary_testSPHF411(Param p) = bool:
    is_unitary_to_ht(p, 11) and
    is_unitary(p)

set is_unitary_testSPHF4811(Param p) = bool:
    is_unitary_to_ht(p, 8) and
    is_unitary_to_ht(p,11) and
    is_unitary(p)

set is_unitary_testSPHF481115(Param p) = bool:
    is_unitary_to_ht(p, 8) and
    is_unitary_to_ht(p,11) and
    is_unitary_to_ht(p,15) and
    is_unitary(p)

set is_unitary_testSPHF4815(Param p) = bool:
    is_unitary_to_ht(p, 8) and
    is_unitary_to_ht(p,15) and
    is_unitary(p)

set is_unitary_testSPHF4816(Param p) = bool:
    is_unitary_to_ht(p, 8) and
    is_unitary_to_ht(p,16) and
    is_unitary(p)

set is_unitary_testSPHF481121(Param p) = bool:
    is_unitary_to_ht(p, 8) and
    is_unitary_to_ht(p,11) and
    is_unitary_to_ht(p,21) and
    is_unitary(p)

set G=F4_s
set nus = for b in box(5,4) do b/4 od
set x = x_open(G)
set ps = for nu in nus do parameter(x,[1,1,1,1],nu) od
