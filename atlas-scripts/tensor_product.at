<K_types.at
<K_highest_weights.at { |LKT@Param|, |dimension@K_Type| }
<K_norm.at
<nci_nilrad_roots.at

set N=100 {cutoff for branching}

{given a set of rational vectors all of the same length
 for each of the 2^n subsets return the sum
 application: given a subalgebra u this computes all the weights of wedge(u)
}

{add up the dimensions of terms in a K_Type_Pol}
set dimension (K_Type_Pol P) = int:
   sum(for c@p in P do split_as_int(c)*dimension(LKT(p)) od)

set dimension_u_cap_s(Parabolic P)=int:#nci_nilrad_roots_restricted_to_H_theta(P.x_min,P)
set dimension_wedge_u_cap_s(Parabolic P)=int:2^dimension_u_cap_s(P)

{simply add H to p.lambda and standardize the result}
set add_weight (Param p,ratvec H)=ParamPol:
  let shift=if =H then null(rank(p.root_datum)) else H fi in   
   standardize(parameter(p.x,p.lambda+shift,p.nu))*0

set add_weights (Param p,(KGBElt->[ratvec]) weights)=ParamPol:
   let rv=null_module(p.real_form) in
    for H in weights(p.x) do rv+:=add_weight(p,H) od;rv

{simply add H to each term of P, standardize the results}
set add_weight (ParamPol P,ratvec H)=ParamPol:
   let result=null_module(P.real_form) in
   for coeff@p in P do result+:=coeff*add_weight(p,H) od;
   result

{given a function f: KGBElt -> ratvec, replace each p=(x,lambda,nu) with 
standard(parameter(x,lambda+f(x),nu))}
set add_weight (ParamPol P,(KGBElt->ratvec) f)=ParamPol:
   let result=null_module(P.real_form) in
   for coeff@p in P do
    let H=f(p.x) in prints("NOW H=",H);
    result+:=coeff*add_weight(p,H) od;
   result

{same as previous, applied to a ParamPol}
set add_weights (ParamPol P,(KGBElt ->[ratvec]) f)=ParamPol:
   let result=null_module(P.real_form) in
   for coeff@p in P do
   if #f(p.x)!=0 then 
    for H in f(p.x) do 
      result+:=coeff*add_weight(p,H)
    od
   fi
   od;
   result

{add weight (given by function f) to K_type_formula(mu)}
set add_weight (K_Type mu,(KGBElt->ratvec) f)=ParamPol:
   add_weight(K_type_formula(mu),f)

{add weights (given by function f) to K_type_formula(mu)}
set add_weights (K_Type mu,(KGBElt->[ratvec]) f)=ParamPol:
   let P=K_type_formula(mu) in add_weights(P,f)

{given a K_type mu and a function f:KGB->[ratvec],
 compute mu\otimes (K-type given by the weights)
 the bound here shouldn't be necessary: add_weights(mu,weights) is a finite sum 
 of K-types, the bound just needs to be big enough to get them all
see the next command
}
set tensor_product(K_Type mu,(KGBElt -> [ratvec]) weights,int bound)=K_Type_Pol:
   branch_std(add_weights(mu,weights),bound)

{choose the bound appropriately: not at all sure this is right}
set tensor_product(K_Type mu,(KGBElt -> [ratvec]) weights)=K_Type_Pol:
let P=add_weights(mu,weights) in branch_std(P,height(P))

{The Main Function
 L=Levi(P), P=theta-stable parabolic in G
 mu_L=L\cap K-type
 compute mu_L\otimes wedge(u\cap s)
 this is simply branch_std(add_weights(mu_L,weights),bound)
}
set tensor_product_u_cap_s(K_Type mu_L,Parabolic P,int bound)=ParamPol:
tensor_product(mu_L,sums_nci_nilrad_roots_restricted_to_H_theta(P),bound)

set tensor_product_wedge_k_u_cap_s(K_Type mu_L,Parabolic P,int bound,int k)=ParamPol:
tensor_product(mu_L,sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P,k),bound)

set tensor_product_wedge_k_u_cap_s(K_Type mu_L,Parabolic P,int k)=ParamPol:
tensor_product(mu_L,sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P,k))

{a few dimension tests}
set test(K_Type mu_L,Parabolic P, int bound)=bool:
dimension(tensor_product_u_cap_s(mu_L,P,bound))=dimension(mu_L)*dimension_wedge_u_cap_s(P)

set test([K_Type] lktypes,Parabolic P, int bound)=bool:
let failed = [] in
for mu@i in lktypes do
 let t=test(mu,P,bound) in
 if not t then failed#:=i fi
od;
if #failed=0 then true else prints("failed: ",failed);false fi

set test(int bound,Parabolic P)=bool:
test(K_parameters_norm_upto(Levi(P),bound,rho_check(P.root_datum)),P,bound)

set test_long([K_Type] lktypes,Parabolic P,int bound)=void:
for mu in lktypes do
 let tp=tensor_product_u_cap_s(mu,P,bound) in
 prints("-----------------",new_line,"mu: ", mu, new_line, "dimension(mu): ", dimension(mu),new_line, "dimension wedge(u\cap s):", dimension_wedge_u_cap_s(P), 
new_line,"dim(u)*dim(wedge):", dimension(mu)*dimension_wedge_u_cap_s(P),new_line, "tensor product: ", tp,new_line,"dimension of tensor product: ",dimension(tp),
new_line,"dim(mu)*dim(wedge)=dim(tp):",dimension(mu)*dimension_wedge_u_cap_s(P)=dimension(tp)) od


