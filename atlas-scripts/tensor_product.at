<basic.at
<K_types.at
<K_highest_weights.at { |LKT@Param|, |dimension@KType| }
<K_norm.at
<nci_nilrad_roots.at

set N=100 {cutoff for branching}

set K_type_formula (KType t) = KTypePol: { without height bound }
   K_type_formula(t,minus_1)

{given a set of rational vectors all of the same length
 for each of the 2^n subsets return the sum
 application: given a subalgebra u this computes all the weights of wedge(u)
}

{add up the dimensions of terms in a KTypePol}
set dimension (KTypePol P) = int:
   sum(for c@p in P do split_as_int(c)*dimension(LKT(p)) od)

set dimension_u_cap_s(Parabolic P)=int:#nci_nilrad_roots_restricted_to_H_theta(P.x_min,P)
set dimension_wedge_u_cap_s(Parabolic P)=int:2^dimension_u_cap_s(P)

{simply add H to p.lambda and standardize the result}
set add_weight (Param p,ratvec H) = KTypePol:
  K_type(parameter(p.x,p.lambda+H,p.nu))

set add_weights (Param p,(KGBElt->[ratvec]) weights) = KTypePol:
   sum(p.real_form,for H in weights(p.x) do add_weight(p,H) od)

{simply add H to each term of P, standardize the results}
set add_weight (ParamPol P,ratvec H) = KTypePol:
   sum(P.real_form,for coef@p in P do coef*add_weight(p,H) od)

{given a function f: KGBElt -> ratvec, replace each p=(x,lambda,nu) with
standard(parameter(x,lambda+f(x),nu))}
set add_weight (ParamPol P,(KGBElt->ratvec) f) = KTypePol:
   sum(P.real_form, for coef@p in P do coef*add_weight(p,f(p.x)) od)

{same as previous, applied to a ParamPol}
set add_weights (ParamPol P,(KGBElt ->[ratvec]) weights) = KTypePol:
   sum(P.real_form,
       for coef@p in P do for H in weights(p.x) do coef*add_weight(p,H) od od.##
      )

{ this is what probaby should be preferred to the above functions }
set add_weight (KTypePol P,(KGBElt->vec) f) = KTypePol:
   P.null_K_module +
   for coef@t in P do let (x,lr)=%t in (coef,K_type(x,lr+f(x))) od

{same as previous, applied to a ParamPol}
set add_weights (KTypePol P,(KGBElt ->[vec]) weights) = KTypePol:
   P.null_K_module +
   for coef@t in P
   do let (x,lr)=%t in for H in weights(x) do (coef,K_type(x,lr+H)) od
   od.##

{add weight (given by function f) to K_type_formula(mu)}
set add_weight (KType t,(KGBElt->vec) f) = KTypePol:
   add_weight(K_type_formula(t),f)

{add weights (given by function f) to K_type_formula(mu)}
set add_weights (KType t,(KGBElt->[vec]) f)=KTypePol:
   add_weights(K_type_formula(t),f)

{given a K_type mu and a function f:KGB->[vec],
 compute mu\otimes (K-type given by the weights)
 the bound here shouldn't be necessary: add_weights(mu,weights) is a finite sum
 of K-types, the bound just needs to be big enough to get them all
see the next command
}
set tensor_product(KType t,(KGBElt -> [vec]) weights,int bound) = KTypePol:
   branch_std(add_weights(t,weights),bound)

{choose the bound appropriately: not at all sure this is right}
set tensor_product(KType t,(KGBElt -> [vec]) weights)=KTypePol:
   let P=add_weights(t,weights) in branch_std(P,height(P))

{The Main Function
 L=Levi(P), P=theta-stable parabolic in G
 mu_L=L\cap K-type
 compute mu_L\otimes wedge(u\cap s)
 this is simply branch_std(add_weights(mu_L,weights),bound)
}
set tensor_product_u_cap_s (KType mu_L,Parabolic P,int bound) = KTypePol:
   tensor_product(mu_L,sums_nci_nilrad_roots_restricted_to_H_theta(P),bound)

set tensor_product_wedge_k_u_cap_s (KType mu_L,Parabolic P,int bound,int k) =
      KTypePol:
   tensor_product(mu_L
                 ,sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P,k)
		 ,bound)

set tensor_product_wedge_k_u_cap_s (KType mu_L,Parabolic P,int k) = KTypePol:
   tensor_product(mu_L,sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P,k))

{a few dimension tests}
set test (KType mu_L,Parabolic P, int bound) = bool:
   dimension(tensor_product_u_cap_s(mu_L,P,bound)) =
   dimension(mu_L)*dimension_wedge_u_cap_s(P)

set test ([KType] lktypes,Parabolic P, int bound) = bool:
   let failed =
      for mu@i in lktypes do if test(mu,P,bound) then [] else [i] fi od.##
   then off=#failed
in if >off then prints("failed: ",failed) fi; =off

set test(int bound,Parabolic P) = bool:
   test(K_parameters_norm_upto(Levi(P),bound,rho_check(P.root_datum)),P,bound)

set test_long([KType] lktypes,Parabolic P,int bound) = void:
   for mu in lktypes
   do let tp=tensor_product_u_cap_s(mu,P,bound) in
      prints("-----------------",new_line
            ,"mu: ", mu, new_line
	    , "dimension(mu): ", dimension(mu),new_line
	    , "dimension wedge(u\cap s):", dimension_wedge_u_cap_s(P),new_line
	    ,"dim(u)*dim(wedge):"
	      , dimension(mu)*dimension_wedge_u_cap_s(P),new_line
	    , "tensor product: ", tp,new_line
	    ,"dimension of tensor product: ",dimension(tp),new_line
	    ,"dim(mu)*dim(wedge)=dim(tp):"
	      ,dimension(mu)*dimension_wedge_u_cap_s(P)=dimension(tp)
	    )
   od
