<basic.at
<K_types.at
<K_highest_weights.at { |LKT@Param|, |dimension@KType| }
<K_norm.at
<nci_nilrad_roots.at

set N=100 {cutoff for branching}

set K_type_formula (KType t) = KTypePol: { without height bound }
   K_type_formula(t,minus_1)

{given a set of rational vectors all of the same length
 for each of the 2^n subsets return the sum
 application: given a subalgebra u this computes all the weights of wedge(u)
}

{add up the dimensions of terms in a KTypePol}
set dimension (KTypePol P) = int:
   sum(for c@p in P do split_as_int(c)*dimension(LKT(p)) od)

set dimension_u_cap_s(Parabolic P)=int:#nci_nilrad_roots_restricted_to_H_theta(P.x_min,P)
set dimension_wedge_u_cap_s(Parabolic P)=int:2^dimension_u_cap_s(P)

{NOTE:
 KType is (KGBElt, ratvec)
 Typical KType is written mu=(x,lambda) for lambda a ratvec; mu.lambda=lambda
 HOWEVER
 but K_type(x,tau) is only defined for tau a vec  (better to use tau not lambda here)
 mu=K_type(x,tau) => mu.lambda=tau+rho
 mu=(x,lambda) => mu=K_type(x,ratvec_as_vec(lambda-rho))
 for example: K_type(x,[0,...,0])=(x,rho)
}

{K_type(x,tau)=(x,tau+rho)  *all tau \in X^**
 (x,lambda)=K_type(x,lambda-rho)          *all lambda in X^*+\rho
 K_type(x,tau)=(x,tau+rho)=(wx,w(tau+rho))=K_type(wx,w\tau + (w\rho-rho))
 Conclusion: w:K_type(x,tau) -> K_type(x,w\tau + (w\rho-rho)) for *any* tau\in X^*
}

set *(WeylElt w,KType mu)=KType:
   let x=mu.x then
   lambda=mu.lambda {ratvec} then
   rho=mu.root_datum.rho then
   tau=lambda-rho {vec; mu=K_type(x,tau)}
   in K_type(cross(w,x),ratvec_as_vec(w*tau + w*rho-rho))

set make_dominant(KType tau)=KType:
    let lambda=tau.lambda then  {lambda is a ratvec}
    x=tau.x then
    (w,lambda_dom)=to_dominant(tau.root_datum,lambda) in
    K_type(cross(w,x),ratvec_as_vec(lambda_dom-tau.root_datum.rho))

set add_weight_to_KType(KType mu,vec H)=KType:
     let mu_new=K_type(mu.x, ratvec_as_vec(mu.lambda+H-mu.root_datum.rho))
{    let mu_dom=make_dominant(mu_new) in}
{     prints("mu_dom: ", mu_dom);mu_dom}  in mu_new

{set add_weights (Param p,(KGBElt->[ratvec]) weights) = KTypePol:
   sum(p.real_form,for H in weights(p.x) do add_weight(p,H) od)}

{DO NOT put in a KParamPol: this will finalize terms which shouldn't be finalized}
set add_weights_to_KType(KType mu,(KGBElt->[vec]) weights) = [KType]:
   for H in weights(mu.x) do add_weight_to_KType(mu,H) od

{simply add H to each term of P, standardize the results}
set add_weight_to_KTypePol (KTypePol P,vec H) = [(Split,KType)]:
   for coef@p in P do (coef,add_weight_to_KType(p,H)) od

{given a function f: KGBElt -> vec, replace each p=(x,lambda,nu) with
standard(parameter(x,lambda+f(x),nu))}
{set add_weights_to_KTypePol(KTypePol P,(KGBElt->vec) f) = KTypePol:
   sum(P.real_form, for coef@p in P do coef*add_weight_to_KType(p,f(p.x)) od)
}
{ this is what probably should be preferred to the above functions }
{set add_weight (KTypePol P,(KGBElt->vec) f) = KTypePol:
   P.null_K_module +
   for coef@t in P do let (x,lr)=%t in (coef,K_type(x,lr+f(x))) od
   }

{same as previous, applied to a KTypePol}
set add_weights_old(KTypePol P,(KGBElt ->[vec]) weights) = KTypePol:
   P.null_K_module +
   for coef@t in P 
   do {prints("c,t", coef, " ", t);}
   let (x,lr)=%t in prints("x=",x, " ", x.real_form, " lr=",lr);
   for H in weights(x) do prints("coeff:", coef, "x: ", x, "lr", lr,"H=",H);(coef,K_type(x,lr+H)) od
   od.##

set add_weights_to_KTypePol_old (KTypePol P,(KGBElt ->[vec]) weights) = KTypePol:
print("CC");
   P.null_K_module +
   for coef@t in P do
   prints("c,t", coef, " ", t);
   let (x,lr)=%t in
   prints("  x=",x, " ", x.real_form, " lr=",lr);
   for H in weights(x) do
   prints("  coeff:", coef, "x: ", x, "lr", lr,"H=",H);
   let mu=K_type(x,lr+H) then
   mu_dom=make_dominant(mu) in 
   (coef,mu_dom) od
   od.##

set add_weights_to_KTypePol (KTypePol P,(KGBElt ->[vec]) weights) = [(Split,KType)]:
   for coef@mu in P do
   let (x,lr)=%mu in
   for H in weights(x) do
   (coef,add_weight_to_KType(mu,H)) od od.##

{add weight (given by function f) to K_type_formula(mu)}
set add_weights_to_KType_formula (KType t,(KGBElt->[vec]) f) = [(Split,KType)]:
   add_weights_to_KTypePol(K_type_formula(t),f)

{given a K_type mu and a function f:KGB->[vec],
 compute mu\otimes (K-type given by the weights)
 the bound here shouldn't be necessary: add_weights(mu,weights) is a finite sum
 of K-types, the bound just needs to be big enough to get them all
see the next command
}

set tensor_product(KType t,(KGBElt -> [vec]) weights,int bound) = KTypePol:
   let pairs=add_weights_to_KType_formula(t,weights) in
   sum(t.real_form,for (c,mu) in pairs do branch_std(c*mu,bound) od)
   

{   branch_std(add_weights_to_KType_formula(t,weights),bound)}

{choose the bound appropriately: not at all sure this is right}
set tensor_product(KType t,(KGBElt -> [vec]) weights)=KTypePol:
   let pairs=add_weights_to_KType_formula(t,weights) then
   bound=max(for (,P) in pairs do height(P) od) in 
   sum(t.real_form,for (c,mu) in pairs do branch_std(c*mu,bound) od)



{The Main Function
 L=Levi(P), P=theta-stable parabolic in G
 mu_L=L\cap K-type
 compute mu_L\otimes wedge(u\cap s)
 this is simply branch_std(add_weights(mu_L,weights),bound)
}
set tensor_product_u_cap_s (KType mu_L,Parabolic P,int bound) = KTypePol:
   tensor_product(mu_L,sums_nci_nilrad_roots_restricted_to_H_theta(P),bound)

set tensor_product_wedge_k_u_cap_s (KType mu_L,Parabolic P,int bound,int k) =
      KTypePol:
   tensor_product(mu_L
                 ,sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P,k)
		 ,bound)

set tensor_product_wedge_k_u_cap_s (KType mu_L,Parabolic P,int k) = KTypePol:
   tensor_product(mu_L,sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P,k))

{a few dimension tests}
set test (KType mu_L,Parabolic P, int bound) = bool:
   dimension(tensor_product_u_cap_s(mu_L,P,bound)) =
   dimension(mu_L)*dimension_wedge_u_cap_s(P)

set test ([KType] lktypes,Parabolic P, int bound) = bool:
   let failed =
      for mu@i in lktypes do if test(mu,P,bound) then [] else [i] fi od.##
   then off=#failed
in if >off then prints("failed: ",failed) fi; =off

set test(int bound,Parabolic P) = bool:
   test(K_parameters_norm_upto(Levi(P),bound,rho_check(P.root_datum)),P,bound)

set test_long([KType] lktypes,Parabolic P,int bound) = void:
   for mu in lktypes
   do let tp=tensor_product_u_cap_s(mu,P,bound) in
      prints("-----------------",new_line
            ,"mu: ", mu, new_line
	    , "dimension(mu): ", dimension(mu),new_line
	    , "dimension wedge(u\cap s):", dimension_wedge_u_cap_s(P),new_line
	    ,"dim(u)*dim(wedge):"
	      , dimension(mu)*dimension_wedge_u_cap_s(P),new_line
	    , "tensor product: ", tp,new_line
	    ,"dimension of tensor product: ",dimension(tp),new_line
	    ,"dim(mu)*dim(wedge)=dim(tp):"
	      ,dimension(mu)*dimension_wedge_u_cap_s(P)=dimension(tp)
	    )
   od

{Multiplicity of the weight wt in the finite dimensional algebraic rep'n with
  highest weight FD}
set wt_mult (RealForm G, vec FD, vec wt)=int:
   let KT=complex_KT(G,FD),GC=complexification(G)
   then I_wt=parameter(x_open(GC),wt##null(rank(G)),null(rank(GC)))
   in split_as_int(branch_std(I_wt,height(KT))[KT])


{Parameter obtained from adding the weight H to both lambda and nu, which may
be non-dominant; and finalize}
set add_wt_to_param (Param p, vec H)=ParamPol:
   parameter(p.x,p.lambda+H,p.nu+H)


{Compute the tensor product of an irreducible representation with a finite
dimensional algebraic representation of highest wwight FD}
set tensor_with_fd (Param p, vec FD)=ParamPol:
   let cf=character_formula(p), G=real_form(p)
   then Wts=wts_of_fd(G,FD)
   then temp=
             for c@m in cf
             do for k@mu in Wts
	        do (c,k,add_wt_to_param (m,ratvec_as_vec(lambda(mu))))
		od
	     od
   in sum (G,##for A in temp do for (c,k,P) in A do c*k*P od od).composition_series

