<weak_packets.at

{computing weak packets using precomputed cell_traces mainly used for E8_s}
{NOTE: to enable the E8 functionality, delete the lines {CUT and /CUT},
which prevent loading E8 data by default, since it is slow, and requires
100 GB of ram}

{weak_packet:
 given: a RootDatum rd and an even orbit O_check for the dual,
 a SpringerTable for rd,
 "cell_data": precomputed cell characters
 compute weak packet using the precomputed cell characters
Typical usage:
given RealForm G, SpringerTable st,
[Param] for G
set data=cell_and_character_data(st.ct,parameters) then
set wp=weak_packet(st,data)
for G=E8, don't compute cell_and_character data this way, see below
}

{get RealForm from cell_and_character_data}
set real_form([(([Param],[WCell]),[([int],[int])])] data)=RealForm:
let ((a,),)=data[0] in a[0].real_form

set weak_packet_int(
SpringerTable st_int,
ComplexNilpotent O_check,
[(([Param],[WCell]),[([int],[int])])] cell_and_character_data)=
([([Param],[WCell])],[(int,int,Param)]):
assert(is_locally_isomorphic(integrality_datum(O_check.root_datum.dual,O_check.H/2),st_int.root_datum),
 "root datum mismatch, probably not using the integrality datum for the orbit");
let gamma_target=O_check.H/2 then
()=if cells_verbose then
 prints("gamma_target:",gamma_target);
 prints("Computing weak packet for ", #cell_and_character_data, " blocks ",
 "dual orbit:",new_line, " dual root datum: ", O_check.root_datum,new_line, " diagram: ", O_check.diagram, new_line,
 " normalized diagram: ", O_check.diagram_normalized, new_line,
 " H: ", O_check.H, new_line,
 " dimension: ", O_check.dim_nilpotent)
fi then
()=prints("using precomputed parameters and cells ") then
()=if cells_verbose then prints("inf. char.=",gamma_target) fi then
 O=st_int.dual_map_i(O_check) then
 ()=if cells_verbose then
  prints("orbit:",new_line, " root datum: ", O.root_datum, new_line, " diagram: ", O.diagram, new_line,
   " normalized diagram: ", O.diagram_normalized, new_line,
   " H: ", O.H, new_line,
   " dimension: ", O.dim_nilpotent)
fi then
sigma=st_int.springer(O) then
()=if cells_verbose
   then prints("sigma=", sigma, " of dimension ",dimension(st_int.ct,sigma))
   fi
then
wp=parameters_given_AV_infinitesimal_character(st_int,O,gamma_target,cell_and_character_data) then
cell_data=for (d,) in cell_and_character_data do d od in
(cell_data,wp)

set weak_packet_int(
SpringerTable st_int,
ComplexNilpotent O_check,
(([Param],[WCell ]),[([int],[int])]) cell_and_character_data)=
([([Param],[WCell])],[(int,int,Param)]):
weak_packet_int(st_int,O_check,[cell_and_character_data])

{same as previous, running over a set of orbits, use precomputed version iff the orbit is even}
set weak_packets(
SpringerTable st,
[ComplexNilpotent] dual_orbits,
[(([Param],[WCell]),[([int],[int])])] cell_and_character_data)=[([([Param],[WCell])],[(int,int,Param)])]:
for O_check in dual_orbits do
 if O_check.is_even then weak_packet_int(st,O_check,cell_and_character_data)
  else
  let (d,)=prints("odd case");cell_and_character_data[0] then
  (params,)=d then
  G=params[0].real_form in weak_packet(O_check,G)
 fi
od

set weak_packet(SpringerTable st,ComplexNilpotent O_check,
[(([Param],[WCell]),[([int],[int])])] cell_and_character_data)=([([Param],[WCell])],[(int,int,Param)]):
 if O_check.is_even then weak_packet_int(st,O_check,cell_and_character_data)
  else
  let (d,)=prints("odd case");cell_and_character_data[0] then
  (params,)=d then
  G=params[0].real_form in weak_packet(O_check,G)
 fi



set weak_packets(
SpringerTable st,
[ComplexNilpotent] dual_orbits,
(([Param],[WCell]),[([int],[int])]) cell_and_character_data)=[([([Param],[WCell])],[(int,int,Param)])]:
weak_packets(st,dual_orbits,[cell_and_character_data])

{weak_packets(st,data):
 run over G.root_datum.dual_orbits (G is included in data)
 note: NOT st.root_datum.dual_orbits
 if orbit O_check is not even, use the usual algorithm weak_packets(O_check,G)
 if it is even, use the precomputed version weak_packets(st,O_check,data)
}
set weak_packets(
SpringerTable st,
[(([Param],[WCell]),[([int],[int])])] cell_and_character_data)=[([([Param],[WCell])],[(int,int,Param)])]:
weak_packets(st,cell_and_character_data.real_form.dual_orbits,cell_and_character_data)

{compute SpringerTable also}
set weak_packets(RealForm G,[ComplexNilpotent] dual_orbits,
[(([Param],[WCell]),[([int],[int])])] cell_and_character_data)=
[([([Param],[WCell])],[(int,int,Param)])]:
weak_packets(Springer_table(G),dual_orbits,cell_and_character_data)

set weak_packets(RealForm G,[ComplexNilpotent] dual_orbits,
(([Param],[WCell]),[([int],[int])]) cell_and_character_data)=
[([([Param],[WCell])],[(int,int,Param)])]:
weak_packets(Springer_table(G),dual_orbits,[cell_and_character_data])

{prepare cell_data for input to weak_packets(st,O,cell_data)}
set cell_and_character_data (CharacterTable ct,[Param] parameters) =
      [ ([Param],[WCell]) ,[ [int],[int] ] ]:
   for (,cells):params_and_cells in blocks_and_cells(parameters)
   do ( params_and_cells
      , for cell in cells
        do ( cell.labels, cell_character(ct.class_table,cell) )
	od
      )
   od

set cell_and_character_data (CharacterTable ct,RealForm G) =
      [ ([Param],[WCell]) ,[ [int],[int] ] ]:
   assert(ct.root_datum = G.root_datum, "Root datum mismatch");
   cell_and_character_data(ct,all_parameters_gamma(G,rho(G)))

set weak_packets_pre (RealForm G,CharacterTable ct) =
      [ [[Param],[WCell]], [int,int,Param] ]:
   weak_packets(G,G.dual_orbits,cell_and_character_data(ct,G))

{ stuff particular to E8:  }
{compute cell_and_character_data for each block of G=E8_s (tiny, small, big)
also SpringerTable for G
this can then be used to call:
weak_packet(st,G,dual_orbit,data),
weak_packets(st,G,dual_orbits,data)
weak_packets(st,G,data)
}
{comment this out to avoid loading except when necessary:}
{CUT

<E8_big_block_parameters.at     {parameters_big: [Param]: big block}
<E8_big_block_cell_parameter_numbers.at   {cells_big=[[int]]}
<E8_big_block_cell_characters.at  {cell_characters_big=[[int]]}
<E8_big_block_cells.at  {E8_big_block_cells=[([int],[([int],[(int,int)])])]}


<E8_small_block_parameters.at     {parameters_small: [Param]: small block}
<E8_small_block_cell_parameter_numbers.at  {cells_small=[[int]]}
<E8_small_block_cell_characters.at  {cell_characters_small=[[int]]}
<E8_small_block_cells.at  {E8_small_block_cells=([int],([([int],[(int,int)])]))}
prints("loaded files")

set irreducible_PS=parameter(G.x_open,null(8),rho(G))
set cells_tiny=W_cells(irreducible_PS)

set p=parameter(G.trivial.x, 2*rho(G),rho(G))
set cell_and_characters_tiny_block=(([p],cells_tiny),[([0],[int]:ones(112))])

set E8_dual_orbits=G.dual_orbits
prints("defined dual orbits")
set E8_dual_orbits_even=G.even_dual_orbits
prints("defined dual even orbits")

set cell_and_characters_big_block=((parameters_big,E8_big_block_cells),for i:#cells_big do (cells_big[i], cell_characters_big[i]) od)
prints("defined cell_and_characters_big_block")

set cell_and_characters_small_block=((parameters_small,E8_small_block_cells),for i:#cells_small do (cells_small[i], cell_characters_small[i]) od)
prints("defined cell_and_characters_small_block")

set E8_cell_and_character_data=[cell_and_characters_big_block,cell_and_characters_small_block,cell_and_characters_tiny_block]

{comment out either the first line or lines 2-4}
prints("Springer table already defined")
prints("Defining Springer table")
set E8_st=Springer_table(simply_connected(E8))
prints("defined Springer table")



{set wp=weak_packets(st_E8,E8_dual_orbits,E8_cell_and_character_data)}




/CUT}

{assuming the lines between CUT and /CUT have been loaded,
then weak_packets(st,orbits,all_cell_data) will
compute all weak packets for E8_s
weak_packets(st,orbits,cell_and_characters_*_block)
where *=tiny,small,or big
compute the weak packets coming from these blocks
}
