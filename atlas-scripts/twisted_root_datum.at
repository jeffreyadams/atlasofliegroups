<affine.at
<conjugate.at


set is_distinguished(RootDatum rd,mat delta)=bool:
all(for alpha in rd.simple_roots do find(rd.simple_roots,delta*alpha) !=-1 od)

set_type TwistedRootDatum= (RootDatum rd, mat delta)

set twisted_root_datum(RootDatum rd,mat T)=TwistedRootDatum:(rd,T)

set *(TwistedRootDatum (rd1,delta1),TwistedRootDatum (rd2,delta2))=TwistedRootDatum:(rd1*rd2,block_matrix(delta1,delta2))
{order of twist: not just the order of delta
reason: given (rd,delta) we consider (factor,delta)
where factor is delta-invariant
}
set order_twist(TwistedRootDatum (rd,delta))=int:
assert(is_distinguished(rd,delta),"automorphism is not distinguished");
max(for alpha in rd.simple_roots do first(for i:order(delta) from 1 do delta^i*alpha=alpha od)+1 od)

{roots of G with same restriction to T as alpha}
set roots_same_restriction(RootDatum rd,SubTorus T,vec alpha)=[vec]:
##for beta in rd.roots do
 if =T.restrict(beta-alpha)  then [beta] else [] fi od

set roots_restricting_to(RootDatum rd,SubTorus T,vec alpha)=[vec]:
##for beta in rd.roots do
 if T.restrict(beta)=alpha  then [beta] else [] fi od

{delta is distinguished
returns (RootDatum folded, mat T) where T is a matrix relating H and H^delta
}
set folded(TwistedRootDatum (rd,delta))=(RootDatum,mat):
{assert(rd.is_semisimple or delta=id_mat(#delta),"root datum is not semisimple and delta !=1");}
{do we need distinguished? (yes)}
{assert(is_distinguished(rd,delta),"delta is not distinguished");}
let T=SubTorus:eigen_lattice(^delta,1) then   {T=(H^\delta)^0; columns are a basis of X_*(T)}
()=prints("T=",T) then
{T is nxr where n=rd.rank and r=dimension(T)}
{ T: matrix of map X_*(T)->X_*(H) \simeq Z^r -> Z^n: this is T.inject
 ^T: matrix of map X^*(H)->X^*(T) \simeq Z^n->Z^r:   this is T.project=T.restrict
}
roots_nonreduced=sort_u(for alpha in rd.posroots do T.restrict(alpha) od) then
{roots=mat:##(for alpha in roots_nonreduced do if find(roots_nonreduced,2*alpha)=-1 then [alpha] else [] fi od) then}
{if alpha,2*alpha is a root, keep alpha: this matters for G=GL(2n+1)
 fixed points of delta: type B_n (short roots) not C_n }
roots=mat:##(for alpha in roots_nonreduced do if find(2*roots_nonreduced,alpha)=-1 then [alpha] else [] fi od) then
coroots=[vec]:[] in
for alpha in roots do
 let pullback_alpha=let j=first(for beta in rd.roots do T.restrict(beta)=alpha od) in rd.roots[j] then
 v=[int]:sum(##(for beta in rd.roots do if T.restrict(beta)=alpha then  [coroot(rd,beta)]
   else []
  fi od)) then
 w=2*v/(v*pullback_alpha) {element of X_*(H) which lives in X_*(T)} then
 corestrict_w=solve(T,w).requisition {coordinates of w in the given basis of X_*(T)} in
 coroots#:=ratvec_as_vec(corestrict_w)
od;
(root_datum_from_positive((roots,coroots),rd.prefers_coroots),T)

{make it easy to construct in simple case:
use the first outer automorphism of given order
if you need to specify delta more precisely use folder(RootDatum,mat) above
}
set folded(RootDatum rd,int n)=
assert(rd.is_simple,"root datum is not simple");
if n=1 then (rd,id_mat(rd.rank)) else
let out=rd.outer_automorphism_group then
delta=out[first(for g in out do order(g)=n od)] in (rd,delta) fi


{all simple factors of rd mapping to given simple factor of folded root datum}
set inverse_image_simple_factor(TwistedRootDatum (rd,delta),RootDatum folded_factor, mat T)=
let roots=[], coroots=[] in
for alpha@i in rd.posroots do
if find(folded_factor.posroots,T.project(alpha))>=0 then
 roots#:=alpha;
 coroots#:=rd.poscoroots[i]
fi
od;root_datum_from_positive((roots,coroots),rd.prefers_coroots)

set affine_root_of_factor(TwistedRootDatum trd, RootDatum folded_factor,mat T)=
let inv=inverse_image_simple_factor(trd,folded_factor,T) then
order_upstairs=order_twist(inv,trd.delta) then
order=rat_as_int(order_upstairs/number_simple_factors(inv))
in
assert(order<=3,"order >3");
if order=1 then folded_factor.highest_root
elif order=2 then folded_factor.highest_short_root
else folded_factor.highest_short_root
fi

set affine_datum(TwistedRootDatum trd)=
let (frd,T)=trd.folded then
affine_roots=for factor in frd.simple_factors do affine_root_of_factor(trd,factor,T) od then
affine_coroots=for alpha in affine_roots do coroot(frd,alpha) od in
(affine_coroots,frd,affine_roots)

{construct automorphism delta of (rd,rd,...,rd) (r copies)
(x_1,...,x_r) -> (tau(x_r),x_1,...,x_{r-1})
delta^r=tau (automorphism of first factor)
return ((rd,rd,...,rd),delta)
}

set cyclic_twist(RootDatum rd,mat tau,int r)=TwistedRootDatum:
let n=rd.rank then
rd_r=rd then
()=for i:r-1 do rd_r:=rd_r*rd od then
cycle=permutation_matrix((r-1)#(#(r-1))) then
basic_twist=Kronecker_product(cycle,id_mat(n))  then
diag=block_matrix(id_mat(n*(r-1)),tau) in
(rd_r,diag*basic_twist)

set cyclic_twist(RootDatum rd,int r)=TwistedRootDatum:
cyclic_twist(rd,id_mat(rd.rank),r)

{various constructions of AffineDatum}

set affine_datum(LieType lt)=AffineDatum:
affine_datum(simply_connected(lt))

set affine_datum_long(LieType lt)=AffineDatum:affine_datum(simply_connected(lt))

set affine_datum_short(LieType lt)=AffineDatum:
let rd=simply_connected(lt) in
affine_datum(rd,highest_short_root(rd))

set dual(AffineDatum (alpha_ch,rd,alpha))=AffineDatum:(alpha,rd,alpha_ch)

{computed folded system for delta and a torus element t
 t provides a further grading of the imaginary roots
 delta is distinguished
 same as folded@(rd,delta), except:
   don't use roots beta from rd where are delta-fixed (i.e. imaginary) but
   t*beta non-integral, i.e. restriction of beta is non-compact}
set folded(TwistedRootDatum (rd,delta), ratvec t)=
assert(is_distinguished(rd,delta),"delta is not distinguished");
let T=SubTorus:eigen_lattice(^delta,1) then   {T=(H^\delta)^0; columns are a basis of X_*(T)}
{T is nxr where n=rd.rank and r=dimension(T)}
{ T: matrix of map X_*(T)->X_*(H) \simeq Z^r -> Z^n: this is T.inject
 ^T: matrix of map X^*(H)->X^*(T) \simeq Z^n->Z^r:   this is T.project=T.restrict
}
roots_nonreduced=sort_u(for alpha in rd.posroots do T.restrict(alpha) od) then
{roots_maybe: might need to discard some of these}
roots_maybe=mat:##(for alpha in roots_nonreduced do if find(roots_nonreduced,2*alpha)=-1 then [alpha] else [] fi od) then
roots=[vec]:[] then
coroots=[vec]:[] in
for alpha in roots_maybe do  {don't use alpha if it is imaginary and t makes it compact,
in other words use alpha if it is not imaginary or it is imaginary and t-noncompact}
 let beta=let j=first(for beta in rd.roots do T.restrict(beta)=alpha od) in rd.roots[j] in
 if (delta*beta != beta  {not imaginary} or (delta*beta = beta and is_integer(t*beta))  {imaginary compact})  then
  let v=[int]:
      sum(##(for beta in rd.roots do if T.restrict(beta)=alpha then  [coroot(rd,beta)] else [] fi od))
    then
 w=2*v/(v*beta) {element of X_*(H) which lives in X_*(T)} then
 corestrict_w=solve(T,w).requisition {coordinates of w in the given basis of X_*(T)} then
 ()= roots#:=alpha in
 coroots#:=ratvec_as_vec(corestrict_w) fi
od;
(root_datum_from_positive((roots,coroots),rd.prefers_coroots),T)
