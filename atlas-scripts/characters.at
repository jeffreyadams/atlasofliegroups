{ This contents of this file has been incoprorated into W_classes.at and
  the file will therefore disappear from Atlas soon

  The interface has changed as follows:

  Rather than having variants of functions that generate the conjugacy classes
  of and W and their sizes, or use such values if passed as arguments, all
  functions in W_classes assume this done during construction of a
  |WeylClassTable| value; some functions are in fact part of such a value,
  others are produced by functions taking a |WeylClassTable| as argument; the
  calling syntax is the same in foth cases: |ct.function(arguments)| where |ct|
  holds the |WeylClassTable| value.
  The function names are as follows (with |ct| as above referring to the table)

  operator * -> |ct.inner|
  |trivial_character| -> |ct.trivial|
  |sgn_character| -> |ct.sign|
  |reflection_character| -> |ct.reflection|
  |tensor| -> |ct.tensor_power|
  |dimension| -> |ct.dimension|
}

<basic.at
<Weylgroup.at { for |order_W@RootDatum| }
<W_classes.at { for |conjugacy_class_reps| }

{. data type for class functions .}
set_type [ ClassFunction=([WeylElt] classes, [int] sizes, [int] values) ]

{. products of two class functions .}
set *(ClassFunction f,ClassFunction g)=int:
let (elts,sizes,f_values)=f then
(,,g_values)=g in
rat_as_int(sum(for i:#sizes do sizes[i]*f_values[i]*g_values[i] od)/order_W(elts[0].root_datum))

{. character of the trivial representation of W .}
set trivial_character(RootDatum rd)=ClassFunction:
let classes=conjugacy_class_reps(rd) then
sizes=for w in classes do size_of_conjugacy_class(w) od in
(classes,sizes, for i:#classes do 1 od)

{. character of the trivial representation of W: assuming classes and sizes already defined .}
set trivial_character([WeylElt] classes, [int] sizes)=ClassFunction:(classes,sizes,for i:#classes do 1 od)

{.character of the sgn representation of W .}
set sgn_character(RootDatum rd)=ClassFunction:
let classes=conjugacy_class_reps(rd) then
sizes=for w in classes do size_of_conjugacy_class(w) od in
(classes,sizes, for i:#classes do det(matrix(classes[i])) od)

{. character of the sgn representation of W: assuming classes and sizes already defined .}
set sgn_character([WeylElt] classes, [int] sizes)=
ClassFunction:(classes,sizes, for i:#classes do det(matrix(classes[i])) od)

{. character of the reflection (tautological) representation of W .}
set reflection_character(RootDatum rd)=ClassFunction:
let classes=conjugacy_class_reps(rd) then
sizes=for w in classes do size_of_conjugacy_class(w) od in
(classes,sizes, for w in classes do trace(matrix(w)) od)

{. character of the reflection (tautological) representation of W, classes and sizes already defined .}
set reflection_character([WeylElt] classes, [int] sizes)=ClassFunction:
(classes,sizes, for w in classes do trace(matrix(w)) od)

{. character of n^th tensor power of a class function .}
set tensor(int n, ClassFunction f)=ClassFunction:
(f.classes,f.sizes, for r in f.values do r^n od)

set dimension(ClassFunction f)=int:f.values[0]

set matrix_of_inner_products([ClassFunction] S)=mat:
for i:#S do for j:#S do S[i]*S[j] od od
