<basic.at { for (at least) radical_basis }
<misc.at  {for box}
<lattice.at { for image_subspace@mat }
<ratmat.at

{ center Z and dual Z_hat of complex group or real form }
{
  dual of center of complex group (i.e. RootDatum) is
  P/X^*  (weight lattice modulo character lattice)

  dual of center of RealForm is
  Z^=(Z_c)^ x (Z_s)^
   Z_c=compact part of Z
   Z_s=vector component of Z
  (Z_s)^ is a Q-vector space
  (Z_c)^ further decomposes Z^n x (finite part)
   Z^n = dual of identity component Z_{c,0} of Z_c
   finite part = dual of (Z_c/Z_{c,0}) = two-group
  caution: (Z_{c,0},Z_s) is the identity component of the
  radical(G(C)), which is a complex torus. If there is a split factor,
  then this gives a Z/2Z in Z_f
  parametrize Z_hat as [dual of finite_part,(dual of Z_{c,0}, dual of Z_s)]
  dual of finite part: [(int d, vec v)]: v has order d
  dual of Z_{c,0}: Z-basis of X^*(Z_{c,0})
  dual of Z_s: Q-basis of dual of Z_s (Q-vector space)

  it isn't as easy to give explicit generators for the center
  the functions print_Z(RootDatum rd) and print_Z(RealForm G) give
  human-understandable descriptions
}

{ Q-basis of Lie algebra of radical of complex group; columns are coweights }
set lie_radical = (RootDatum->mat): { kernel(^simple_roots(rd)) }
  radical_basis@RootDatum { defined in basic.at (and actually a better name) }

{ ss_part(rd,v)=projection of v\in X^*\otimes Q onto Q-span of the roots }
set ss_part (RootDatum rd, ratvec v) = ratvec:
  let fw= [ratvec]: fundamental_weights(rd) in
  sum(rank(rd), for coord@i in (^simple_coroots(rd))*v do coord*fw[i] od)

{ lie_radical_part(rd,v)=projection of v\in X^*\otimes Q onto Lie coradical }
set lie_coradical_part (RootDatum rd, ratvec v) = ratvec: v-ss_part(rd,v)

{ Q-basis of Lie algebra of split part of radical; columns are coweights }
set split_radical_basis (InnerClass G) =  mat:
  kernel( ^(simple_roots(G)##(1+distinguished_involution(G))) )
{ equivalent: Q-basis of LA of split part of radical of the (complex) group }
set lie_split_radical (InnerClass G) = mat: { columns are coweights }
  image_subspace((1-^distinguished_involution(G))*lie_radical(G))

{ Q-basis of Lie algebra of compact part of radical; columns are coweights }
set compact_radical_basis (InnerClass G) =  mat:
  kernel( ^(simple_roots(G)##(1-distinguished_involution(G))) )
{ equivalent: Q-basis of LA of compact part of radical of the (complex) group }
set lie_compact_radical (InnerClass G) = mat:
  image_subspace((1+^distinguished_involution(G))*lie_radical(G))

{ Q-basis of dual of radical of complex group }
set lie_radical_hat = (RootDatum->mat): { kernel(^simple_coroots(rd)) }
  coradical_basis@RootDatum { defined in basic.at (and actually a better name) }

{ Q-basis of split part of coradical; columns are weights }
set split_coradical_basis (InnerClass G) =  mat:
  kernel( (^simple_coroots(G)) ^ {stack up} (1+distinguished_involution(G)) )
{ equivalent: Q-basis of dual of split part of radical of the (complex) group }
set lie_split_radical_hat (InnerClass G) = mat:
  image_subspace((1-distinguished_involution(G))*lie_radical_hat(G))

{ Q-basis of compact part of coradical; columns are weights }
set compact_coradical_basis (InnerClass G) =  mat:
  kernel( (^simple_coroots(G)) ^ {stack up} (1-distinguished_involution(G)) )
{ equivalent: Q-basis of dual of compact part of radical of (complex) group }
set lie_compact_radical_hat (InnerClass G) = mat:
  image_subspace((1+distinguished_involution(G))*lie_radical_hat(G))


{
  dual of center of complex group G
  return value: (ss_part,radical)
  ss_part is the center of G/radical(G)
  ss_part=(mat,vec)
  every entry d@j in the vec part means column j is a generator of order d
  radical=mat
    whose columns form a Q-basis of the dual of the Lie algebra of the radical
  [v1,...,vk]: basis of (R^\vee)^\perp
  where R^\vee is the coroots, and perp is taken in X^*\otimes Q
}
set Z_hat (RootDatum rd) = ((mat,vec),mat):
( { semisimple part determined by invariant factors other than 1 from Smith: }
  filter_units(Smith(simple_roots(rd)))
, lie_radical(rd)
)

{
  dual of center of real form G
  return value: (finite_part,(compact_radical,split_radical))

  finite_part=(mat,vec)
  every entry d@j in the vec part means column j is a generator of order d

  radical:
  compact_radical: mat whose columns are a basis of [(R^\vee)^\perp]^{delta}
  where R^\vee is the coroots, and perp is taken in X^*
  number of columns = number of circles in radical
  split_part: mat whose columns are a basis of [(R^\vee)^\perp]^{-delta}
  in this case perp is taken in X^*\otimes Q
  number of columns = number of R^+ factors in radical
}
set Z_hat (InnerClass G) = ((mat,vec),(mat,mat)):
( { finite part determined by invariant factors other than 1 from Smith: }
  filter_units(Smith( (1-distinguished_involution(G))##simple_roots(G) ))
, (lie_compact_radical_hat(G),lie_split_radical_hat(G))
)

{ output routine for center of complex group }

set finite_center_string (mat ., vec ds) = string:
  ## for d@i in ds do if =i then "" else " x " fi + "Z/"+(d+"Z") od

set print_Z (RootDatum rd) = void:
  let ((,ds):ss_part,rad)=Z_hat(rd) then n_finite=#ds, n_rad=n_columns(rad) in
  if =n_finite
  then
    if =n_rad then  prints("Center is trivial")
    else prints("Center is a connected complex torus of rank ", n_rad)
    fi
  else { n_finite !=0 }
    let finite_part= finite_center_string(ss_part) in
    if =n_rad
    then prints("Group is semisimple",new_line,"center=",finite_part)
    else
      prints("Split exact sequence:",new_line,"1->S->Z->Z/S->1");
      prints("S=complex torus of rank ", n_rad);
      prints("Z/S=Center(G/S)=",finite_part)
    fi
  fi

{ output routine for center of real form }
set print_Z (InnerClass G) = void:
( let ((,ds):ss_part,(cptrad,splitrad))=Z_hat(G)
  then n_finite = #ds
  , cpt_rank=n_columns(cptrad), split_rank=n_columns(splitrad)
  , finite_part= finite_center_string(ss_part)
  in
  if =(cpt_rank+split_rank) { i.e., if both are zero }
  then { group is semisimple }
    if =n_finite
    then prints("Center is trivial")
    else prints("Group is semisimple"); prints("center=", finite_part)
    fi
  else
    prints("center has ", plural(cpt_rank," circle factor"))
  ; prints("center has ", plural(split_rank," R^+ factor"))
  ; if =n_finite
    then prints("center has no finite part")
    else prints("finite part of center: ",finite_part)
    fi
  fi
)

{ elements of order 2 in the center of G(R)
  this is very clumsy, should be improved
  needed for  all_G_spherical_same_differential in K_highest_weight.at
  algorithm: run over 2^n elements h=(epsilon_1,...,epsilon_n)\in H
  check if delta(h)=h, i.e. (1+delta)*h has all even entries
  and alpha(h)=1 for all roots alpha
}
set Z_2 (RealForm G) = [vec]:
  let delta1=1+distinguished_involution(G), sr=simple_roots(G)
  in ## { filter values from H(2)}
  for h in all_0_1_vecs(rank(G))
  do
    if ((h*delta1)%2).= { test (1+^delta)*h is null vector modulo 2}
      and ((h*sr)%2).= { and h evaluates even on each simple root }
    then [h]
    else []
    fi
  od

{-------center of a semisimple complex group ----------}

{rd is a semisimple root datum
return rational vectors [v_1,..., v_n] so that
set t_j=exp(2\pi iv_j)
Then {t_1,...,t_n} generate the center of the complex group
order(t_i)=denominator of the ratvec v_i

Algorithm:
Z(G)=P^v/X_* = Z<fundamental coweights>/Z^n
change basis so that P^v=Z^n:
M=fundamental coweights (a rational matrix)
N=M^{-1} is an integral matrix, and
the sublattice X_* is spanned by the columns of N
adapted_basis(N): pairs (A,c)
 where A is an invertible integral matrix
 c=[c_1,...,c_n]
 span(N)=<c_1 A[1],..., c_n A[n]>
 discard all columns with c_i=1 (filter_units)
 multiply resulting columns by M to change basis back
This gives the rational vectors [v_1,...,v_n]
}
{MAYBE if rd is reductive this still works to give the center
 of the derived group as a subgroup of G
 that is: the ratvecs have size G.rank, not G.semisimple_rank
}
set center(RootDatum rd)=[ratvec]:
{assert(is_semisimple(rd),"Root Datum is not semisimple");}
{if =rank(rd) then [] else}
if rd.is_abelian then [] else
let M=ratvecs_as_ratmat(fundamental_coweights(rd)) then
{N=ratmat_as_mat(inverse(M)) then}
N=ratmat_as_mat(left_inverse(M)) then
(A,c)=adapted_basis(N) then
(B,v)=filter_units(A,c) in
for col@i in B do M*col od fi

set type_center(RootDatum rd)=[int]:
assert(is_semisimple(rd),"Root Datum is not semisimple");
let M=ratvecs_as_ratmat(fundamental_coweights(rd)) then
N=ratmat_as_mat(inverse(M)) then
(A,c)=adapted_basis(N) then
(,v)=filter_units(A,c) in v

set order_center(RootDatum rd)=int:
if rd.rank=0 then 1 else product(type_center(rd)) fi

set is_center_cyclic(RootDatum rd)=bool:
if rank(rd)=0 then true elif
is_semisimple(rd) then #type_center(rd)<=1 else false fi

{list of elements in center for rd semisimple}
set elements_of_center(RootDatum rd)=[ratvec]:
let Z=center(rd) in
 if #Z=0 then [null(rank(rd))] else let
denoms= for i:#Z do let (,d)=%Z[i]  in d od in
for v in ratmat_to_bigmat(Z.ratvecs_as_ratmat*box(denoms)) do ratvec:v od fi

{rd semisimple, map arbitrary element v of P^vee to
one of the given elements_of_center(rd):
this is the element_of_center(rd) which is equal to v mod Z^n
}
set map_to_center(RootDatum rd,ratvec v)=ratvec:
let Z=rd.elements_of_center in 
let i=first(for z in Z do is_integer(z-v) od) in Z[i] 

{Need a matrix A lifting an element of T/Z(G)^0 to T,
i.e. satisfying:
Gmod=G/Z^0
A*simple_coroots(Gmod)=simple_coroots(G)
 Gmod is semisimple so simple_coroots(Gmod) is (square and) invertible/Q
 => A=simple_coroots(G)*inverse(simple_coroots(Gmod))
 this is applied to L
}
set lift(RootDatum rd,ratvec v)=ratvec:
 let rd_mod=mod_central_torus(rd) then
 A=simple_coroots(rd)*inverse(mat_as_ratmat(simple_coroots(rd_mod))) in A*v


{list of elements of center of derived group,
 as elements of the original group}
set elements_of_center_derived(RootDatum rd)=[ratvec]:
let (drs,M)=derived_info(rd) in
for v in elements_of_center(drs) do v*M od

{dually: the fundamental group of semisimple rd}

{return ([vec] vecs,[int] orders):
 the fundamental group is X_*/R^v=Z^n/lattice
 vecs generate X_*/R^v
 vecs[i] is a vector, of order orders[i] in X^*/R^v
}
set fundamental_group(RootDatum rd)=([vec],[int]):
assert(is_semisimple(rd),"Root Datum is not semisimple");
if =rank(rd) then ([null(rd.rank)],[1]) else
let (B,c)=filter_units(adapted_basis(simple_coroots(rd))) in (B,c)
fi

{these vectors are a set of representatives of
the finite group X_*/R^v = Z^n/lattice
}
set elements_of_fundamental_group(RootDatum rd)=
let (vecs,orders)=fundamental_group(rd) in
if #vecs=0 then [null(rank(rd))] else
vecs*box(orders) fi

{copied from nilpotent_orbits.at, not sure where to put it}
set lift(RootDatum rd,ratvec v)=ratvec:
 let rd_mod=mod_central_torus(rd) then
 A=simple_coroots(rd)*inverse(mat_as_ratmat(simple_coroots(rd_mod))) in A*v

set relative_fundamental_group(RootDatum rd)=([vec],[int]):
let (B,c)= fundamental_group(rd.mod_central_torus) in
(for v in B do ratvec_as_vec(lift(rd,v)) od,c)





