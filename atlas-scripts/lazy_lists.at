<basic.at { for type constructor |Maybe| }

{ This file demonstrates how axis can handle lazy infinite lists (of any type) }

set_type T [
  infinite_list
    = (->infinite_node) { defers creating of |inf_node| until called with () }
, infinite_node
    = (T head, infinite_list thunk) { initial term, thunk for remaining terms }
]

set_type inf_list = infinite_list<int>
set_type inf_node = infinite_node<int>

{ One may for instance define, to get an infinite list of entries 1:

  set rec_fun ones () = inf_node: (1,ones)

  and then refer to it as |ones@void|, since |set| stores this function in the
  overload table. The following defines a variable instead, by avoiding |set|
}

any_type T begin

set series ((int->T) coef) = infinite_list<T>:
  0.(rec_fun up_from(int n) infinite_list<T>: @:(coef(n),up_from(n+1)))

{ get initial |n| terms of the list, and return them as ordinary list }
set initial (int n) = (infinite_list<T>->[T]):
  (infinite_list<T> f) [T]:
  for :n do let (head,tail)=f() in head next f:=tail od

set prepend (T c,infinite_list<T> F) = infinite_list<T>: @:(c,F)
set shift(int n,infinite_list<T> F) = infinite_list<T>:
  for :n do set(,F):=F() od; F

set constant_term (infinite_list<T> F) = T: let (c,)=F() in c
set coefficient(int i,infinite_list<T> F) = T: shift(i,F).constant_term

set extend ([T] pol,T zero) = infinite_list<T>:
(  let result = rec_fun me () infinite_node<T>: (zero,me)
in for c in pol ~do result:= prepend(c,result) od
;  result
)

end

set extend_0 ([int] pol) = inf_list: extend(pol,0)

series_0 : inf_list: extend_0([]) { additive unit for power series }
series_1 :  inf_list: [1].extend_0  { multiplicative unit for power series }
X :   inf_list: [0,1].extend_0 { neutral element for power series composition }
ones : inf_list: extend([],1) { infinite list of '1', algebraically 1/(1-X) }

{ more general then |ones|, we can define arithmetic and geometric progressions }
set arithmetic_progression (int stride) = rec_fun f (int start) inf_list:
  @: (start,f(start+stride))

set geometric_progression (int lambda) = rec_fun f (int start) inf_list:
  @: (start,f(start*lambda))

{
  It can be important to avoid evaluating the thunk defining an infinite list
  more than once, but instead store the values that have already been computed.
  Indeed this will make it possible to define a non-pure function as thunk that
  simply assumes that each successive call is done to produce the coefficient
  following the one of the previous call; this assumes that no access to the
  function is exported other than the one given to the |memoize| function below.

  Another application is when we want to solve a recursion like that of
  Fibonacci by directly referring, via a |shift|, to previous values of the list
  under construction. This remains delicate, since a simple application of
  |memoize| will not suffice, and probably will not often prove to be the best
  choice of strategy to solve a recurrence relation.

  The function |memoize| adds the necessary storage on top of an infinite list:
  before actually calling the thunk, it defines a variable that can store the
  node produced, but initially stores nothing. The first time the memoized
  function is called, the thunk is called and the result stored, from which
  further calls will retrieve it. The magic comes from applying |memoize|
  recursively to the tail, before storage.
}
any_type T begin
set rec_fun memoize (infinite_list<T> L) = infinite_list<T>:
   let store = Maybe<infinite_node<T> >: none() { cast to make non-constant }
in @: { make what follows into a think }
   case store
   | none(): let (head,tail)=L() then result=(head,memoize(tail)) in
		store:=some(result); result
   | some(node): node
   esac
end

{			    Formal power series				}

{ lazy sum of two infinite lists }
set rec_fun sum (inf_list f, inf_list g) = inf_list:
  @: let (x,ff)=f(), (y,gg)=g() in (x+y,sum(ff,gg))

set scale_by (int a) = (inf_list->inf_list):
  if a=1 then (inf_list f)inf_list: f
  elif a=0 then (inf_list .)inf_list: extend_0(#0)
  else
    rec_fun a_times (inf_list f) inf_list:
    @: let (x,ff)=f() in (a*x,a_times(ff))
  fi
set downscale_by (int n) = (inf_list->inf_list):
  if n=1 then (inf_list f)inf_list: f
  else
    rec_fun div_n (inf_list f) inf_list:
    @: let (x,ff)=f() in (x\n,div_n(ff))
  fi

set + = sum@(inf_list,inf_list)
set - = (inf_list->inf_list): scale_by(-1)
set + (int n,inf_list f) = inf_list: let (c,t)=f() in @:(n+c,t)
set + (inf_list f,int n) = inf_list: let (c,t)=f() in @:(n+c,t)
set * (int n,inf_list f) = inf_list: scale_by(n)(f)
set - (int n,inf_list f) = inf_list: let (c,t)=f() in @:(n-c,-t)
set - (inf_list f,int n) = inf_list: let (c,t)=f() in @:(c-n,t)
set - (inf_list f,inf_list g) = inf_list: f + -g
set \ (inf_list f,int n) = inf_list: downscale_by(n)(f)

{ arithmetic of $\Z[[X]]$, using |inf_list| to represent the elements }

set multiply (inf_list f, inf_list g) = inf_list:
{ an example of how |memoize| allows using an identical function to produce
  successive changing values each time it is called, without explicit control }
(  let coefs = [int,int]:[] { pairs of corresponding coefficients of |f,g| }
in rec_fun m () inf_node: let (a,new_f)=f(), (b,new_g)=g() { get new values }
        in set (f,g,coefs) :=(new_f,new_g, (coefs next coefs:=[]) # (a,b))
        ; ( sum(for (a,)@i in coefs do let (,b)=coefs~[i] in a*b od) , m )
).memoize

set * = multiply@(inf_list,inf_list)

set multiply_by ([int] pol) = (inf_list->inf_list):
(  let d = last(#pol,(int i)bool: !=pol[i])
in case d { three way branch on sign of |d| }
   then (inf_list .) inf_list: extend_0(#0) { |d<0|: multiplication by 0 }
   in scale_by(pol[0]) { multiplication by a nonzero constant polynomial }
   else { |d>0| }
      let buf = { buffer for not yet yielded contributions from previous terms }
         for :d+1 { for first |d| degrees above current, plus a sentinel 0 }
	 do 0 od { so the final entry will remain 0 forever }
   in (inf_list g) inf_list:
      ( rec_fun f () inf_node:
	   let (a,new_g)=g()
	in (a*pol[0]+buf[0], f) { contribute in = degree, |buf[0]| was waiting }
	next g:=new_g { now also update buffer, while adding terms from |a|: }
	; for p@i in pol[1:] do buf[i]:=a*p+buf[i+1]  od { add and shift left }
      )
     .memoize { vital transform; ensures each coefficient calls |f| just once }
   esac
)

set divide_by ([int] pol) = (inf_list->inf_list):
(  assert(#pol>1 and pol[0]=1)
;  (inf_list g) inf_list:
   let rem =  { get initial terms: henceforth considered the remainder }
     for in pol do let (c,new_g)=g() in g:=new_g; c od
in pol:=pol[1:] { drop leading coefficient 1 }
;  ( rec_fun f () inf_node:
     let lc = rem[0], (c,new_g)=g()
     in for r@i in rem[1:] do rem[i]:=r-lc*pol[i] od { subtract and shift left }
     ; rem~[0]:=c; g:=new_g { final term comes from the most recent call of |g| }
     ; (lc, f)
   )
  .memoize { vital transform; ensures each coefficient calls |f| just once }
)

{ We provide two ways to divide power series $N$ by $D$, with constant term $1$.
  The first is done similarly to |multiply|, but instead of retaining an
  increasing number of coefficients from both arguments, we retain them from $D$
  and from the quotient $Q$; those from $N$ can be forgotten once used. As in
  |multiply|, this imperative style together with |memoize| allow the thunk
  being used to actually be the same non-pure function |m| at all levels.

  The second is more slick and pure, producing the thunk by calls of a recursive
  function with different arguments (representing the remainder at each step),
  each next one being produced from the previous by a transformation involving
  |sum| and |scale_by|. We need to ensure $D$ can be traversed multiple
  times without needlessly repeating its computation, which is done by applying
  |memoize| to the tail of $D$ (this can be unnecessary depending on how $D$
  was constructed, but whether that is the case cannot be found out here). The
  ever more complicated thunk represents another, hidden, form of storage use
  that goes on here. All in all, while slick, this might be less efficient.
}
set divide (inf_list N, inf_list denom) = inf_list:
(  let (c,D)=denom() in assert(c=1,"Division requires unit leading term")
;  let coefs = [int,int]:[] { pairs of corresponding coefficients of |D,result| }
   , c=0, d=0
in (rec_fun m () inf_node:
      set ((c,N),(d,D)) := (N(),D()) { get new values }
      ; let q = { solve: convolve(1#D_coefs,result_coefs#q) = c }
         c - sum(for (ci,)@i in coefs do let (,r)=coefs~[i] in ci*r od)
      in coefs #:= (d,q); ( q , m )
   )
   .memoize
)

set divide_by (inf_list f) = (inf_list->inf_list):
  let (!head,!tail)=f() then !ff=memoize(tail) in
  assert(head=1,"Can only invert series with constant term 1");
  rec_fun divide (inf_list remainder) inf_list:
  @: let (y,gg)=remainder() in (y, divide(scale_by(-y)(ff)+gg))
  { here the final result is not passed through |memoize|; if that is desired
    the caller should take care to do so }

set inverse (inf_list f) = inf_list: divide([1].extend_0,f)

set / = (inf_list->inf_list): inverse@inf_list
set / (int n,inf_list f) = inf_list:
   let f1=/f in if n=1 then f1 else scale_by(n)(f1) fi
set / (inf_list f,inf_list g) = inf_list:
   if g.constant_term=0 else divide(f,g)
   then { try to salvage division by shifting }
     for i:8
     do if f.constant_term!=0
        then error("Numerator valuation "+i+" is less than that of denominator.")
	fi
     ; set ((,f),(,g)):=(f(),g())
     ; if g.constant_term!=0 then return divide(f,g) fi
     od
   ; error("Denominator has too large valuation for division, is it 0?")
   fi

set ^ (inf_list F,int n) = inf_list:
   let rec_fun p (int k) = inf_list:
      if k=1 then F
      else let (q,r)=k\%2 then h=p(q) then h2=h*h in if r=0 then h2 else h2*F fi
      fi
in case n
   then assert(F.constant_term=1,"Negative power requires unit constant term")
   ; inverse(p(-n))
   in series_1
   else p(n)
   esac

{
  As a proof of concept we show how an infinite list can be recursively
  defined using itself (taking care to not make any coefficient require itself)
  and use |memoize| to avoid re-evaluating previous terms while computing new
  ones. The standard example is to compute the Fibonacci sequence F as 0, 1,
  followed by |sum(f,shift(1,F))| (where the first argument to |sum| gives the
  coefficient two steps before, the second argument the preceding coefficient).

  Using |memoize| remains delicate here, since the |rec_fun| syntax does not
  allow anything being done before introducing arguments, as might be thought:
  |rec_fun signs = inf_list: memoize(@:(1,@:(-1,signs)))| (NOT SYNTACTIC).
  And calling |memoize| inside the function body, necessarily multiple times
  if there are multiple recursive uses as is the case for Fibinacci, creates
  separate memo tables for each call (even with identical arguments) which
  solves nothing (as a general rule, the argument to |memoize| should not be
  allowed to be named and accessed elsewhere, lest the efficiency be lost when
  those other accessed recompute anyway what |memoize| stores). A solution is
  to tie the recursive knot by hand, rather than have |rec_fun| do it for us.
}

{ the Fibonacci sequence can be defined |divide_by([1,-1,-1])(extend_0([0,1]))|,
  however we now show how it can be defined in a directly recursive fashion }
set Fibonacci = inf_list:
  let fibo () = inf_node:die { stub, which next |memoize| doesn't call yet }
  in fibo := memoize(@:(0,@:(1,sum(fibo,shift(1,fibo)))))
{ Note that leaving out |memoize| would be possible here, but makes the runtime
  increase exponentially with the list length because of repeated evaluations of
  the same list elements. That inefficient version would also be obtained by
  | set rec_fun Fibo () = inf_node:(0,@:(1,sum(Fibo,shift(1,Fibo))))) |
}

{ and note Fibonacci is also |inverse([1,-1,-1].extend_0)|, easy and efficient }

{
  The pentagonal numbers are those obtained by adding to a perfect square $k^2$
  either the "lower" |binom(k,2)| or "upper" |binom(n+1,2)| triangular number;
  call these the lower and uppoer pentagonal numbers for $k$.
  Euler's pentagonal series has entries $(-1)^k$ at indices the lower and upper
  pentagonal numbers for $k$, for every $k\in\N$, and $0$ at all other indices.
  The relavance of Euler's pentagonal  series is that its inverse is the
  generating series for the number of partitions of a natural number.

  A practical way to generate it is to start at index 0, the upper pentagonal
  number for 0, with variables k=0, lower=false and a timer i=1. Then to
  generate a term, decrement the timer; if still positive return a term 0.
  Otherwise return (-1)^k, and if lower holds set the timer i:=k else (not lower)
  increment k and set i to the sum of the old and new values of k; also invert
  lower in all productive cases. The code below is a bit slicker and clearer.
}

pentagonal_series : inf_list:
(  let i=1, k=0, lower=false
in ( rec_fun E () inf_node:
     ( if =(i-:=1) { run down timer and test }
       else 0 { in ordinary case, produce a 0 }
       then i:=k  { timer has run out, rewind it }
       ; minus_1^k { produce a nonzero term }
       next if lower:=not lower then i+:=(k+:=1) fi
       fi
     , E { provide ourselves as the function to call next time around }
     )
   )
  .memoize
)

set n_partitions = (int->int):
  let !S=inverse(pentagonal_series) { this is already meomoized } in
  (int n) int: let (x,ff)=S() in for :n do set(x,ff):=ff() od; x


set substitute (inf_list g) = (inf_list->inf_list): { f->f[X:=g] }
(  let (g0,tail)=g() then gg=memoize(tail) { |gg=g/X| }
in assert(=g0,"Can only substitute series with constant term 0")
;  rec_fun subs (inf_list f) inf_list: { subtitute |g| into |f|, using |gg| }
   memoize(@: let (c,f1)=f() in (c,multiply(gg,subs(f1))))
)
{ e.g., |substitute ([0,1,1].extend_0)(ones)| gives series 1/(1-X-X^2) }

set compositional_inverse (inf_list g) = inf_list:
(  let (!g0,!tail)=g()
   then power=tail,(!g1,target)=tail() { |target:=(g-X)/X^2| }
in assert(=g0 and g1=1,"Can only do series with leading term X")
; let rec_fun r () = inf_node: { no arguments, call modifies |target|, |power| }
     power:=multiply(tail,power) { next power of |g/X| }
     ;  let (c,t_tail) = target(), (,t_power)=power()
     in target := t_tail - c*t_power
     ; (-c,r)
in memoize(@:(0,@:(1,r))) { here |memoize| is essential }
)
{ e.g., compositional_inverse([0,1,-1].extend_0) solves $f-f^2=X$ }

set series_precision = 12
any_type T begin set show(infinite_list<T> f) = [T]:
  initial(series_precision)(f) { use |series_precision| only when |f| is there }
end
