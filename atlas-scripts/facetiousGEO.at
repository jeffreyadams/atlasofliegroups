<simple_factors.at { for simple_factors }
{ <affine.at { to try to avoid conflicting definitions }}
<basic.at { for power_set, choices_from, sum@(int,[ratvec]), no_reps}
<hermitian.at { for is_unitary }
<to_ht.at { for is_unitary_to_ht }
<unity.at { for is_unitary_test }
<springer_tables_reductive.at { for Springer_table }
<associated_variety_annihilator.at { for GK_dim, used in identifying unipotent reps }
<weak_packets.at {for unipotent_representations}
{ <lietypes.at { for simple_type }}
{ <parabolics.at {for parabolic_by_wt}}
<K_highest_weights.at {for all_lambda_differential_zero}
<lattice.at {for vec_solve}
{ <chopping_facets_fast.at {for chop_coroots(G, vertices)}}
<facet_classes.at {for ordering on facets}
<hash.at {for KPolHash}
<TWOHEIGHTS {for HTA and HT}
{current version incorporates storage of KTypePol's in a hash table
KPolHash, and MvL's code FPP_w_shifts for quickly finding FPP
facets. The functions that use neither of these are generally
suffixed "_old"}
{ Goal is to write representatives of all affine facets in the
fundamental parallelepiped
  gamma in X*_Q,  0 \le betav[i]*gamma \le 1 (all simple coroots betav[i])}

{ Just do this for root datum rd with simple derived datum.}

{ at the end is a function "spherical" which (if G has simple derived
group) might return which facets correspond to non-cohomologically
induced spherical principal series. Haven't proven this. }

{ One problem is that there are TWO affine Weyl groups. The one
considered here uses translation by ROOTS and acts on X^*. In this
group the "simple affine root" involves the highest COROOT. The other
possibility, which I'll try not to use in this file, uses translation
by COROOTS and acts on X_*. That is the one considered in DV notes
alcoves.pdf, and useful for understanding elements of finite order in
G. I think it's the primary topic in affine.at.

Write simple coroots as betav[1]...betav[ell-1], lowest coroot as

   betav[0] = -(rd.dual).highest_root
   betav[j] = rd.simple_coroots[j-1] (1 \le j \le ell) }

{ There are four notions of "facet":
1) a ([AffineCoroot],[AffineCoroot]) Facet of affine inequalities and
equalities defining it (NOT UNIQUE);
2) the [ratvec] FacetVerts of vertices;
3) the ratvec FacetBary, the barycenter of the facet; and
4) the [vec] FacetVertsIndex of indices of the vertices in a fixed list of vertices

I like FacetVerts the best: you can take the
closure of F just by looking at subsets of the vertices; and the
"opening" (all facets having F in their closure) by looking at all
enlargements of the vertex set. Passage from FacetVerts to FacetBary is
trivial (average the vertices) There are functions facet, facetVerts and
facetBary which compute each of these three representations of
the facet containing a given ratvec gamma in X^*_Q. }

{ORGANIZATION: Main functions are spherical@RealForm and
spherical_to_ht@(RealForm,int), defined around line 945.

Here is a brief outline. Following Barbasch and Steve
Miller, calculate things related to the FUNDAMENTAL PARALLELEPIPED
FPP, which lies in the R-span of the roots, where all simple coroots
take values in [0,1]. The FPP is partitioned into facets of various
dimensions from 0 to the semisimple rank. Each d-dimensional facet is
determined by its barycenter (a ratvec) or by its vertices (a list of
d+1 ratvecs). The idea for computing all facets in the FPP is to
compute a list vlist of all vertices in the FPP (done by
FPP_vertices@RootDatum); then for each d-dimensional facet to store a
rank d+1 vec giving the indices of the vertices in vlist (done by
FPP_vertex_sets_indices).

What's needed to get going is a list of all barycenters of facets in
the FPP. These are calculated by

Theorem. Every [barycenter of a facet] gamma (not just in FPP) can be
written as w*gamma0 + tau, with gamma0 unique [barycenter of a facet]
in the fundamental alcove, w in W (finite Weyl group), and tau in the
root lattice. If we require

   w*gamma0 is integrally dominant

then w*gamma0 is unique, and so tau is unique.

There are 2^(semisimple rank - 1) facet barycenters gamma0 in the
fundamental alcove.; not too many. Marc kindly provided a very fast
listing of the W-orbits W*gamma0. Picking out the integrally dominant
ones is now done stupidly in functions with names like
W_fund_barycentersID: stupid in the sense that it would have been
cleverer to sort out the integrally dominant terms in the library.

Addenda 7/23/22. In unequal rank (and harmless in general) better to
work with the cofolded root datum, and the corresponding (smaller) set
of weights fixed by the distinguished involution. (Every unitary infl
character must be of this form.) The main functions for working this
way now have "Fold" in their names, and the plan is that these should
be ultimately be the only ones used. In particular, the special
scripts like sphericalC for dealing with complex groups can and should
now be replaced by sphericalFold.}

{ assigning this to "false" uses is_unitary_to_ht_old }
set new_to_ht = true

{ useful to assign this to 'true" to get information about the
  progress of long calculations }
set facet_verbose = false

{ if true, reports progress at each of 2^{rank+1} fundamental facets
  during FPP calculation }

set fund_facet_verbose = false

{ for facets of codim > facet_codim, use shifted char formula to
improve memory use. Setting equal to folded semisimple rank means no
use of shifted char formula.}
set facet_codim = int: 3

{. if assigned to 'true' then induction only records unitary reps of
Levis .}
set only_unitary = false

{. This controls the maximum denominator size kept in chop_coroots,
used in moving unitarity information from a Levi to G. Large values
allow more chopped facets, and so convey more information to G; but
small values are faster. Too small a value cannot lead to wrong
answers, but only to running more is_unitary tests .}
set chop_bound = int: 6

{. If "true," then print number of invocations of a unitarity test .}
set test_verbose = true

{. If "true," then calculations of unitary reps of a certain LKT
compute also the unitary deformations of these, with bigger LKT's}
set deform_flag = false

{. If "true," then calculations of unitary reps also compute the K-types
 needed to certify nonunitarity.}
set cert_flag = true

{for is_unitary calculations on parameters of approxDiff > CUTOFF,
it's assumed that is_unitary_to_ht is faster. Setting CUTOFF :=100
means always is_unitary, and CUTOFF:=-1 means always
is_unitary_to_ht.}
set CUTOFF = int: 70

{If the distinguished involution delta of G is nontrivial, then all
UNITARY infinitesimal characters must be delta-fixed, and so lie in
(h*)^\delta. They are most efficiently calculated not using the affine
Weyl group of G, but rather the "cofolded" affine Weyl group explained
in the notes alcoves.pdf ("Affine Weyl group alcoves") around 3.4. The
character lattice for this cofolded datum is (X^*)^\delta. The script
twisted_root_datum calculates the DUAL folded root datum; so what we
need here is the dual of folded(dual of G.root_datum)). I think...}

{rational number between 0 and 1; 0 means tempered (so trivially unitary)
1 means fine principal series for quasisplit G (so is_unitary is hard).}
set difficulty(Param p) = rat:
    let rA = HTA(p)
    in if rA=0 then 0
       else rA/HT(p.real_form,p.infinitesimal_character)
       fi

{Integer between 0 and 100; integer part of 100*difficulty}
set approxDiff(Param p) = int:
    let q = difficulty(p)
    in (q.numer *100)\q.denom

{rational number, between 0 and 1 on FPP: how nu compares to rho in HT.
0 means tempered}
set difficultyA(Param p) = rat:
    let rA = HTA(p), G = p.real_form
    in rA/((G.rho)*(G.two_rho_check))

{Nonneg integer between 0 and 100; integer part of 100*difficultyA}
set approxDiffA(Param p) = int:
    let q = difficultyA(p)
    in (q.numer *100)\q.denom

set cofoldedBOTH(RootDatum rd, mat delta) = (RootDatum, RootDatum, mat):
    assert(is_distinguished(rd,delta),"delta is not distinguished");
    let Tstar = SubTorus:eigen_lattice(delta,1)
{Tstar =(X^*)^\delta; columns are a basis of (X^*)^\delta}
{Tstar is nxr where n=rd.rank and r=dimension(Tstar)}
{ Tstar: matrix of map Tstar->X^*(H) \simeq Z^r -> Z^n: this is Tstar.inject
 ^Tstar: matrix of map X_*(H)->X_*(Tstar) \simeq Z^n->Z^r:   this is
 Tstar.project=Tstar.restrict}
    then coroots_nonreduced=sort_u(
	 for alphavee in rd.poscoroots do Tstar.restrict(alphavee) od
	 )
    then {DISCARDS COROOTS FOR WHICH ALPHAVEE/2 IS COROOT}
	corootsC =mat:##(for alphavee in coroots_nonreduced
	 do if all (for x in alphavee/2 do is_integer(x) od)
	    and find(coroots_nonreduced,ratvec_as_vec(alphavee/2))!=-1
	    then [] else [alphavee] fi
	 od),
	 {THIS DISCARDS COROOTS FOR WHICH 2*ALPHAVEE IS COROOT}
	  corootsB=mat:##(for alphavee in coroots_nonreduced
	 do if find(coroots_nonreduced,2*alphavee)!=-1
	    then [] else [alphavee] fi
	 od)
    then rootsC = [] in
	 for alphavee in corootsC do
	     let pullback_alphavee = let j = first(
		 for betavee in rd.poscoroots do Tstar.restrict(betavee) =
		 alphavee od
	     )
	      in rd.poscoroots[j] {ONE coroot restricting to alphavee}
	 then v = sum(##( for betavee in rd.poscoroots do
		 if Tstar.restrict(betavee) = alphavee
		 then [root(rd,betavee)]
		 else []
		 fi od)) {sum of ALL roots for ALL coroots restr to alphavee}
	  then w = 2*v/(v*pullback_alphavee)
	  then corestrict_w = solve(Tstar,w).requisition
	  in
	  rootsC#:=ratvec_as_vec(corestrict_w)
	  od;
	  let rootsB = [] in
	  for alphavee in corootsB do
	     let pullback_alphavee = let j = first(
		 for betavee in rd.poscoroots do Tstar.restrict(betavee) =
		 alphavee od
	     )
	      in rd.poscoroots[j] {ONE coroot restricting to alphavee}
	 then v = sum(##( for betavee in rd.poscoroots do
		 if Tstar.restrict(betavee) = alphavee
		 then [root(rd,betavee)]
		 else []
		 fi od)) {sum of ALL roots for ALL coroots restr to alphavee}
	  then w = 2*v/(v*pullback_alphavee)
	  then corestrict_w = solve(Tstar,w).requisition
	  in rootsB#:=ratvec_as_vec(corestrict_w)
	  od;
	  (root_datum_from_positive((rootsB,corootsB),rd.prefers_coroots),
	  root_datum_from_positive((rootsC,corootsC),rd.prefers_coroots),Tstar)

{The cofolded RootDatum has character lattice (X^*)^\delta, coroots
the restrictions to (X^*)^\delta of the coroots of rd. The matrix is a
map from the character lattice of the cofolded datum to the character
lattice of G.}

{set cofolded(TwistedRootDatum (rd,delta)) = (RootDatum, mat):
    let (rd1,M1) = folded(rd.dual,^delta) in (rd1.dual,M1)}

{returns the cofolded root system, needed to construct the correct
affine Weyl group to act on delta-fixed weights; and the unique label
j0 (or -1) for a simple coroot needing to be divided by two to get
full FPP}
set cofolded(RealForm G) = (RootDatum, mat, int):
    let (rdB,rdC,M) = cofoldedBOTH(G.root_datum, G.distinguished_involution)
    then j0=
	 first(
	 for alpha@j in rdB.simple_roots do alpha != rdC.simple_roots[j] od
	 )
    in (rdB,M,j0)


{ An affine root datum is a root datum rd (which in atlas means with
chosen pos_roots), and a list of the lowest coroots betav[j] in each
rd[j] in simple_factors(rd). Since I want to use this to look for
unitary reps, simple rd is the most important case }
set_type SimpleAffine = RootDatum
set_type
[ AffineCoroot = (vec linear_coroot, int shift)
, AffineCoWeylElt = (vec tau, WeylElt w) { apply |w|, then translate by |tau| }
]
{This is meant to record K-characters of different facets}
set Kpol_hash = make_KTypePol_hash()

set aff_rank (SimpleAffine Affd) = semisimple_rank(Affd) + 1

{.evaluate AffineCoroot at weight.}
set * (AffineCoroot (linear_coroot,shift), vec gamma) = int:
  linear_coroot*gamma + shift

{.evaluate AffineCoroot at rational weight.}
set * (AffineCoroot (linear_coroot,shift), ratvec gamma) = rat:
  linear_coroot*gamma + shift

{.apply AffineCoWeylElt to weight.}
set *(AffineCoWeylElt (tau,w) , vec gamma)    = vec:    tau + w*gamma
set *(AffineCoWeylElt (tau,w) , ratvec gamma) = ratvec: tau + w*gamma

{.compose AffineCoWeylElts.}
set *(AffineCoWeylElt(tau1,w1) , AffineCoWeylElt(tau2,w2)) = AffineCoWeylElt:
    (tau1 + w1*tau2, w1*w2)
set inverse(AffineCoWeylElt(tau,w)) = AffineCoWeylElt:
    let w1=inverse(w) in (-w1*tau,w1)

{. act by AffineCoWeylElt on an AffineCoroot .}
set *(AffineCoWeylElt(tau,w) , AffineCoroot(betav,m)) = AffineCoroot:
    let bvw1=betav*inverse(w) in (bvw1, m-bvw1*tau)

{.simple affine coroots: number 0 is affine, rest are simple for RootDatum.}
set aff_simple_coroots (SimpleAffine affd) = [AffineCoroot]:
    (-highest_root(dual(affd)),1) #
    for alpha_v in simple_coroots(affd) do (alpha_v,0) od

{.sum of simple affine coroots times their labels is (null(rank),1).}
set labels(SimpleAffine affd) = [int]:
    let a = coroot_index(affd,highest_root(dual(affd))) in
    1 # coroot_expression(affd,a)

{.root attached to an AffineCoroot.}
set root (AffineCoroot (betav,m),SimpleAffine affd) = root(affd,betav)

{.affine reflection through Affine coroot, applied to weight.}
set reflection(AffineCoroot Betav, SimpleAffine affd, vec v) = vec:
    v - root(Betav,affd)*(Betav*v)

set reflection(AffineCoroot Betav, SimpleAffine affd, ratvec v) = ratvec:
    reflection(Betav, affd, v.numer)/v.denom

{ a k-diml facet in n-diml simplex is cut out by a collection of
(k+1) AffineCoroot strict inequalities and (n-k) AffineCoRoot equalities.
The total collection of affine coroots appearing must be a set of simple coroots
for the affine datum. IF THE FACET IS NOT AN ALCOVE, THIS
REPRESENTATION IS NOT UNIQUE. This representation is therefore not often used,
but see |facet0| (way) below }

set_type [Facet = ([AffineCoroot] pos,[AffineCoroot] zero)]

{ a UNIQUE characterization of a k-diml facet is as a set of k+1 vertices }

set_type FacetVerts = [ratvec]

set *(WeylElt w, FacetVerts FV) = FacetVerts:
    for v in FV do w*v od

set *(mat M, FacetVerts FV) = FacetVerts:
    for v in FV do M*v od

set *(AffineCoWeylElt wtilde, FacetVerts FV) = FacetVerts:
    for v in FV do wtilde*v od

{ Maybe the smallest UNIQUE characterization of a facet is the barycenter }
set_type FacetBary = ratvec

{represents a k-diml facet as k+1 indices into a list of vertices
(held elsewhere)}
set_type FacetVertsIndex = vec { of length k+1 for k-dimensional facet }

set_type
[ FacetVertsKHash = vec {last entry is index of KChar in some hash}
, LocalFacetVertsKHash = vec {last entry is index of KChar in some hash}
]

set_type
[ VertexData = ([ratvec] list, (ratvec->int) lookup)
, FacetDataKHash = (VertexData v_data
,   [[FacetVertsKHash]] Fverts)
, LocalFacetDataKHash = (VertexData v_data_local, KGBElt x,
  ratvec lambda, [[LocalFacetVertsKHash]] LFverts)
]

set to_vertex_data ([ratvec] vlist) = VertexData: (vlist,index_in(vlist))

set facet_indices((ratvec->int) lookup, FacetVerts facet) = FacetVertsIndex:
    for gammav in facet do lookup(gammav) od.sort

set sorted_is_subset([int] a, [int] b) = bool:
   let i=0, l=#b in
   for x in a
   do while if i<l then b[i]<x else return false fi do i+:=1 od
   ;  if x<b[i] then return false fi
   od; true

set sorted_is_disjoint([int] a, [int] b) = bool:
   let i=0, l=#b in
   for x in a
   do while if i<l then b[i]<x else return true fi do i+:=1 od
   ;  if x=b[i] then return false fi
   od; true

set index_in_facet_list([LocalFacetVertsKHash] L) = (vec->int):
    let m = #L[0]-4 
    in index_in(for v in L do v[:m] od)

{.compute the |Facet| of a barycenter (or any point) in the fundamental alcove.}
set facet0(SimpleAffine Affd, FacetBary gamma) = Facet:
    let S = [AffineCoroot]: { the simple system for the fundamental alcove }
       Affd.aff_simple_coroots
in ( for av in S do if =av*gamma then [] else [av] fi od.## { positives }
   , for av in S do if =av*gamma then [av] else [] fi od.## { zeros }
   )

{.simple roots corresponding to simple affine coroots: number 0 is
affine,  rest are simple for RootDatum.}
set aff_simple_roots(SimpleAffine affd) = mat:
    (-highest_root(dual(affd))) # affd.simple_roots

{.vertices of the fundamental alcove, ordered by |affd.affine_simple_coroots|.}
{ the vertex corresponding to an affine simple coroot is the one nonzero on it }
set fundamental_vertices (SimpleAffine affd) = [ratvec]:
    (ratvec:null(affd.rank)) { origin is vertex for the truly affine s.c.r. } #
    (let labs=affd.labels[1:] in
     for lab@j in labs do fundamental_weight(affd,j)/lab od)

{. select vertices of fund. alcove for aff. simple coroots nonzero on |gamma0|.}
set facet_verts0(SimpleAffine affd, FacetBary gamma0) = FacetVerts:
    let vert=fundamental_vertices(affd) in
    for coroot@d in [AffineCoroot]: affd.aff_simple_coroots
    do if =coroot*gamma0 then [] else [vert[d]] fi
    od.##

set barycenter ([ratvec] verts) = ratvec: { |verts| should be nonempty }
    sum(#verts[0],verts) / #verts

{. barycenter of facet of fundamental alcove that contains |gamma0|.}
set facet_bary0(SimpleAffine affd, ratvec gamma0) = FacetBary:
    barycenter(facet_verts0(affd,gamma0))

{. produces all k-element subsets of verts. The term "# #verts" is
[0,1,...,#verts - 1]
 .}
set choices_from( [ratvec]verts, int k) = [[ratvec]]:
    for S in choices_from(# #verts,k) do for s in S do verts[s] od od

set facets_fundamental(SimpleAffine affd, int d) = [FacetVerts]:
    choices_from(fundamental_vertices(affd),d+1)

{ vertex sets for facets in the fundamental alcove, organized by dimension }
set facets_fundamental(SimpleAffine affd) = [[FacetVerts]]:
    let fund_vertices = fundamental_vertices(affd) in
    for d: affd.aff_rank do choices_from(fund_vertices,d+1) od

{.barycenters of d-dimensional facets in the fundamental alcove.}
set fund_barycenters(SimpleAffine affd, int d) = [FacetBary]:
    for facet in facets_fundamental(affd,d) do barycenter(facet) od

{.barycenters of facets in fundamental alcove, organized by dimension.}
set fund_barycenters(SimpleAffine affd) = [[FacetBary]]:
    for L in facets_fundamental(affd)
    do for facet in L do barycenter(facet) od
    od

{ enumerate sums of roots to be added to gamma to land in FPP }
set FPPtauRoots(SimpleAffine Affd, ratvec gamma) = [vec]:
    let g=for av in Affd.simple_coroots do av*gamma od,
    	FW = Affd.fundamental_weights,
	FCW = Affd.fundamental_coweights
    then INT = [int]: for j:#Affd.simple_coroots
	 do
	 if is_integer(g[j]) then [j] else []
	 fi
	 od.##
    in
    for S in power_set(INT)
    do
	let tau = ratvec: sum(Affd.rank,
	    	for xi@j in FW
	      	do -floor(g[j])*xi
		od) +
	   	    sum(Affd.rank,for k in S do FW[k] od)
    	then (w,d) = %(ratvec: (for xiv in FCW do xiv*tau od))
    	in if d=1 then [w] else [] fi
     od.##

{ same thing, with (perhaps) one simple root j0 for which FPP takes values in
[0,2] on coroot j0. So need to use values -floor(g[j0]),
-floor(g([j0]) + 1 for that root always, and also -floor(g[j0]) + 2 if
g[j0] is an integer. }
{If j0 is in INT, then this counts 1*fundamental_weights[j0] WITH MULT 2}
set FPPtauRoots(SimpleAffine Affd, ratvec gamma, int j0) = [vec]:
    let g=^(Affd.simple_coroots)*gamma, flr = null(Affd.semisimple_rank)
    then INT = ##for j:#Affd.simple_coroots
	 do
	 if (flr[j]:= floor(g[j]))=g[j] then [j] else []
	 fi
	 od
    in
    let tau0 = -Affd.fundamental_weights*flr
    then taus = for S in power_set(INT)
	 do tau0+ sum(
	    Affd.rank,for j in S do Affd.fundamental_weights[j] od
		     )
	 od
    then () = if j0 >=0
    	      then taus:=taus## for tau in taus do tau+Affd.fundamental_weights[j0] od
	      fi
    in
    for tau in taus do
	if(all(
	for xiv in Affd.fundamental_coweights do is_integer(xiv*tau) od))
	then [ratvec_as_vec(tau)]
	else []
    fi
    od.##.no_reps

{ same thing, with (perhaps) one simple root j0 for which FPP takes
values in [0,2] on coroot j0. So need to use values -floor(g[j0]),
-floor(g([j0]) + 1 for that root always, and also -floor(g[j0]) + 2 if
g[j0] is an integer. This Fast version gives too many tau (finds
integral weights, not just root sums) unless G is adjoint and simply
connected, but it's up to 40% faster; when possible, just take the
extra tau and do a no_reps}

set FPPtauRootsFast(SimpleAffine Affd, ratvec gamma, int j0) = [vec]:
    let g=^(Affd.simple_coroots)*gamma, flr = null(Affd.semisimple_rank)
    then INT = ##for j:#Affd.simple_coroots
	 do
	 if (flr[j]:= floor(g[j]))=g[j] then [j] else []
	 fi
	 od
    in
    let tau0 = -Affd.fundamental_weights*flr
    then taus = for S in power_set(INT)
	 do tau0 + sum(
	    Affd.rank,for j in S do Affd.fundamental_weights[j] od
		     )
	 od
    then () = if j0 >=0
    	      then taus:=taus## for tau in taus do tau+Affd.fundamental_weights[j0] od
	      fi
     in for tau in taus
     	do let (tau0,d) = %tau
       	   in if d=1 then [tau0] else [] fi
	od.##

{ Computes INVERSE OF a (nonunique) aff Weyl gp elt wtilde moving
gamma to the fundamental alcove, and the (unique) image of gamma in that
fundamental alcove, trying to do integer arithmetic. }
set from_fundamental_alcove(RootDatum rd, ratvec gamma) =
    (AffineCoWeylElt,ratvec):
    let tau = alcove_root_vertex(rd,gamma)
    then (w,gamma0TIMESDEN) = from_dominant(rd,gamma.numer - gamma.denom*tau)
    in
    {assert (gamma=w*gamma0 + tau,"Bad affine!");}
    ((tau,w),gamma0TIMESDEN/gamma.denom)

{.restored from 3/30/22 version for use in computing bigger facets with
same unitarity status.}
set facet (SimpleAffine Affd, ratvec gamma) = Facet:
   let (wtilde,gamma0) = from_fundamental_alcove(Affd, gamma)
   then (F0pos,F0zero) = facet0(Affd,gamma0)
   in (for betav in F0pos do wtilde*betav od
      ,for betav in F0zero do wtilde*betav od)

{ computes barycenter from a facet as a vertex list }
set facet_bary([ratvec] vert_list, FacetVertsIndex facet) = FacetBary:
    sum(#vert_list[0], for v in facet do vert_list[v] od)/(#facet)

{ computes the FacetVerts (vertex set) of any barycenter of a facet of them }
set facet_verts(SimpleAffine Affd, ratvec gamma) = FacetVerts:
    let (wtilde,gamma0) = from_fundamental_alcove(Affd, gamma)
    in wtilde*facet_verts0(Affd,gamma0)

set lookup_vertices_for_barycenters \
    (SimpleAffine Affd, VertexData vd, [FacetBary] centers) \
    = [FacetVertsIndex]:
    for gamma in centers
    do for vertex in facet_verts(Affd, gamma)
       do vd.lookup(vertex)
       od.sort
    od

{ computes the (that is, a non-unique representation of the) facet of
any ratvec }
set facet(SimpleAffine Affd, ratvec gamma) = Facet:
    let (wtilde,gamma0) = from_fundamental_alcove(Affd, gamma)
    then (F0pos,F0zero) = facet0(Affd,gamma0)
    in (for betav in F0pos do wtilde*betav od ,
       for betav in F0zero do wtilde*betav od)

{ computes the FacetBary of any ratvec, for possibly nonsimple rd}
set facet_bary(RootDatum rd, ratvec gamma) = FacetBary:
    sum(rd.rank, for Affd in simple_factors(rd)
		 do
		 let (wtilde,gamma0) = from_fundamental_alcove(Affd, gamma)
		 in	wtilde*facet_bary0(Affd,gamma0)
		 od)

{.number of vertices in W*(fundamental alcove).}
set W_fund_vertices_card(SimpleAffine Affd) = int:
    let n=Affd.ss_rank, N=#W(Affd)
    then listn=for j:n do j od
    in
    1+sum(for S in choices_from(listn,n-2) do rat_as_int(N/#W(Levi(Affd,S))) od )

{.number of d-diml facets in W*(fundamental alcove).}
set W_fund_d_facets_card(SimpleAffine Affd,int d) = int:
    let n=Affd.ss_rank, N=#W(Affd)
    then listn=for j:n do j od
    in
    if d=n
    then N
    else sum(for T in choices_from(listn,n-d) do rat_as_int(N/#W(Levi(Affd,T))) od) +
	 sum(for S in choices_from(listn,n-d-1) do rat_as_int(N/#W(Levi(Affd,S))) od)
    fi

{.number of facets in W*(fundamental alcove).}
set W_fund_facets_card(SimpleAffine Affd) = [int]:
    for d:Affd.aff_rank
	do W_fund_d_facets_card(Affd,d)
	od
{.integrally dominant weights W-conjugate to a fundamental alcove vertex .}
set W_fund_verticesID(SimpleAffine Affd) = [ratvec]:
    for gamma in fundamental_vertices(Affd)
    do  for gammawn in Weyl_orbit(Affd,gamma.numer)
    	do if is_integrally_dominant(Affd,gammawn/gamma.denom)
	   then [gammawn/gamma.denom]
	   else []
	   fi
	od.##
    od.##

{.one rep of each translations-by-roots coset in each W orbit of a
fundamental alcove vertex.}
set W_fund_vertices_mod_R(SimpleAffine Affd) = [ratvec]:
    for gamma in fundamental_vertices(Affd)
    do  for w in affine_orbit_ws(Affd, gamma)
    	do w*gamma
	od
    od.##

set W_fund_barycentersID(SimpleAffine Affd) = [[FacetBary]]:
    for d:Affd.aff_rank
    do
    if facet_verbose
    then prints("start dim ",d," in W_fund_barycentersID.")
    fi;
		for gamma0 in fund_barycenters(Affd)[d]
		do for gammawn in Weyl_orbit(Affd,gamma0.numer)
		   do if is_integrally_dominant(Affd,gammawn/gamma0.denom)
		   then [gammawn/gamma0.denom]
		   else[]
		   fi
		   od.##
		od.##
     od

set W_fund_barycenters_mod_R(SimpleAffine Affd) = [[FacetBary]]:
    for d:Affd.aff_rank
    do
    if facet_verbose
    then prints("start dim ",d," in W_fund_barycenters_mod_R.")
    fi;
		for gamma0 in fund_barycenters(Affd)[d]
		do for w in affine_orbit_ws(Affd, gamma0)
		   do w*gamma0
		   od
		od.##
    od

{ to get everything in the FPP, should use only _integrally dominant_ gammaw in WA0.}
set W_fund_barycentersID(SimpleAffine Affd, int d) = [FacetBary]:
	if facet_verbose
	then prints("start W_fund_barycenters_mod_R(Affd, ",d,").")
	fi;
	for gamma0 in fund_barycenters(Affd)[d]
	do for gammawn in Weyl_orbit(Affd,gamma0.numer)
	    do
	    if is_integrally_dominant(Affd,gammawn/gamma0.denom)
	    then [gammawn/gamma0.denom]
	    else []
	    fi
	    od.##
	od.##

{.to get everything in the FPP, need just reps mod root lattice.}
set W_fund_barycenters_mod_R(SimpleAffine Affd, int d) = [FacetBary]:
	if facet_verbose
	then prints("start W_fund_barycenters_mod_R(Affd, ",d,").")
	fi;
	for gamma0 in fund_barycenters(Affd)[d]
	do for w in affine_orbit_ws(Affd, gamma0)
	   do (w*gamma0.numer)/gamma0.denom
	   od
	od.##

{translate that preserves integral dominance, lands in WFA; and
corresponding translation back down. This version avoids constructing the
integrality datum for gamma, which is one of the many in "random position."}
set beta2(RootDatum rd, ratvec gamma) = (vec,vec):
    let (wtilde,gamma2) = from_fundamental_alcove(rd,gamma)
    then (b,w) = wtilde {w*gamma2 + b = gamma}
    then iw = inverse(w)
    then irdw = integrality_datum(rd,gamma2)
    {this integrality datum is the nice restricted type!}
    then (x3,) = from_dominant(irdw, iw*rd.two_rho)
{means x3 w^{-1} * rho is dominant for irdw.}
{x3 is w^-1 x^{-1} w}
    then bup = w*b + ratvec_as_vec(w*(x3*(iw*gamma2))-gamma2)
{so gamma + bup is x^{-1}(gamma+w*b), in x^{-1}w(fund alcove + 2rho)}
    in (bup, -inverse(x3)*(iw*bup) )

{imitates library FPP_w_shifts, allowing a single root #j0 that can be up to 2 on FPP}
set FPP_w_shifts(RootDatum Affd, ratvec gamma, int j0) = [(WeylElt,[vec])]:
    if j0=-1
    then FPP_w_shifts(Affd,gamma)
    else for w in affine_orbit_ws(Affd,gamma)
    	 do (w, FPPtauRoots{Fast}(Affd,w*gamma,j0))
	 od{.no_reps}
    fi

{.this includes all vertices of facets in the fundamental
parallelepiped, each exactly once. j0 is possible label of a simple
coroot that can be up to 2 on FPP}
set FPP_vertices(SimpleAffine Affd, int j0) = [ratvec]:
    if facet_verbose then prints("start FPP_vertices.")
    fi;
    for gamma in fundamental_vertices(Affd)
    do let aff_short_list = FPP_w_shifts(Affd,gamma,j0)
	  then aff_list = [AffineCoWeylElt]:
	       for (w,taus) in aff_short_list
	       do for tau in taus do (tau,w) od
	       od.##
	  in for wtilde in aff_list do wtilde*gamma od
       od.##

set FPP_vertices(RealForm G) = [ratvec]:
    if facet_verbose then prints("start FPP_vertices of real form, ",G)
    fi;
    let (Affd,M,j0) = cofolded(G)
    in for v in FPP_vertices(Affd,j0) do M*v od

set FPP_barycenters(SimpleAffine Affd, int dim, int j0) = [FacetBary]:
    if facet_verbose then prints("start dim ",dim,
       		     " in FPP_barycenters(Affd,",dim,").")
    fi;
    let facets = [FacetVerts]: facets_fundamental(Affd,dim)
    in for FV@k in facets
       do { if facet_verbose
       	  then prints("start fund facet ",k," of ", #facets)
	  fi; }
       	  let bary_F=FacetBary: sum(Affd.rank,FV)/(dim+1)
	  then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	  then aff_list = [AffineCoWeylElt]:
	       for (w,taus) in aff_short_list
	       do for tau in taus do (tau,w) od
	       od.##
	  in for wtilde in aff_list do wtilde*bary_F od
       od.##

set FPP_barycenters(SimpleAffine Affd, int j) = [[FacetBary]]:
    if facet_verbose then prints("start FPP_barycenters.")
    fi;
    for d:Affd.aff_rank
    do
    FPP_barycenters(Affd,d,j)
    od

set FPP_vertex_data (SimpleAffine Affd, int j) = VertexData:
   FPP_vertices(Affd,j).to_vertex_data

set FPP_vertex_data(RealForm G) = VertexData:
    FPP_vertices(G).to_vertex_data

{ using FPP_w_shift }
set FPP_facets(SimpleAffine Affd, VertexData vd, int dim, int j0) =
    [FacetVertsIndex]:
    let facets = [FacetVerts]: facets_fundamental(Affd,dim)
    then ()= if facet_verbose
    	     then prints("start dim ",dim, " in FPP_facets")
	     fi
    in for FV@k in facets
       do if fund_facet_verbose or (facet_verbose and k=0)
       	  then prints("start fund facet ",k," of ", #facets, " in dim = ",dim,
	       " in FPP_facets")
	  fi;
	  let bary_F=FacetBary: sum(Affd.rank,FV)/(dim+1)
	  then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	  then aff_list = [AffineCoWeylElt]:
	       for (w,taus) in aff_short_list
	       do for tau in taus do (tau,w) od
	       od.##
	  in [FacetVertsIndex]:
	     for wtilde in aff_list
	     do FacetVertsIndex:
		      for v in wtilde*FV
		      do vd.lookup(v)
		      od.sort
	     od { type is [FacetVertsIndex], remains for next line}
	 od.##

set FPP_facets (SimpleAffine Affd, [ratvec] vlist, int dim,
    int j) =
    [FacetVertsIndex]:
    FPP_facets(Affd, to_vertex_data(vlist), dim, j)

{ m is a class known to be nonunitary; update classes above using
graph; label as "Ffrom"##tail}
{ first list in toDo all n covering m; then what covers those...
These get larger and larger.}
set updateNUclassesB([string] statuses, [[int]] covers, int m,
string tail) = [string]:
    let G1 = inner_class(root_datum(null(1,0),null(1,0))
    	,id_mat(1)).quasicompact_form {CALLER SHOULD HANDLE NEXT LINE}
    then x0 = KGB(G1,0)
    then toDo = sum(G1, for n in covers[m] do 1*K_type(x0,[n]) od) {+
    	 (if statuses[m] = "?" then 1 else 0 fi)*K_type(x0,[m])}
    then () = while #toDo != 0
    	      do
	      let list = vec:
	      	  for p in monomials(toDo)
		  do lambda_rho(p)[0]
		  od
	      then () = toDo := sum(G1, for n in list
	      	   	  	  do sum(G1,
					for q in covers[n]
					do 1*K_type(x0,[q]) od)
				  od)
	      in for k in list
	      	 do  if statuses[k] = "?"
    	     	     then statuses[k] := "Ffrom"##tail
		     fi
		 od
	      od
    in statuses

{ m is a class known to be nonunitary; update classes above using
graph; label as "Ffrom"m}
set updateNUclassesB([string] statuses, [[int]] covers, int m) = [string]:
    updateNUclassesB(statuses, covers, m, to_string(m))

set downdateU([[FacetStatusVertsIndex]] FD, [vec] equiv, [vec] fullDownClasses
    , [vec] classLists, int d,int j) = [[FacetStatusVertsIndex]]:
    let class = classLists[d][j]
    then () = for m in fullDownClasses[class]
    	      do
		let (d1,j1) = coords(FD, equiv[m][0])
		    then () = if FD[d1][j1].status = "?"
	     	    	      then for n in equiv[m]
	   	    	      	   do let (dx,jx) = coords(FD,n)
		     	    	      then FDdx = FD[dx]
		     	    	      in FDdx[jx] := ("Tdef",FD[dx][jx].verts)
		     	    	      ; FD[dx] :=FDdx
		  	 	   od
			      fi
         	in FD {this is terrifyingly wrong!}
    	    od
    in FD
{m is a class known to be unitary; update classes below using IUCL}
set downdateUclasses([string] statuses, vec IUCLchange, int m,
    string tail) = [string]:
    let () = for k in IUCLchange do if statuses[k] = "?"
    	     		   then statuses[k] := "Tfrom"##tail
			   fi
			od
    in statuses


{m is a class known to be unitary; update classes below using graph}
{first list in toDo everything covered by m: the n so m appears in covers[n].
Then what those cover... These n get SMALLER.}
set downdateUclassesB([string] statuses, [[int]] covers, int m,
string tail) = [string]:
    let G1 = inner_class(root_datum(null(1,0),null(1,0))
    	,id_mat(1)).quasicompact_form
    then x0 = KGB(G1,0)
    then toDo = (if statuses[m] = "?" then 1 else 0 fi)*K_type(x0,[m])
    then () = toDo +:= sum(G1, for C@n in covers[:m]
    	      	  	  ~do (if is_member_sorted(C)(m) then 1
			      else 0 fi)*K_type(x0,[n])
    	 {(if statuses[n] = "?" then 1 else 0 fi)}
			   od)
    then () = while #toDo != 0
    	      do
	      let list = vec:
	      	  for p in monomials(toDo)
		  do lambda_rho(p)[0]
		  od
	      then () = toDo :=
	      	   sum(G1, for n in list
	      	   	   do sum(G1, for C@q in covers[:n]
				      ~do (if is_member_sorted(C)(n)
				      	  then 1 else 0 fi)*K_type(x0,[q])
				      od)
			   od)
	      in for k in list
	      	 do  if statuses[k] = "?"
    	     	     then statuses[k] := "Ffrom"##tail{to_string(m)}
		     fi
		 od
	      od
    in statuses

set downdateUclasses([string] statuses, vec IUCLchange, int m) =
[string]:
	downdateUclasses(statuses, IUCLchange, m, to_string(m))


set local_facet_statusU(KGBElt x, ratvec lambda,
    VertexData (list,lookup0), [vec] IUC, [vec] CLBF,
    [string] statuses) = [string]:

(   let () = if facet_verbose
    	     then prints("start local_facet_statusU")
	     fi
    then newStatuses = statuses, G = x.real_form
    then st = G.dual.Springer_table
    in if not(is_split(G) and (x=x_open(G)) and (lambda = G.rho))
      then for O@j in st.orbits
      	   do let gamma = O.H/2
	      then m0 = lookup0(gamma)
      	      in if m0 >= 0 and
	      	    GK_dim(parameter(x,lambda,gamma)) =
		    dim(st.dual_map(O))/2
	 	 then newStatuses :=
		 downdateUclasses(newStatuses , IUC[CLBF[0][m0]]
		      , CLBF[0][m0], "unip"##to_string(j))
	 	 ; newStatuses[CLBF[0][m0]] := "Tunip"##to_string(j)
	 	 fi
      	   od
      else for O@j in st.orbits
      	   do let gamma = O.H/2
	      then m0 = lookup0(gamma)
     	       in if m0 >= 0
	       	  then newStatuses :=
		  downdateUclasses(newStatuses, IUC[CLBF[0][m0]]
		       , CLBF[0][m0],"unip"##to_string(j))
	 	  ; newStatuses[CLBF[0][m0]] := "Tunip"##to_string(j)
	 	  fi
            od
      fi
      ; newStatuses
)

{returns the collection of unipotent points in list, as coords in list. If (x,lambda)
 has more than one LKT, only keep the unipotent irrs having ALL these LKTs.}
set local_unipotent_classes(KGBElt x, ratvec lambda, VertexData (list,lookup)) = vec:
(   let () = if facet_verbose
    	     then prints("start local_unipotent_classes")
	     fi
    then G = x.real_form
    then st = G.dual.Springer_table
    in if not(is_split(G) and (x=x_open(G)) and (lambda = G.rho))
       then for O@j in st.orbits
      	   do let gamma = O.H/2
	      then m0 = lookup(gamma)
      	      in if m0 >= 0 and #finalize(parameter(x,lambda,gamma)) = 1 and
	      	 GK_dim(parameter(x,lambda,gamma)) = dim(st.dual_map(O))/2
		 then [m0]
		 else []
		 fi
	   od.##
	else for O@j in st.orbits
      	   do let gamma = O.H/2
	      then m0 = lookup(gamma)
     	       in if m0 >= 0
	       	  then [m0]
		  else []
		  fi
	   od.##
	fi
)

{vlist is a collection of possible infinitesimal characters for reps
(x,lambda,?), typically vertices from FPP. If vlist[i] shows up as
a vertex of a unitary facet, then there is another vertex vlist[j] so that

theta(vlist[i]) = -vlist[j] + (1+theta)lambda

The sequence [int] records the permutation i |--> j. The actual
vertices of the unitary facet are (vlist[i] + vlist[j])/2.

So this can be used to compute the actual facets of unitary
parameters, which are indeed simplices.  In the non-equal rank case,
one should apply this function to cofolded vertices, to be sure that
everything in sight is hermitian.}
set thetaAct (KGBElt x, ratvec lambda, VertexData vd) = vec:
{
for v in vd.list
    do vd.lookup(parameter(x,(x.involution)*lambda,-v).normal.infinitesimal_character)
    od
}
    let theta = x.involution then thetaPlus = (1+theta)*lambda
    in for v in vd.list do vd.lookup(-theta*v + thetaPlus) od

{want a faster version using already computed stuff?}
set local_vertices(Param p, VertexData vd, VertexData Lvd, vec Perm) = FacetVerts:
    let G = p.real_form, gamma = p.infinitesimal_character
    then list = [ratvec]: {these are vertices in vd}
    	 if is_equal_rank(G) then facet_verts(G, gamma)
    	 else let (Affd,M,j0) = cofolded(G)
    	      then gamma0 = solve(M,gamma).requisition
    	      in M*facet_verts(Affd, gamma0)
	 fi
    then perm = for v in list do Perm[vd.lookup(v)] od
    then () = assert(perm.>=,"p appears not to be a hermitian parameter")
    in for v@j in list do (v + vd.list[perm[j]])/2 od.no_reps

{compute the vertices of the local facet containing the HERMITIAN parameter p}
set local_vertices(Param p) = FacetVerts:
    let G = p.real_form, gamma = p.infinitesimal_character
    then list = [ratvec]:
    	 if is_equal_rank(G) then facet_verts(G, gamma)
    	 else let (Affd,M,j0) = cofolded(G)
    	      then gamma0 = solve(M,gamma).requisition
    	      in M*facet_verts(Affd, gamma0)
	 fi
    then vd = to_vertex_data(list), x = p.x, lambda = p.lambda
    then Perm = thetaAct(x,lambda,vd)
    then () = assert(Perm.>=,"p appears not to be a hermitian parameter")
    in for v@j in list do (v + list[Perm[j]])/2 od.no_reps

set herm_center(Param p) = Param:
    let list = local_vertices(p)
    in parameter(p.x, p.lambda, sum(#list[0], list)/#list)

{Take character_formula(p), and move each term to infl char gamma0. This works (give
honest deformed rep) if gamma0 is in the local facet of infl_char(p)}
set wiggle(Param p, ratvec gamma0) = ParamPol:
let P = character_formula(p)
in  sum(p.real_form, for c@q in P do c*parameter(q.x, q.lambda, gamma0) od)

set wiggle(ParamPol P, ratvec gamma0) = ParamPol:
sum(P.real_form, for c@q in P do c*parameter(q.x, q.lambda, gamma0) od)

{compute the deformations of irrep p to boundary facets of its facet. This is
a list of 2^{#local_vertices} - 1 ParamPol's, the character formulas on the walls.
If p is unitary, this is a sum with positive coeffs of characters of unitary reps}
set local_defs(Param p) = [ParamPol]:
 let list = local_vertices(p), CF = character_formula(p)
 then d = #list {dim of local facet plus 1}
 in for j:d from 1
    do for S in choices_from(list,j)
       do let gamma0 = sum(#list[0],S)/j
       in wiggle(CF,gamma0)
       od
    od.##

{compute the deformations of irrep p to boundary faces of its facet. This is
a list of #local_vertices ParamPol's, the character formulas on the faces.
If p is unitary, each is a sum with positive coeffs of characters of unitary reps}
set local_face_defs(Param p) = [ParamPol]:
    let list = local_vertices(p)
    in if #list = 1 then [ParamPol]: []
       else let CF = character_formula(p), sum = sum(#list[0], list), d=#list
       	    in for v in list
       do wiggle(CF, (sum - v)/(d-1))
       od
       fi

{compute the deformations of parameter p to walls of its facet. This begins with a list of
2^{#local_vertices} - 1 Param's (which may not be final), and finalizes.}
set local_param_defs(Param p) =[Param]:
let list = local_vertices(p)
then d = #list {dim of local facet plus 1}
in for j:d from 1
   do for S in choices_from(list,j)
      do let gamma0 = sum(#list[0],S)/j
      in monomials(1*parameter(p.x,p.lambda,gamma0))
      od.##
   od.##

{this is all the (automatically unitary) unitary irrs arising by
deformation of one know unitary irr p}
set deformed_unitaries_pol(Param p) = ParamPol:
sum(p.real_form, local_defs(p))

set face_deformed_unitaries_pol(Param p) = ParamPol:
sum(p.real_form, local_face_defs(p))

set deformed_unitaries(Param p) = [Param]:
    monomials(composition_series(deformed_unitaries_pol(p)))

set face_deformed_unitaries(Param p) = [Param]:
    monomials(composition_series(face_deformed_unitaries_pol(p)))

set face_deformed_unitaries_new(Param p) = [Param]:
    for q in face_deformed_unitaries(p)
    do if q.x != p.x
       then [herm_center(q)]
       else []
       fi
    od.##

{ set #(Param_hash U) = U.size()}
set size([Param_hash] Us) = sum(for U in Us do U.size() od)

{inserts special unipotent reps in unitary_hash}
set unipotents_to_hash(RealForm G, Param_hash Uhash) = void:
    let mus = for p in unipotent_representations(G) do Uhash.match(p) od
    in ()

{inserts special unipotent reps in [unitary_hash]; assumed to have one
 for each KGBElt}
set unipotents_to_hashes(RealForm G, [Param_hash] Uhashes) = void:
    let mus = for p in unipotent_representations(G)
    	      do let (,xnum) = %p.x
	         in Uhashes[xnum].match(p)
	      od
    in ()


{takes the known unitaries from unitary_hash having the given x and lambda,
 and returns their locations in LFDKH}
set known_unitaries(Param_hash Uhash, KGBElt x, ratvec lambda, VertexData Lvd,
    [[FacetVertsKHash]] LFDKH) = [vec]:
    let lookups = for list@d in LFDKH do index_in(if #list = 0 then [vec]:[]
    	      	  	    	     	      else for v in list do v[:d+1] od
					      fi)
				      od
    then NumKnown = Uhash.size(), out = [vec]: for j:#LFDKH do vec:[] od
    then () = for k:NumKnown
       	 do let p = Uhash.index(k)
       	    then list = local_vertices(p)
            in if p.x = x and p.lambda=lambda and #list-1 < #LFDKH
	       then let local_verts = vec: for ell in list do Lvd.lookup(ell) od.sort
	     	    then m = lookups[#list-1](local_verts)
		    then () = assert(m.>=,"have known unitary not appearing in LFDKH")
		    then () = out[#list-1]:=out[#list-1]#m
		    in ()
	       fi
	 od
     in out

{Here UhashLocal is assumed to consist of Param's at (x,lambda)}
{this misses (in local_testK_level) unitary Param's that finalize to different x;
those are caught by local_testK_hash}
set known_unitaries(Param_hash UhashLocal, VertexData Lvd,
    [[FacetVertsKHash]] LFDKH) = [vec]:
    let lookups = for list@d in LFDKH do index_in(if #list = 0 then [vec]:[]
    	      	  	    	     	      else for v in list do v[:d+1] od
					      fi)
				      od
    then NumKnown = UhashLocal.size(), out = [vec]: for j:#LFDKH do vec:[] od
    then () = for k:NumKnown
       	 do let p = UhashLocal.index(k)
       	    then list = local_vertices(p)
            in if #list-1 < #LFDKH
	       then let local_verts = vec: for ell in list do Lvd.lookup(ell) od.sort
	     	    then m = lookups[#list-1](local_verts)
		    then () = assert(m.>=,"have known unitary not appearing in LFDKH")
		    then () = out[#list-1]:=out[#list-1]#m
		    in ()
	       fi
	 od
     in out

set localize(Param_hash Uhash, KGBElt x, ratvec lambda) = Param_hash:
    let NumKnown = Uhash.size(), UhashLoc = make_Param_hash()
    then () = for k:NumKnown
       	      do let p = Uhash.index(k)
	      	 in if p.x = x and p.lambda = lambda
		    then UhashLoc.match(p)
		    else -1
		    fi
	      od
    in UhashLoc

set localize(Param_hash Uhash, ratvec lambda) = Param_hash:
    let NumKnown = Uhash.size(), UhashLoc = make_Param_hash()
    then () = for k:NumKnown
       	      do let p = Uhash.index(k)
	      	 in if p.lambda = lambda
		    then UhashLoc.match(p)
		    else -1
		    fi
	      od
    in UhashLoc

{creates LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local verts}
{in U(3,2), x_open, #vlist = 16: 4 fixed, 6 pairs flipped by Perm. The set of 6 pairs
gives only 3 elts of vlistAct: need to get rid of 3 repetitions.}
set localFD_Lvd \
  ( KGBElt x, ratvec lambda, VertexData vd) =
  (VertexData, vec, vec):
(   if facet_verbose
    then prints("start localFD_Lvd")
    fi;
    let Perm = thetaAct(x, lambda, vd)
    then vlist = vd.list
    then vlistRep = [ratvec]:
 	 for v@i in vlist
	     do let j = Perm[i]
	     	in if j >= i
		   then [(v + vlist[j])/2]
		   else []
		   fi
	     od.##
    then vlistAct = vlistRep.no_reps
    then Lvd = vlistAct.to_vertex_data
    then Llookup = Lvd.lookup
    then mapAct = vec:
    {maps FPP vertex indices from vd to local indices from Lvd}
        for v@i in vlist
	 do  let j = Perm[i] in
	     if   j = i then Llookup(v)
	     elif j >=0 then Llookup((v+vlist[j])/2)
	     else minus_1
	     fi
	 od
    in (Lvd, Perm, mapAct)
)

{creates vd, LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local
 verts, and 0-facets for (x,lambda)}
set localFD_KHash000 \
  ( KGBElt x, ratvec lambda, VertexData Lvd, vec Perm, vec mapAct,
    	   KTypePol_hash ktp_hash) = [[FacetVertsKHash]]:
(   if facet_verbose
    then prints("start localFD_KHash000")
    fi;
    let vlistAct = Lvd.list
    in	[for v@k in vlistAct
	 do if k%(max(#vlistAct\100,2))=0 and fund_facet_verbose
	    then prints("examining facet ",k," of ",#vlistAct," in localFD_KHash000;",
	    "ktp_hash.size() = ",ktp_hash.size())
	    fi;
	    let P = parameter(x,lambda,v).finalize
	    in if all(for p in monomials(P) do is_pos_on_LKTs(p) od)
	    {think this gives hermitian also?}
	      {not sure I'm happy with what's eliminated by the if. "is_pos_on_LKTs"
	       is too mysterious}
	       then let Q = K_type_pol(character_formula(P))
		{not sure what to do if P is reducible}
	    	    in [[k, ktp_hash.match(Q)]]
	       else []
	       fi
	 od.##]
)

{creates vd, LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local
 verts, LUC list of local unipotent classes, and 0-facets for (x,lambda) that
 are unitary to height h. Uhashes are meant to contain some unitary reps, indexed
 by KGBElt of Param}
set localFD_KHash001 \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
  int h, KTypePol_hash ktp_hash, [Param_hash] UHashes) = [[FacetVertsKHash]]:
(   if facet_verbose
    then prints("start localFD_KHash001")
    fi;
    let vlistAct = Lvd.list
    then Llookup = Lvd.lookup
    then () = if facet_verbose
             	then prints("examining ", #vlistAct, " facets of dim ",0,
	       " in construction of local facet list0")
	     fi
    then tester = (Param->bool): (Param p) bool: is_unitary_to_ht(p, h)
    then FVK0 = [FacetVertsKHash]:
    	 for v@k in vlistAct
	 do if k%(max(#vlistAct\100,2))=0 and fund_facet_verbose
	    then prints("examining facet ",k," of ",#vlistAct," in localFD_KHash001;",
	    "ktp_hash.size() = ",ktp_hash.size())
	    fi;
	    let p = parameter(x,lambda,v)
	    then P = finalize(p)
	    then ps = monomials(P)
	    in if all(for p in ps do let (,j) = %p.x in UHashes[j].lookup(p).>= or
	       	  	  tester(p) od)
	       then let Q = K_type_pol(character_formula(P))
	    	    in [[k, ktp_hash.match(Q)]]
	       else []
	       fi
	 od.##
    in if(facet_verbose) then prints("After localFD_KHash001, vertex count is ",
    #FVK0) fi;
       [FVK0]
)


{creates vd, LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local
 verts, LUC list of local unipotent classes, and 0-facets for (x,lambda) that
 are unitary to height h. Uhashes are meant to contain some unitary reps, indexed
 by KGBElt of Param}
set localFD_KHash001 \
  ( KGBElt x, ratvec lambda, int h, KTypePol_hash ktp_hash, [Param_hash] UHashes) =
  (VertexData, VertexData, vec, vec, [[FacetVertsKHash]]):
(   if facet_verbose
    then prints("start localFD_KHash001")
    fi;
    let G = x.real_form
    then vd = FPP_vertex_data(G)
    then (Lvd, Perm, mapAct) = localFD_Lvd(x,lambda, vd)
    in (vd, Lvd, Perm, mapAct, localFD_KHash001(x, lambda, vd, Lvd, Perm, mapAct, h,
       ktp_hash, UHashes))
)

set localFD_KHash001 \
  ( KGBElt x, ratvec lambda, int h, KTypePol_hash ktp_hash, Param_hash Uhash) =
  (VertexData, VertexData, vec, vec, [[FacetVertsKHash]]):
  let Uhashes = for y in KGB(x.real_form) do make_Param_hash() od
  then () = for k:Uhash.size()
       do let p = Uhash.index(k)
       	  then (,j) = %p.x
	  in Uhashes[j].match(p)
       od
  in localFD_KHash001(x,lambda, h, ktp_hash, Uhashes)

{creates vd, LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local
 verts, and 0-facets for (x,lambda)}
set localFD_000 \
  ( KGBElt x, ratvec lambda, VertexData vd) =
  (VertexData, VertexData, vec, vec, [[FacetVertsIndex]]):
(   let (Lvd, Perm, mapAct) = localFD_Lvd(x, lambda, vd)
  in (vd, Lvd, Perm, mapAct, [ for v@k in Lvd.list do [k] od ])
)

set localFD_000 \
  ( KGBElt x, ratvec lambda) =
  (VertexData, VertexData, vec, vec, [[FacetVertsIndex]]):
  ( localFD_000(x, lambda, FPP_vertex_data(x.real_form) ) )

{creates vd, LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local
 verts, and 0-facets for (x,lambda). This time makes ONLY vertices that are FPP verts or barycenters of FPP edges flipped by thetaAct}
set localFD_KHash007 \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm,
    vec mapAct, KTypePol_hash ktp_hash) =
  (VertexData, VertexData, vec, vec, [[FacetVertsKHash]]):
(   if facet_verbose
    then prints("examining ", #Lvd.list, " facets of dim ",0,
	       " in construction of local facet list0")
    fi;
    let vlistAct = Lvd.list
    then FVK0 = [FacetVertsKHash]:
    	 for v@k in vlistAct
	 do if k%(max(#vlistAct\100,2))=0 and fund_facet_verbose
	    then prints("examining facet ",k," of ",#vlistAct," in localFD_KHash007;",
	    " ktp_hash.size() = ",ktp_hash.size())
	    fi;
	    let P = parameter(x,lambda,v).finalize
	    in if all(for p in monomials(P) do is_pos_on_LKTs(p) od)
	    {think this gives hermitian also?}
	       then let Q = K_type_pol(character_formula(P))
	    	    in [[k, ktp_hash.match(Q)]]
	       else []
	       fi
	 od.##
    in if(facet_verbose) then prints("After localFD_KHash007, vertex count is ",
    #FVK0) fi;
    (vd, Lvd, Perm, mapAct, [FVK0])
)

{creates vd, LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local
 verts, and 0-facets for (x,lambda). This time makes ONLY vertices that are FPP verts or barycenters of FPP edges flipped by thetaAct}
set localFD_KHash007 \
  ( KGBElt x, ratvec lambda, VertexData vd, KTypePol_hash ktp_hash) =
  (VertexData, VertexData, vec, vec, [[FacetVertsKHash]]):
(
    let (Lvd, Perm, mapAct) = localFD_Lvd(x, lambda, vd)
    in localFD_KHash007(x, lambda, vd, Lvd, Perm, mapAct, ktp_hash)
)

{creates vd, LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local
 verts, and 0-facets for (x,lambda). This time makes ONLY vertices that are FPP verts or barycenters of FPP edges flipped by thetaAct}
set localFD_KHash007 \
  ( KGBElt x, ratvec lambda, KTypePol_hash ktp_hash) =
  (VertexData, VertexData, vec, vec, [[FacetVertsKHash]]):
  localFD_KHash007(x, lambda, FPP_vertex_data(x.real_form), ktp_hash)


{creates vd, LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local
 verts, and 0-facets for (x,lambda). This time makes ONLY vertices that are FPP verts or barycenters of FPP edges flipped by thetaAct}
set localFD_007 \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct) =
  (VertexData, VertexData, vec, vec, [[FacetVertsIndex]]):
(   if facet_verbose
    then prints("start localFD_007")
    fi;
    let LF0 = for j:#Lvd.list do [j] od
    in if(facet_verbose) then prints("After localFD_007, vertex count is ", #LF0) fi;
    (vd, Lvd, Perm, mapAct, [LF0])
)

{creates vd, LVD, map Perm on FPPverts at (x,lambda), mapAct from FPPverts to local
 verts, and 0-facets for (x,lambda). This time makes ONLY vertices that are FPP verts or barycenters of FPP edges flipped by thetaAct}
set localFD_007 \
  ( KGBElt x, ratvec lambda) =
  (VertexData, VertexData, vec, vec, [[FacetVertsIndex]]):
(  let vd = FPP_vertex_data(x.real_form)
  then (Lvd, Perm, mapAct) = localFD_Lvd(x, lambda, vd)
  in localFD_007(x, lambda, vd, Lvd, Perm, mapAct)
)

{takes local vertices LFKH, and adds local 1-d facets; so output is size 2.}
set localFD_KHash1 \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, KTypePol_hash ktp_hash) = [[FacetVertsKHash]]:
(   assert(#LFKH = 1,"localFD_KHash1 takes only local VERTEX list");
    if facet_verbose
    then prints(new_line, "start localFD_Khash1")
    fi;
    let G = x.real_form
    then (Affd, M, j0) = cofolded(G)
    then top = int: if any(for j:#Perm do Perm[j] > j od) then 4 else 1 fi
    then Edges = [vec]:
    	       for dim:top from 1
    	       do [vec]:
	       	  let facets = [FacetVerts]: facets_fundamental(Affd,dim)
    	 	  in for FV@k in facets
		     do [vec]:
		     	let bary_F =FacetBary: sum(Affd.rank,FV)/(dim+1)
			then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	       	 	then aff_list = [AffineCoWeylElt]:
	       	    	     for (w,taus) in aff_short_list
	       	    	     do for tau in taus do (tau,w) od
	       	    	     od.##
	       	 	in for wtilde in aff_list
	       	    	   do let (tau,w) = wtilde
		       	      then global = vec:
				   for v in wtilde*FV
		       	    	   do (vd.lookup)(M*v)
				   od.sort {indices into FPP vertex list}
			      then local = for ell in global do Perm[ell] od
				     	  	  {indices into Lvd list}
			      then actual = vec:
				   if local.>= and
				      is_subset(local,global) and
				      none(for i in global do mapAct[i] < 0 od)
			    	   then for i in global
			    	 	   do mapAct[i]
				 	   od.no_reps{sort}
			    	   else []
			    	      fi
			       in if #actual = 2 then [actual] else [] fi
			    od.## {list of edges from FV}
			od.## {list of edges from dim FPP facets}
		 od.## {list of edges from dims 1-4}
    then LFKH1 = [FacetVertsKHash]:
    	 for actual in Edges
	 do let bary = facet_bary(Lvd.list,actual)
	    then P = parameter(x,lambda,bary).finalize
	    in if all ( for p in monomials(P) do is_pos_on_LKTs(p) od)
	    {think this gives hermitian also?}
	       then let Q = K_type_pol(character_formula(P))
	       	    in [actual#ktp_hash.match(Q)]
	       else []
	       fi
	 od.##
    in if(facet_verbose) then prints("After localFD_KHash1, facet counts are [",
       			 #LFKH[0], ",",#LFKH1,"]")
       fi;
       LFKH#LFKH1
)

{takes local vertices LFKH, and adds local 1-d facets; so output is size 2.
This version looks at all pairs of local vertices and checks whether they are
actually local edges using "local_vertices" function}
set localFD_KHash1new \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, KTypePol_hash ktp_hash) = [[FacetVertsKHash]]:
(   assert(#LFKH = 1,"localFD_KHash1 takes only local VERTEX list");
    if facet_verbose
    then prints(new_line, "start localFD_Khash1new")
    fi;
    let G = x.real_form
    then (Affd, M, j0) = cofolded(G)
    then Edges = [vec]:
    	 if #LFKH[0] <= 1 then []
	 else 
    	 for v@j in LFKH[0][:#LFKH[0]-1]
	 do for w in LFKH[0][j+1:]
	    do let test = [Lvd.list[v[0]], Lvd.list[w[0]]]
	    then bary = (test[0] + test[1])/2
	       then ends = local_vertices(parameter(x,lambda,bary), vd, Lvd, Perm)
	       in if #ends = 2 and
	             ((ends[0] = test[0] and ends[1] = test[1]) or
	       	     (ends[0] = test[1] and ends[1] = test[0]))
	       	  then [[v[0],w[0]].sort]
		  else []
		  fi
	     od.##{list of edges starting at v}
	  od.## {list of all edges}
	  fi
    then LFKH1 = [FacetVertsKHash]:
    	 for actual in Edges
	 do let bary = facet_bary(Lvd.list,actual)
	    then P = parameter(x,lambda,bary).finalize
	    in if all ( for p in monomials(P) do is_pos_on_LKTs(p) od)
	    {think this gives hermitian also?}
	       then let Q = K_type_pol(character_formula(P))
	       	    in [actual#ktp_hash.match(Q)]
	       else []
	       fi
	 od.##
    in if(facet_verbose) then prints("After localFD_KHash1new, facet counts are [",
       			 #LFKH[0], ",",#LFKH1,"]") fi;
       LFKH#LFKH1
)


{takes local vertices LFKH assumed unitary to h, and adds local 1-d facets unitary
      to h; so output is size 2.}
set localFD_KHash11 \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, int h, KTypePol_hash ktp_hash,
    Param_hash UHashloc) = [[FacetVertsKHash]]:
(   assert(#LFKH = 1,"localFD_KHash11 takes only local VERTEX list");
    if facet_verbose
    then prints(new_line,"start localFD_Khash11")
    fi;
    let G = x.real_form
    then (Affd, M, j0) = cofolded(G)
    then top = int: if any(for j:#Perm do Perm[j] > j od) then 4 else 1 fi
    then Edges = [vec]:
    	       for dim:top from 1
    	       do [vec]:
	       	  let facets = [FacetVerts]: facets_fundamental(Affd,dim)
    	 	  in for FV@k in facets
		     do [vec]:
		     	let bary_F =FacetBary: sum(Affd.rank,FV)/(dim+1)
			then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	       	 	then aff_list = [AffineCoWeylElt]:
	       	    	     for (w,taus) in aff_short_list
	       	    	     do for tau in taus do (tau,w) od
	       	    	     od.##
	       	 	in for wtilde in aff_list
	       	    	   do let (tau,w) = wtilde
		       	      then global = vec:
				   for v in wtilde*FV
		       	    	   do (vd.lookup)(M*v)
				   od.sort {indices into FPP vertex list}
			      then local = for ell in global do Perm[ell] od
				     	  	  {indices into Lvd list}
			      then actual = vec:
				   if local.>= and
				      is_subset(local,global) and
				      none(for i in global do mapAct[i] < 0 od)
			    	   then for i in global
			    	 	   do mapAct[i]
				 	   od.no_reps{sort}
			    	   else []
			    	      fi
			       in if #actual = 2 then [actual] else [] fi
			    od.## {list of edges from FV}
			od.## {list of edges from dim FPP facets}
		 od.## {list of edges from dims 1-4}
    then known = known_unitaries(UHashloc, Lvd, LFKH#Edges)[1]
    then LFKH1 = [FacetVertsKHash]:
    	 for actual@k in Edges
	 do let bary = facet_bary(Lvd.list,actual)
	    then p = parameter(x,lambda,bary)
	    then P = finalize(p)
	    in if is_member(known)(k) or
	       	  all(for p in monomials(P) do {UHashloc.lookup(p).>= or} is_unitary_to_ht(p,h) od)
	       then let Q = K_type_pol(character_formula(P))
	       	    in [actual#ktp_hash.match(Q)]
	       else []
	       fi
	 od.##
    in if(facet_verbose) then prints("After localFD_KHash11, facet counts are [",
       #LFKH[0], ",",#LFKH1,"]") fi;
       LFKH#LFKH1
)

{takes local vertices LFKH assumed unitary to h, and adds local 1-d facets unitary
 to h; so output is size 2. Instead of looking at all FPP facets, just uses pairs
 of LFKH[0] elements. UHash records some known unitary reps.}
set localFD_KHash12 \
  ( KGBElt x, ratvec lambda, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, int h, KTypePol_hash ktp_hash,
    			{KTypePol_hash cert_hash,} [Param_hash] UHashes) =
    [[FacetVertsKHash]]:
(   assert(#LFKH = 1,"localFD_KHash12 takes only local VERTEX list");
    if facet_verbose
    then prints(new_line,"start localFD_Khash12")
    fi;
    {let Llookup = Lvd.lookup}
    let G = x.real_form
    then (Affd, M, j0) = cofolded(G)
    then Edges = [vec]:
    	 if #LFKH[0] <= 1 then []
	 else 
    	 for v@j in LFKH[0][:#LFKH[0]-1]
	 do for w in LFKH[0][j+1:]
	    do let test = [Lvd.list[v[0]], Lvd.list[w[0]]]
	    then bary = (test[0] + test[1])/2
	       then ends = local_vertices(parameter(x,lambda,bary))
	       in if #ends = 2 and
	             ((ends[0] = test[0] and ends[1] = test[1]) or
	       	     (ends[0] = test[1] and ends[1] = test[0]))
	       	  then [[v[0],w[0]].sort]
		  else []
		  fi
	     od.##{list of edges starting at v}
	  od.## {list of all edges}
	  fi
    {then known = known_unitaries(UHashloc, Lvd, LFKH#Edges)[1]}
    then () = if facet_verbose
             	then prints("examining ", #Edges, " facets of dim 1",
	       " in construction of LFKH1")
	     fi
    then tester = (Param->bool): (Param p) bool:
    	      {if (cert_flag) then is_unitary_to_ht(p, h, cert_hash)
    	      else} is_unitary_to_ht(p, h)
	      {fi}
    then LFKH1 = [FacetVertsKHash]:
    	 for actual@k in Edges
	 do if k%(max(#Edges\50,2))=0 and fund_facet_verbose
	    then prints("examining edge ",k," of ",#Edges," in localFD_KHash12;",
	    " ktp_hash.size() = ",ktp_hash.size())
	    fi;
	    let bary = facet_bary(Lvd.list,actual)
	    then p = parameter(x,lambda,bary)
	    then P = finalize(p)
	    in if all(for p in monomials(P)
	       	   do let (,j) = %p.x in UHashes[j].lookup(p).>= or tester(p)
		   od)
	       then let Q = K_type_pol(character_formula(P))
	       	    in [actual#ktp_hash.match(Q)]
	       else []
	       fi
	 od.##
    in if(facet_verbose) then prints("After localFD_KHash12, facet counts are [",#LFKH[0],
    		      	   	  ",",#LFKH1,"]") fi;
       LFKH#LFKH1
)

set localFD_KHash12 \
  ( KGBElt x, ratvec lambda, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, int h, KTypePol_hash ktp_hash,
    			{KTypePol_hash cert_hash,} Param_hash Uhash) =
    [[FacetVertsKHash]]:
 let Uhashes = for y in KGB(x.real_form) do make_Param_hash() od
  then () = for k:Uhash.size()
       do let p = Uhash.index(k)
       	  then (,j) = %p.x
	  in Uhashes[j].match(p)
       od
  in localFD_KHash12(x,lambda, Lvd, Perm, mapAct, LFKH, h, ktp_hash, Uhashes)


{takes local vertices LF, and adds local 1-d facets; so output is size 2.}
set localFD_1 \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsIndex]] LF) = [[FacetVertsIndex]]:
(   assert(#LF = 1,"localFD_1 takes only local VERTEX list");
    if facet_verbose
    then prints(new_line,"start localFD_1")
    fi;
    {let Llookup = Lvd.lookup}
    let G = x.real_form
    then (Affd, M, j0) = cofolded(G)
    then top = int: if any(for j:#Perm do Perm[j] > j od) then 4 else 1 fi
    then Edges = [vec]:
    	       for dim:top from 1
    	       do [vec]:
	       	  let facets = [FacetVerts]: facets_fundamental(Affd,dim)
    	 	  in for FV@k in facets
		     do [vec]:
		     	let bary_F =FacetBary: sum(Affd.rank,FV)/(dim+1)
			then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	       	 	then aff_list = [AffineCoWeylElt]:
	       	    	     for (w,taus) in aff_short_list
	       	    	     do for tau in taus do (tau,w) od
	       	    	     od.##
	       	 	in for wtilde in aff_list
	       	    	   do let (tau,w) = wtilde
		       	      then global = vec:
				   for v in wtilde*FV
		       	    	   do (vd.lookup)(M*v)
				   od.sort {indices into FPP vertex list}
			      then local = for ell in global do Perm[ell] od
				     	  	  {indices into Lvd list}
			      then actual = vec:
				   if local.>= and
				      is_subset(local,global) and
				      none(for i in global do mapAct[i] < 0 od)
			    	   then for i in global
			    	 	   do mapAct[i]
				 	   od.no_reps{sort}
			    	   else []
			    	      fi
			       in if #actual = 2 then [actual] else [] fi
			    od.## {list of edges from FV}
			od.## {list of edges from dim FPP facets}
		 od.## {list of edges from dims 1-4}
    in if(facet_verbose) then prints("After localFD_1, facet counts are [",#LF[0],
    		      	   	  ",",#Edges,"]") fi;
       LF#Edges
 )

{takes local data to height level, dimension \le b-1, and adds facets from
b to (t-1)-dimensional FPP-facets. Need to be sure that input is based only
on FPP facets up to dim b-1, or repetitions can appear in output. Safety is
provided by the slower function without the argument b}
set localFD_KHashbt \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, int b, int t, KTypePol_hash ktp_hash) = [[FacetVertsKHash]]:
(   if facet_verbose
    then prints(new_line,"start localFD_Khashbt")
    fi;
    {let Llookup = Lvd.lookup}
    let G = x.real_form
    then (Affd, M, j0) = cofolded(G)
    then LFKHnew = [[FacetVertsKHash]]: LFKH##(for dim:t-#LFKH from #LFKH do
    	 [FacetVertsKHash]: [] od)
    then () = for dim:t-b from b
    	      do let facets = [FacetVerts]: facets_fundamental(Affd,dim)
    	      	 then () = for FV@k in facets
       	      	      	   do if (facet_verbose and k=0) or fund_facet_verbose
       	       	       	      then prints("start fund facet ",k," of ", #facets,
	       	       	      	   " in dim ", dim,
		       		   " in localFD_KHashbt; ktp_hash.size() = ",
		       		   ktp_hash.size())
	       	 	      fi;
	       	 	      let bary_F=FacetBary: sum(Affd.rank,FV)/(dim+1)
	       	 	      then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	       	 	      then aff_list = [AffineCoWeylElt]:
	       	    	      	   for (w,taus) in aff_short_list
	       	    		   do for tau in taus do (tau,w) od
	       	    		   od.##
	       	 	      in for wtilde in aff_list
	       	    	      	 do let (tau,w) = wtilde
		       		    {global is called v earlier}
		       		    then global = for v in wtilde*FV
		       	    	     	 	  do (vd.lookup)(M*v)
				     		  od.sort
		       		    {local is called vtheta earlier}
		       		    then local = for ell in global do Perm[ell] od
				    {if -1 appears in local, subset fails}
		       		    {actual is called vAct earlier}
		       		    then actual = vec:
				    	 if local.>= and is_subset(local,global) and
					    none(for i in global do mapAct[i] < 0 od)
			    		 then for i in global
			    	 	      do mapAct[i]
				 	      od.no_reps{sort}
			    		 else []
			    		 fi
		       		    then () =
				    if #actual > 1 {already got vertices}
				    then let bary =  M*(wtilde*bary_F)
	    				 then P = parameter(x,lambda,bary).finalize
	    				 in if all(for p in monomials(P) do is_pos_on_LKTs(p) od)
					 {think this gives hermitian also?}
	       				    then let Q = K_type_pol(character_formula(P))
	       				 {not sure what to do if P is
					 reducible; maybe first_param(P)??}
	       	    			 	 then () = actual:= actual#ktp_hash.match(Q)
	       				         in LFKHnew[#actual-2] :=
						   (LFKHnew[#actual-2] next LFKHnew[#actual-2]:=[])
			   	 	      		# actual
	       			    	    fi
				    fi
				    in ()
	 			 od
	      	            od
			    in ()
		od
    then dAct = last(for j:#LFKHnew do #LFKHnew[j] > 0 od)
    in LFKHnew[:dAct+1]
)

{takes local facets of dimension \le b-1, and adds facets from
b to (t-1)-dimensional FPP-facets. Need to be sure that input is based only
on FPP facets up to dim b-1, or repetitions can appear in output.}
set localFD_bt \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsIndex]] LF, int b, int t) = [[FacetVertsIndex]]:
(   if facet_verbose
    then prints(new_line,"start localFD_bt")
    fi;
    {let Llookup = Lvd.lookup}
    let G = x.real_form
    then (Affd, M, j0) = cofolded(G)
    then () = LF := LF##(for dim:t-#LF from #LF do
    	 [FacetVertsIndex]: [] od)
    then () = for dim:t-b from b
    	      do let facets = [FacetVerts]: facets_fundamental(Affd,dim)
    	      	 then () = for FV@k in facets
       	      	      	   do if (facet_verbose and k=0) or fund_facet_verbose
       	       	       	      then prints("start fund facet ",k," of ", #facets,
	       	       	      	   " in dim ", dim,
		       		   " in localFD_bt")
	       	 	      fi;
	       	 	      let bary_F=FacetBary: sum(Affd.rank,FV)/(dim+1)
	       	 	      then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	       	 	      then aff_list = [AffineCoWeylElt]:
	       	    	      	   for (w,taus) in aff_short_list
	       	    		   do for tau in taus do (tau,w) od
	       	    		   od.##
	       	 	      in for wtilde in aff_list
	       	    	      	 do let (tau,w) = wtilde
		       		    {global is called v earlier}
		       		    then global = for v in wtilde*FV
		       	    	     	 	  do (vd.lookup)(M*v)
				     		  od.sort
		       		    {local is called vtheta earlier}
		       		    then local = for ell in global do Perm[ell] od
				    {if -1 appears in local, subset fails}
		       		    {actual is called vAct earlier}
		       		    then actual = vec:
				    	 if local.>= and is_subset(local,global) and
					    none(for i in global do mapAct[i] < 0 od)
			    		 then for i in global
			    	 	      do mapAct[i]
				 	      od.no_reps{sort}
			    		 else []
			    		 fi
		       		    then () = if #actual > 1 {already got vertices}
					      then LF[#actual-1] :=
						      (LF[#actual-1] next LF[#actual-1]:=[])
			   	 	      		# actual
					      fi
				     in ()
	     	     		   od
	      	            od
			    in if(facet_verbose) then prints("after FPP dim ",dim,
			    " facet counts are ",for j:dim+1 do #LF[j] od) fi
		od
    in LF
)

{takes local data to height level, dimension \le b-1, and adds facets from
b to (t-1)-dimensional FPP-facets. If input is _missing_ some facet dims up to b,
this can lead to running over the same FPP facets several times, and so to repetitions
in the output. hashes avoid that.}
set localFD_KHashbt \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, int t, KTypePol_hash ktp_hash) = [[FacetVertsKHash]]:
(   if facet_verbose
    then prints(new_line, "start localFD_Khashbt")
    fi;
    {let Llookup = Lvd.lookup}
    let G = x.real_form, b = #LFKH
    then (Affd,M,j0) = cofolded(G)
    then LFKHnew = [[FacetVertsKHash]]: LFKH##(for dim:t-b from b do
    	 [FacetVertsKHash]: [] od)
    then hashes = for d:#LFKHnew do make_vec_hash(for v in LFKHnew[d] do v[:d+1] od, hash_code@(vec,int)) od
    {use the hashes to avoid repetitions in the facet lists}
    then () = for dim:t-b from b
    	      do let facets = [FacetVerts]: facets_fundamental(Affd,dim)
    	      	 then () =
		  for FV@k in facets
       	      	  do if (facet_verbose and k=0) or fund_facet_verbose
       	       	     then prints("start fund facet ",k," of ", #facets,
	       	       	      	   " in dim ", dim,
		       		   " in localFD_Khashbt; ktp_hash.size() = ",
		       		   ktp_hash.size())
	       	     fi;
	       	     let bary_F=FacetBary: sum(Affd.rank,FV)/(dim+1)
	       	     then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	       	     then aff_list = [AffineCoWeylElt]:
	       	    	 for (w,taus) in aff_short_list
	       	         do for tau in taus
			    do (tau,w)
			    od
	       	    	 od.##
	       	      in for wtilde in aff_list
	       	    	 do let (tau,w) = wtilde
		       	{global is called v earlier}
		       	    then global = for v in wtilde*FV
		       	    	     	  do (vd.lookup)(M*v)
				          od.sort
		       	{local is called vtheta earlier}
		       	    then local = for ell in global do Perm[ell] od
			{if -1 appears in local, subset fails}
		       	{actual is called vAct earlier}
		       	    then actual = vec:
				if local.>= and is_subset(local,global) and 
			       		     none(for i in global do mapAct[i] < 0 od)
			    	then for i in global
			    	     do mapAct[i]
				     od.no_reps{sort}
			    	else []
			        fi
		       	     then () =
			        if #actual > 1 {already got vertices}
		       	       	then let s = hashes[#actual-1].size()
				     then i = hashes[#actual -1].match(actual)
				     then () =
				         if i=s
				         then let bary = M*(wtilde*bary_F)
					      then P = finalize(parameter(x,lambda, bary))
					      then ps = monomials(P)
     					      then Q= K_type_pol(character_formula(P))
					      then ()=actual:= actual##[ktp_hash.match(Q)]
	     	       	    	      	      in LFKHnew[#actual-2] :=
			    	 		  (LFKHnew[#actual-2] next LFKHnew[#actual-2]:=[])
			   	 	      	   # actual
					  fi
				     in ()
			     	   fi
		       		in ()
	     	     	  od
	      	      od
		   in ()
		od
    then dAct = last(for j:#LFKHnew do #LFKHnew[j] > 0 od)
    in LFKHnew[:dAct+1]
)

{takes local data to height level, dimension \le b-1, and adds facets from
b to (t-1)-dimensional FPP-facets; make sure subfacets are also in list
Roughly input goes from 0 to b-1 (size b), output 0 to t-1 (size t).}
set localFD_KHashbt_lookDown \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, int b, int t, KTypePol_hash ktp_hash) = [[FacetVertsKHash]]:
(   if facet_verbose
    then prints(new_line,"start localFD_Khashbt_lookDown")
    fi;
    let G = x.real_form
    then (Affd,M,j0) = cofolded(G)
    then LFKHnew = [[FacetVertsKHash]]: LFKH##(for dim:t-#LFKH from #LFKH do
    	 [FacetVertsKHash]: [] od)
    { then () = prints("in lookDown, #LFKHnew = ",#LFKHnew) }
    then () = for dim:t-b from b
    	      do let facets = [FacetVerts]: facets_fundamental(Affd,dim)
	      	 { then () = prints("dim = ",dim,", facets = ",facets) }
	      	 then lookups = lookups(LFKHnew)
    	      	 then () = for FV@k in facets
       	      	      	   do if (facet_verbose and k=0) or fund_facet_verbose
       	       	       	      then prints("start fund facet ",k," of ", #facets,
	       	       	      	   " in dim ", dim,
		       		   " in localFD_Khashbt; ktp_hash.size() = ",
		       		   ktp_hash.size())
	       	 	      fi;
	       	 	      let bary_F=FacetBary: sum(Affd.rank,FV)/(dim+1)
	       	 	      then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	       	 	      then aff_list = [AffineCoWeylElt]:
	       	    	      	   for (w,taus) in aff_short_list
	       	    		   do for tau in taus do (tau,w) od
	       	    		   od.##
	       	 	      in for wtilde in aff_list
	       	    	      	 do let (tau,w) = wtilde
				    then iw = inverse(w)
		       		    {global is called v earlier}
		       		    then global = for v in wtilde*FV
		       	    	     	 	  do (vd.lookup)(M*v)
				     		  od.sort
		       		    {local is called vtheta earlier}
		       		    then local = for ell in global do Perm[ell] od
				    {if -1 appears in local, subset fails}
		       		    {actual is called vAct earlier}
		       		    then actual = vec:
		       	    	    	 if local.>= and
					    is_subset(local,global) and
			       		    none(for i in global do mapAct[i] < 0 od)
			    		 then for i in global
			    	 	      do mapAct[i]
				 	      od.no_reps{sort}
			    		 else []
			    		 fi
				    { then () = prints("actual = ",actual) }
				    then d=#actual-1 {dimension; number of verts is d+1}
				    then () = if d>0 {already got vertices}
				    	         and all(for e:d+1
						     do lookups[d-1](delete(actual,e)) >= 0 od)
						 {now we know that the subfacets are cand facets}
					      then let bary = M*(wtilde*bary_F)
					      	   then P = finalize(parameter(x,lambda, bary))
					      	   then Q = K_type_pol(character_formula(P))
	     	       	    	      	   	   then () = actual := actual##[ktp_hash.match(Q)]
						   in LFKHnew[#actual-2] :=
			    	 		     (LFKHnew[#actual-2] next LFKHnew[#actual-2]:=[])
			   	 	      	     # actual
						fi
				     in ()
	     	     		od
	      	            od
			    in ()
		od
    then dAct = last(for j:#LFKHnew do #LFKHnew[j] > 0 od)
    { then () = prints("LFKHnew = ",LFKHnew) }
    in LFKHnew[:dAct+1]
)

{takes list of 0- and d-diml facets, with d \ge 1, and builds all
d+1-diml facets having all faces in the d-diml list. The int e is the
number of extra coords in each facet.}
set superFacets([vec] L0, [vec] Ld, int e) =
    [vec]:
if #Ld = 0 then []
else
let d = #Ld[0] - e-1 
then lookupsd = index_in(for v in Ld do v[:d+1] od)
in [vec]:
   for v in L0
   do let m0 = v[0] {first vertex in new facet}
      in [vec]:
      	 for small in Ld
      	 do if small[0] <= m0
	    then [] {require m0 to be FIRST}
	    elif any(for k:d+1 do lookupsd( m0#(small[:k]##small[k+1:d+1])) = -1 od)
	    then [] {require all d-faces to be in Ld}
	    else [m0#small[:d+1]] {now m0##small is a candidate facet}
	    fi
	 od.## {now have a list of candidates starting m0}
   od.##
fi

{takes local data to height level, dimension \le b-1, and adds facets from
b to (t-1)-dimensional FPP-facets; make sure subfacets are also in list
Roughly input goes from 0 to b-1 (size b), output 0 to t-1 (size t).

Need to assume b \ge 2, so have a list of potentially unitary facets and edges.}
set localFD_KHashbt_lookDownGEO \
  ( KGBElt x, ratvec lambda, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, int b, int t, KTypePol_hash ktp_hash) = [[FacetVertsKHash]]:
(   if facet_verbose
    then prints(new_line,"start localFD_Khashbt_lookDownGEO, b = ",b,", t = ",t)
    fi;
    let G = x.real_form
    then () = for dim:t-#LFKH from #LFKH {b has to be at least 2}
    	      do LFKH := LFKH# (let acts = superFacets(LFKH[0],LFKH[dim-1],1)
	      	    	       	in for actual in acts
	       	    	      	   do let bary =
				      sum(G.rank, for j in actual do Lvd.list[j] od)/(dim+1)
		       	      	      then P = parameter(x,lambda, bary).finalize
				      in if all(for p in monomials(P) do is_pos_on_LKTs(p) od)
				      	 then [actual#ktp_hash.match(
				              K_type_pol(character_formula(P)))]
		       		    	 else []
				    	 fi
		    	      	   od.## {[FacetVertsKHash]})
	 od
    in if(facet_verbose) then prints("After localFD_KHashbt_lookDownGEO, facet counts are ",
       			      for list in LFKH do #list od) fi;
       LFKH
)

{takes local facets of dimension \le b-1, and adds facets from
b to (t-1)-dimensional FPP-facets; make sure subfacets are also in list
Roughly input goes from 0 to b-1 (size b), output 0 to t-1 (size t).

Need to assume b \ge 2, so have known vertices and edges.}
set localFbt_lookDown_GEO \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsIndex]] LF, int b, int t) = [[FacetVertsIndex]]:
(   if facet_verbose
    then prints(new_line,"start localFDbt_lookDown_GEO")
    fi;
    let G = x.real_form
    then () = for dim:t-#LF from #LF {b has to be at least 2}
    	      do LF := LF# superFacets(LF[0],LF[dim-1],0)
	      od
    in if(facet_verbose) then prints("After localFbt_lookDownGEO, facet counts are ",
       			      for list in LF do #list od) fi;
       LF
)

{takes local data to height level, dimension \le b-1, and adds facets from
b to (t-1)-dimensional FPP-facets; make sure subfacets are also in list}
set localFD_KHashbt_lookDown \
  ( KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd, vec Perm, vec mapAct,
    [[FacetVertsKHash]] LFKH, int t, KTypePol_hash ktp_hash) = [[FacetVertsKHash]]:
(   if facet_verbose
    then prints(new_line,"start localFD_Khashbt_lookDown")
    fi;
    let G = x.real_form, b = #LFKH
    then (Affd,M,j0) = cofolded(G)
    then LFKHnew = [[FacetVertsKHash]]: LFKH##(for dim:t-b from b do
    	 [FacetVertsKHash]: [] od)
    then hashes = for d:#LFKHnew do make_vec_hash(for v in LFKHnew[d] do v[:d+1] od, hash_code@(vec,int)) od
    {use the hashes to avoid repetitions in the facet lists}
    then () = for dim:t-b from b
    	      do
	 let facets = [FacetVerts]: facets_fundamental(Affd,dim)
	 then lookups = lookups(LFKHnew)
    	 then () = for FV@k in facets
       	      	   do if (facet_verbose and k=0) or fund_facet_verbose
       	       	then prints("start fund facet ",k," of ", #facets,
	       	       	    " in dim ", dim,
		       	    " in localFD_KHashbt_lookDown; ktp_hash.size() = ",
		       	    ktp_hash.size())
	       	       fi;
	       	let bary_F=FacetBary: sum(Affd.rank,FV)/(dim+1)
	       	then aff_short_list = FPP_w_shifts(Affd,bary_F,j0)
	        then aff_list = [AffineCoWeylElt]:
	       	     for (w,taus) in aff_short_list
	       	     do for tau in taus do (tau,w) od
	       	     od.##
	       	in for wtilde in aff_list
	       	   do let (tau,w) = wtilde
		      then iw = inverse(w)
			{global is called v earlier}
		      then global = for v in wtilde*FV
		       	    	    do (vd.lookup)(M*v)
				    od.sort
		        {local is called vtheta earlier}
		      then local = for ell in global do Perm[ell] od
			{if -1 appears in local, subset fails}
		        {actual is called vAct earlier}
		      then actual = vec:
		       	 if local.>= and is_subset(local,global) and
			    none(for i in global do mapAct[i] < 0 od)
			 then for i in global
			      do mapAct[i]
			      od.no_reps{sort}
			 else []
			 fi
		      then d=#actual-1
		      then () = if d  > 0{already got vertices} and all(
		      	   for e:d+1 do lookups[d-1](delete(actual,e)) >= 0 od)
				{now we know that the subfacets are cand facets}
				then let s = hashes[#actual-1].size()
				     then i = hashes[#actual -1].match(actual)
				     then () =
				        if i=s
					then
					  let bary = M*(wtilde*bary_F)
					  then P = parameter(x,lambda, bary).finalize
				      	  in if all(for p in monomials(P) do is_pos_on_LKTs(p) od)
					     then let Q= K_type_pol(character_formula(P))
				      	 	  then ()=actual :=
						    actual#ktp_hash.match(Q)
						  in LFKHnew[#actual-2] :=
			    	 		     (LFKHnew[#actual-2] next
						     LFKHnew[#actual-2]:=[])# actual
				    	      fi {pos_on_LKTs}
				   fi {d > 0}
			in ()
			fi
		     in ()
	     	  od
	      	od
	      in ()
	od
    then dAct = last(for j:#LFKHnew do #LFKHnew[j] > 0 od)
    in LFKHnew[:dAct+1]
)

{computes directed graph of local facets. Output GraphData is
[[int]],[[int]] giving equivalence classes and the graph. Next output
[vec]s are IUCL and classListByFacet}
{NEED TO INCLUDE x and lambda and check #LKTs matches on reverse links}
set localGraphK([[FacetVertsKHash]] LFvertsK) = (GraphData, [vec],[vec]):
    let () = if facet_verbose then prints("start to compute facet graph K")
    	     fi
    then (eq,gr) = GraphData: up_data(LFvertsK)
    then classListByFacet = [vec]: class_lists(LFvertsK,(eq,gr))
    	 , IUCL = full_down_classes(eq,gr) {[vec]:[[]]}
	 in ((eq,gr), IUCL, classListByFacet)

{NEED TO INCLUDE x and lambda and check #LKTs matches on reverse links}
set localGraphK([[FacetVertsKHash]] FDKH, KTypePol_hash pol_hash, int level) =
    (GraphData, [vec],[vec]):
    let () = if facet_verbose then prints(new_line,"start to compute facet graph K to level ",level)
    	     fi
    then (eq,gr) = GraphData: up_data(FDKH,pol_hash,level)
    then classListByFacet = [vec]: class_lists(FDKH,(eq,gr))
    	 , IUCL = full_down_classes(eq,gr)
	 in ((eq,gr), IUCL, classListByFacet)

set show_short([string] statuses) = void:
    let countT = int:0, countF = int:0, countQ = int:0
    then () = for st in statuses do
    	if st[0]="T"
	then countT+:=1
	elif st[0]="F"
	then countF+:=1
	elif st[0]="?"
	then countQ+:=1
    	fi
	od
    in if countQ > 0
       then prints(#statuses," equiv classes of facets: ",countT,
	" unitary, ",countF," nonunitary, ",countQ,
	" still undetermined.")
       else prints(#statuses," equiv classes of facets: ",countT,
	" unitary, ",countF," nonunitary.")
	fi

set show_short([string] statuses,[Param] params) = show_short(statuses)

set show_very_short([string] statuses) = void:
    let countT = int:0, countF = int:0, countQ = int:0
    then () = for st in statuses do
    	if st[0]="T"
	then countT+:=1
	elif st[0]="F"
	then countF+:=1
	elif st[0]="?"
	then countQ+:=1
    	fi
	od
    in if countQ > 0
       then prints(countT,
	" unitary, ",countF," nonunitary, ",countQ,
	" still undetermined.")
	else prints(countT,
	" unitary, ",countF," nonunitary.")
	fi

{meant to display the collection of nonunitarity certificate K-types}
{KGBElt should be chosen to make K-highest weights look good; for example,
 KGB(G,(2^n) - 1) in Sp(2n,R).}
set show(KTypePol_hash cert_hash, KGBElt x) = void:
    let size = cert_hash.size()
    then muss = for j:size do monomials(cert_hash.index(j)) od
    in prints("Number of certificate K-types = ",sum(for mus in muss
       		      do #mus od));
       for j:size
       do prints(new_line, "certificates of height ",height(muss[j][0]));
       	  for mu in muss[j] do prints(j," dim = ",dimension(mu),
	  ",  hwt = ",highest_weights(mu,x)[0]) od
       od

set show(KTypePol_hash cert_hash) = void:
    if cert_hash.size() = 0
    then prints("Number of certificate K-types = 0")
    else show(cert_hash,KGB(cert_hash.index(0).real_form,0))
    fi

set look_up_vertices ([ratvec] vertices, [int] facet)=[ratvec]:
   for n in facet do vertices[n] od

set remove_closure ([vec] short,[vec] long) =[vec]:
  ##for v in short
    do if any(for w in long do sorted_is_subset(v,w) od)
       then [] else [v]
       fi
    od

set remove_closure ([[vec]] all, int k) =[[vec]]:
   for level@i in all do if i<k
	       then remove_closure (level,all[k])
	       else level
	       fi od

{. The next family of functions all need simple derived group. Always |D.list|
should be ALL vertices in the FPP. The facet lists carried by [[FacetBary]] or
[[FacetVertsIndex]] may be pruned of reps not interesting for unitarity, but the
indices will always refer to a constant vlist.}

{ Output is a revision of the class status list statuses, and the list of unitary facet reps }
{ try to compute and systematically use partial order on facets}
set local_test(KGBElt x, ratvec lambda, VertexData Lvd,
    [[LocalFacetVertsHash]] LFVH, [[int]] eq, [[int]] gr,
    [vec] classListByFacet, [string] statuses,
    (Param->bool) tester) = ([string],[Param]):
    let NumClasses = #eq, printInterval = int: 1
    { then listZero = [ratvec]: if #LFVH = 0
    	 	    	      then []
    			      else for w in LFVH[0] do Lvd.list[w[0]] od
			      fi
    then vdZero = to_vertex_data(listZero) }
    then () = if facet_verbose
    	      then prints("start local_test, ",NumClasses,
	      " equiv classes of facets")
	      ; show_short(statuses)
	      ; prints()
	      fi
	      ; for m:NumClasses
    	      ~do
	      if facet_verbose and
	      	 ((NumClasses-m-1)%printInterval = 0)
	      then prints("examining equivalence class #"
	      ,NumClasses-m -1, "; so far ",unitary_test_counter.use_count()
	      ," 'is_unitary' tests.")
	      ; show_very_short(statuses)
	      ; printInterval := (3*printInterval)\2 + 1
	      fi
	      ; if statuses[m] = "?"
	      	then let C=eq[m]
	      	  then (d,j) = coords(LFVH,C[0])
	      	  then verts = vec: LFVH[d][j][:d+1]
	      	  then ps = monomials(finalize(parameter(x, lambda, facet_bary(Lvd.list, verts))))
	      	  in if{NEWU} all(for p in ps do tester(p) od)
		   then statuses[m]:= "Ttest"##to_string(m)
		   else statuses:=
			   updateNUclassesB(statuses, gr, m)
		   ; statuses[m] := "Ftest"##to_string(m)
		   {; show_very_short(statuses)}
		   fi{NEWU}
	         fi
	      od
     then() = if(test_verbose)
     	      then prints(new_line,"total tests = ",unitary_test_counter.use_count());
	      prints("number of tester-unitary facets = ",sum(for m:NumClasses
     	       		      	 	 	  	do if statuses[m][0]="T"
							   then [#eq[m]]
							   else []
							   fi
							od.##))
       	      fi
      then unitary_by_dim = vec: null(#LFVH)
      then () = for C@m in eq
      	      	do if statuses[m][0] = "T"
      	      	   then for x in C
		   	do let (d,j) = coords(LFVH,x)
			   { then () = if d=1 then prints("unitary entry ",LFVH[d][j],
			   ", nu = ",facet_bary(Lvd.list, LFVH[d][j][:d+1])) fi }
			   in unitary_by_dim[d]+:=1
			od
		   fi
		 od
       then () = if test_verbose then prints("unitary facets by dim = ", unitary_by_dim) fi
       then UParams = [Param]:
       	    for m:NumClasses
	    do if statuses[m][0] = "T"
	       then for i in eq[m]
	       	    do let (d,j) = coords(LFVH,i)
		       in parameter(x,lambda,
		       	  facet_bary(Lvd.list,LFVH[d][j][:d+1]))
		    od {list of unitary Params}
	      else []
	      fi
	    od.##
      in  (statuses,UParams)

{ Output is a revision of the class status list statuses, and the list of
  unitary facet reps. }
{ use and update a complete list of known unitary facets }
{ try to compute and systematically use partial order on facets}
set local_test_hash(KGBElt x, ratvec lambda, VertexData Lvd,
    [[LocalFacetVertsHash]] LFVH, [[int]] eq, [[int]] gr,
    [vec] classListByFacet, [string] statuses, Param_hash Uhash,
    (Param->bool) tester) = ([string],[Param]):
    let NumClasses = #eq, printInterval = int: 1
    { then listZero = [ratvec]: if #LFVH = 0
    	 	    	      then []
    			      else for w in LFVH[0] do Lvd.list[w[0]] od
			      fi
    then vdZero = to_vertex_data(listZero) }
    then () = if facet_verbose
    	      then prints("start local_test, ",NumClasses,
	      " equiv classes of facets")
	      ; show_short(statuses)
	      ; prints()
	      fi
	      ; for m:NumClasses
    	      ~do
	      if facet_verbose and
	      	 ((NumClasses-m-1)%printInterval = 0)
	      then prints("examining equivalence class #"
	      ,NumClasses-m -1, "; so far ",unitary_test_counter.use_count()
	      ," 'is_unitary' tests.")
	      ; show_very_short(statuses)
	      ; printInterval := (3*printInterval)\2 + 1
	      fi
	      ; if statuses[m] = "?"
	      	then let C=eq[m]
	      	  then (d,j) = coords(LFVH,C[0])
	      	  then verts = vec: LFVH[d][j][:d+1]
		  {first_param makes trouble in UParams list!}
	      	  then ps = monomials(finalize(parameter(x, lambda
		    	  , facet_bary(Lvd.list, verts))))
	      	in if{NEWU} all(for p in ps do tester(p) od)
		   then statuses[m]:= "Ttest"##to_string(m)
		   else statuses:=
			   updateNUclassesB(statuses, gr, m)
		   ; statuses[m] := "Ftest"##to_string(m)
		   {; show_very_short(statuses)}
		   fi{NEWU}
	         fi
	      od
     then() = if(test_verbose)
     	      then prints(new_line,"total tests = ",unitary_test_counter.use_count());
	      prints("number of tester-unitary facets = ",sum(for m:NumClasses
     	       		      	 	 	  	do if statuses[m][0]="T"
							   then [#eq[m]]
							   else []
							   fi
							od.##))
       	      fi
      then unitary_by_dim = vec: null(#LFVH)
      then () = for C@m in eq
      	      	do if statuses[m][0] = "T"
      	      	   then for x in C
		   	do let (d,j) = coords(LFVH,x)
			   { then () = if d=1 then prints("unitary entry ",LFVH[d][j],
			   ", nu = ",facet_bary(Lvd.list, LFVH[d][j][:d+1])) fi }
			   in unitary_by_dim[d]+:=1
			od
		   fi
		 od
       then () = if test_verbose then prints("unitary facets by dim = ", unitary_by_dim) fi
       then UParams = [Param]: {THESE NEED NOT BE FINAL!}
       	    for m:NumClasses
	    do if statuses[m][0] = "T"
	       then for i in eq[m]
	       	    do let (d,j) = coords(LFVH,i)
		       in parameter(x,lambda,
		       	  facet_bary(Lvd.list,LFVH[d][j][:d+1]))
		    od {list of unitary Params}
	      else []
	      fi
	    od.##
      then () = if deform_flag
      	      	then for p in UParams
      	      	     do for p1 in monomials(finalize(p))
			do Uhash.match(herm_center(p1));
			   for q in face_deformed_unitaries_new(p1)
		   	   do Uhash.match(q)
		   	   od
			od
		      od
		 fi
      in  (statuses,UParams)

{ Output is the list of unitary facet reps. }
{ use and update a complete list of known unitary facets }
{ try to compute and systematically use partial order on facets
  Uhashes should be indexed by KGBElt.}
set local_test_hashes(KGBElt x, ratvec lambda, VertexData Lvd,
    [[LocalFacetVertsHash]] LFVH, [[int]] eq, [[int]] gr,
    [vec] classListByFacet, [string] statuses, [Param_hash] Uhashes,
    (Param->bool) tester) = ([string],[Param]):
    let NumClasses = #eq, printInterval = int: 1
    { then listZero = [ratvec]: if #LFVH = 0
    	 	    	      then []
    			      else for w in LFVH[0] do Lvd.list[w[0]] od
			      fi
    then vdZero = to_vertex_data(listZero) }
    then () = if facet_verbose
    	      then prints("start local_test, ",NumClasses,
	      " equiv classes of facets")
	      ; show_short(statuses)
	      ; prints()
	      fi
	      ; for m:NumClasses
    	      ~do
	      if facet_verbose and
	      	 ((NumClasses-m-1)%printInterval = 0)
	      then prints("examining equivalence class #"
	      ,NumClasses-m -1, "; so far ",unitary_test_counter.use_count()
	      ," 'is_unitary' tests.")
	      ; show_very_short(statuses)
	      ; printInterval := (3*printInterval)\2 + 1
	      fi
	      ; if statuses[m] = "?"
	      	then let C=eq[m]
	      	  then (d,j) = coords(LFVH,C[0])
	      	  then verts = vec: LFVH[d][j][:d+1]
		  {first_param makes trouble in UParams list!}
	      	  then ps = monomials(finalize(parameter(x, lambda
		    	  , facet_bary(Lvd.list, verts))))
	      	in if{NEWU} all(for p in ps do tester(p) od)
		   then statuses[m]:= "Ttest"##to_string(m)
		   else statuses:=
			   updateNUclassesB(statuses, gr, m)
		   ; statuses[m] := "Ftest"##to_string(m)
		   {; show_very_short(statuses)}
		   fi{NEWU}
	         fi
	      od
     then() = if(test_verbose)
     	      then prints(new_line,"total tests = ",unitary_test_counter.use_count());
	      prints("number of tester-unitary facets = ",sum(for m:NumClasses
     	       		      	 	 	  	do if statuses[m][0]="T"
							   then [#eq[m]]
							   else []
							   fi
							od.##))
       	      fi
      then unitary_by_dim = vec: null(#LFVH)
      then () = for C@m in eq
      	      	do if statuses[m][0] = "T"
      	      	   then for x in C
		   	do let (d,j) = coords(LFVH,x)
			   { then () = if d=1 then prints("unitary entry ",LFVH[d][j],
			   ", nu = ",facet_bary(Lvd.list, LFVH[d][j][:d+1])) fi }
			   in unitary_by_dim[d]+:=1
			od
		   fi
		 od
       then () = if test_verbose then prints("unitary facets by dim = ",
       	       	    		      		      unitary_by_dim)
		 fi
       then UParams = [Param]: {THESE NEED NOT BE FINAL!}
       	    for m:NumClasses
	    do if statuses[m][0] = "T"
	       then for i in eq[m]
	       	    do let (d,j) = coords(LFVH,i)
		       in parameter(x,lambda,
		       	  facet_bary(Lvd.list,LFVH[d][j][:d+1]))
		    od {list of unitary Params}
	      else []
	      fi
	    od.##
       then () = if deform_flag
       	       	 then for p in UParams
      	    	      do for p1 in monomials(finalize(p))
	       	      	 do let (,j) = %p1.x in Uhashes[j].match(herm_center(p1));
		   	    for q in face_deformed_unitaries_new(p1)
		   	    do let (,j) = %q.x in Uhashes[j].match(q)
		   	    od
			 od
		      od
		 fi
      in  (statuses,UParams)




{ Input is candidate facets, and graph info. Output is the tester-unitary ones. 
 use and update a complete list Uhashes of known unitary facets. 
 try to compute and systematically use partial order on facets
  Uhashes should be indexed by KGBElt.}
set local_test_hashes(KGBElt x, ratvec lambda, VertexData Lvd,
    [[LocalFacetVertsHash]] LFVH, [[int]] eq, [[int]] gr,
    [vec] classListByFacet, [Param_hash] Uhashes, (Param->bool) tester) = [Param]:
    let NumClasses = #eq, printInterval = int: 1
    { then listZero = [ratvec]: if #LFVH = 0
    	 	    	      then []
    			      else for w in LFVH[0] do Lvd.list[w[0]] od
			      fi
    then vdZero = to_vertex_data(listZero) }
    then () = if facet_verbose
    	      then prints("start local_test, ",NumClasses,
	      " equiv classes of facets")
	      fi
    then unitary_by_dim = vec: null(#LFVH)
    then UParams = [Param]:
    	 for m:NumClasses
    	~do if facet_verbose and
	      	 ((NumClasses-m-1)%printInterval = 0)
	    then prints("examining equivalence class #"
	      ,NumClasses-m -1, "; so far ",unitary_test_counter.use_count()
	      ," 'is_unitary' tests.")
	      ; printInterval := (3*printInterval)\2 + 1
	    fi
	    ;   let C=eq[m]
	      	then (d,j) = coords(LFVH,C[0])
	      	then verts = vec: LFVH[d][j][:d+1]
		  {first_param makes trouble in UParams list!}
	      	  then ps = monomials(finalize(parameter(x, lambda
		    	  , facet_bary(Lvd.list, verts))))
	      	in if{NEWU} all(for p in ps
		   	    	do let (,j1) = %p.x
			           in Uhashes[j1].lookup(p).>= or
				      tester(p) od)
		   then for i in C 
		   	do let (d,j) = coords(LFVH,i)
			   then () = unitary_by_dim[d]+:=1
		       	   in parameter(x,lambda, facet_bary(Lvd.list,LFVH[d][j][:d+1]))
		    	od {list of tester unitary Params}
		   else []
		   fi{NEWU}
	  od.##
    then () = if test_verbose then prints("tester unitary facets by dim = ",
       	       	    		      		      unitary_by_dim)
	      fi
    in  UParams

{ Input is candidate facets, and graph info. Output is the unitary ones.}
set local_test_hashes(KGBElt x, ratvec lambda, VertexData Lvd,
    [[LocalFacetVertsHash]] LFVH, [[int]] eq, [[int]] gr,
    [vec] classListByFacet, [Param_hash] Uhashes) = [Param]:
let UParams = local_test_hashes(x, lambda, Lvd, LFVH, eq, gr,
    classListByFacet, Uhashes, is_unitary@Param)
then () = if deform_flag
       	      then for p in UParams
      	    	   do for p1 in monomials(finalize(p))
	       	      do let (,j) = %p1.x in Uhashes[j].match(herm_center(p1));
		      	 for q in face_deformed_unitaries_new(p1)
		      	 do let (,j) = %q.x in Uhashes[j].match(q)
		     	 od
		      od
		   od
	      fi
then () = if test_verbose then { prints("unitary to ht ",ht, " facets by dim = ",
       	       	   		      		      unitary_by_dim);}
	     prints("number of tests = ",unitary_test_counter.use_count())
	  fi

 in  UParams

{meant to test candidate classes to (new) height |level|; delete from FVKH
 the facets established to be nonunitary in this way. Output is new shorter
 list of candidate facets}
set local_testK_level(KGBElt x, ratvec lambda, VertexData vd, [[FacetVertsKHash]] FVKH,
    [[int]] eq, [[int]] gr, [vec] classListByFacet, [string] statuses, int level) =
    [[FacetVertsKHash]]:
    let newStatuses = statuses, NumClasses = #eq
    	, printInterval = int: 1
    then tester = (Param->bool): (Param p) bool:
    	  if level.>= then is_unitary_to_ht(p, level)
	  else is_unitary(p)
	  fi
    then () = if facet_verbose
    	      then prints(); prints("start local_testK_level, "
	      	   ,NumClasses,
		   " equiv classes of facets; test to level ",level)
	      ; show_short(newStatuses)
	      ; prints()
	      fi
	      ; for m:NumClasses
    	      ~do
	      if facet_verbose and
	      	 ((NumClasses-m-1)%printInterval = 0)
	      then prints("examining equivalence class #"
	      ,NumClasses-m -1, "; so far ",unitary_test_counter.use_count()
	      ," 'is_unitary' tests.")
	      ; show_very_short(newStatuses)
	      ; printInterval := 2*printInterval
	      fi
	      ; if newStatuses[m] = "?"
	      	then let C=eq[m]
		  {then ()=prints("C = ",C)}
	      	  then (d,j) = coords(FVKH,C[0])
	      	  then verts = vec: FVKH[d][j][:d+1]
		  {then () = prints("(d,j) = (",d,",",j,"), verts = ",verts,
		       	  " FB = ",facet_bary(Lvd.list,verts))}
	      	  then ps = monomials(finalize(parameter(x, lambda
		    	  , facet_bary(vd.list, verts))))
	      	in if{NEWU} all(for p in ps do tester(p) od)
		   then newStatuses[m]:= "T"
		   else newStatuses:=
			   updateNUclassesB(newStatuses, gr, m)
		   ; newStatuses[m] := "F"
		   fi{NEWU}
	         fi
	      od
     then() = if(test_verbose)
     	      then prints(new_line,"total tests = ",unitary_test_counter.use_count(),
	      " to level ",level,"; about to create new facet list")
	      ; show_very_short(newStatuses)
       	      fi
     {make new local facet list using only facets not already proven nonunitary}
     then FVKHnew = for @m in FVKH do [FacetVertsKHash]: [] od
          then () = for C@m in eq do if newStatuses[m][0] = "T"
     	     	     	      	then for k in C
			      	   do let (d,j) = coords(FVKH,k)
				      in FVKHnew[d] :=
				      (FVKHnew[d] next FVKHnew[d]:=[])
				      #FVKH[d][j]
				   od
			         fi
			      od
     {then () = if test_verbose then prints("facet counts to dim ",#FVKHnew - 1, " = ",
     	       	  for list in FVKHnew do #list od) fi}
     in  FVKHnew

{meant to test candidate classes to (new) height |level|; delete from LFVKH
 the facets established to be nonunitary in this way. Output is new shorter
 list of candidate facets}
set local_testK_hash(KGBElt x, ratvec lambda, VertexData vd, [[FacetVertsKHash]] FVKH,
    [[int]] eq, [[int]] gr, [vec] classListByFacet, [string] statuses,
    (Param -> bool) tester, [Param_hash] Uhashes) = [[FacetVertsKHash]]:
    let newStatuses = statuses, NumClasses = #eq
    	, printInterval = int: 1
    then QclassNums = for k:#eq do if statuses[k] = "?" then [k] else [] fi od.##
    then () = if facet_verbose
    then prints(); prints("start local_testK_hash, ",#QclassNums,
		   " undetermined equiv classes of facets to dim ",#FVKH-1)
	      ; show_short(newStatuses)
	      ; prints()
	      fi
	      ; for k@m in QclassNums
    	      ~do
	      if facet_verbose and
	      	 ((#QclassNums-m-1)%printInterval = 0)
	      then prints("examining undet equiv class #"
	      ,#QclassNums-m -1, "; so far ",unitary_test_counter.use_count()
	      ," 'is_unitary' tests.")
	      {; show_very_short(newStatuses)}
	      ; printInterval := 2*printInterval
	      fi
	      ; if newStatuses[k] = "?"
	      	then let C=eq[k]
		  {then ()=prints("C = ",C)}
	      	  then (d,j) = coords(FVKH,C[0])
	      	  then verts = vec: FVKH[d][j][:d+1]
		  {then () = prints("(d,j) = (",d,",",j,"), verts = ",verts,
		       	  " FB = ",facet_bary(Lvd.list,verts))}
	      	  then ps = monomials(finalize(parameter(x, lambda
		    	  , facet_bary(vd.list, verts))))
	          in if{NEWU} all(for p in ps do let (,j1) = %p.x
					       in Uhashes[j1].lookup(p).>= or
					       tester(p) od)
		     then newStatuses[k]:= "T"
		     	  {downdateUclasses(newStatuses, gr, k)} {NEED IUCL}
		     else newStatuses:=
			   updateNUclassesB(newStatuses, gr, k)
		     ; newStatuses[k] := "F"
		     fi{NEWU}
	         fi
	      od
     then() = if(test_verbose)
     	      then prints(new_line,"total tests = ",unitary_test_counter.use_count(),
	      " to dim = ",#FVKH-1{,"; about to create new facet list"})
	      {; show_very_short(newStatuses)}
       	      fi
     {make new local facet list using only facets not already proven nonunitary}
     then FVKHnew = for @m in FVKH do [FacetVertsKHash]: [] od
          then () = for C@m in eq do if newStatuses[m][0] = "T"
     	     	     	      	then for k in C
			      	   do let (d,j) = coords(FVKH,k)
				      in FVKHnew[d] :=
				      (FVKHnew[d] next FVKHnew[d]:=[])
				      #FVKH[d][j]
				   od
			         fi
			      od
     {then () = if test_verbose then prints("facet counts to dim ",#FVKHnew - 1, " = ",
     	       	  for list in FVKHnew do #list od) fi}
     in  FVKHnew

{test candidate classes with (new) tester; delete
 from LFVKH facets established to be nonunitary in this way. Output is new
 shorter list of candidate facets}
set local_testK_hash(KGBElt x, ratvec lambda, VertexData vd, [[FacetVertsKHash]] FVKH,
    [[int]] eq, [[int]] gr, [vec] IUCL, [vec] classListByFacet,
    int level, [Param_hash] Uhashes) = [[FacetVertsKHash]]:
    let newStatuses = for j:#eq do "?" od,  NumClasses = #eq
    	, printInterval = int: 1
    then tester = (Param->bool): (Param p) bool:
	      if level.>= then is_unitary_to_ht(p, level)
	      else is_unitary(p)
	      fi
    then () = if facet_verbose
    then prints(); prints("start local_testK_hash at level ",level, ", ", NumClasses,
		   " equiv classes of facets to dim ",#FVKH-1)
	      ; prints()
	      fi
	      ; for k:NumClasses
    	        ~do if facet_verbose and
	      	   ((NumClasses-k-1)%printInterval = 0)
	      	   then prints("examining undet equiv class #"
	      	   ,NumClasses-k -1, "; so far ",unitary_test_counter.use_count()
	      	   ," 'is_unitary' tests.")
	      	   ; printInterval := 2*printInterval
	      	   fi
	      ; if newStatuses[k] = "?"
	      	then let C=eq[k]
	      	  then (d,j) = coords(FVKH,C[0])
	      	  then verts = vec: FVKH[d][j][:d+1]
	      	  then ps = monomials(finalize(parameter(x, lambda
		    	  , facet_bary(vd.list, verts))))
	          in if{NEWU} all(for p in ps do let (,j1) = %p.x
					       in Uhashes[j1].lookup(p).>= or
					       tester(p) od)
			{ordering of classes guarantees everything below k has already
			 been testes}
		     then {newStatuses:= downdateUclasses(newStatuses, IUCL[k], k)
		     	  ;} newStatuses[k]:= "T"
		     else newStatuses:= updateNUclassesB(newStatuses, gr, k)
		     ; newStatuses[k] := "F"
		     fi{NEWU}
	         fi
	      od
     then() = if(test_verbose)
     	      then prints(new_line,"number of tests = ",unitary_test_counter.use_count(),
	      " to dim = ",#FVKH-1)
       	      fi
     {make new local facet list using only facets not already proven nonunitary}
     then FVKHnew = for @m in FVKH do [FacetVertsKHash]: [] od
          then () = for C@m in eq do if newStatuses[m][0] = "T"
     	     	     	      	then for k in C
			      	   do let (d,j) = coords(FVKH,k)
				      in FVKHnew[d] :=
				      (FVKHnew[d] next FVKHnew[d]:=[])
				      #FVKH[d][j]
				   od
			         fi
			      od
     {then () = if test_verbose then prints("facet counts to dim ",#FVKHnew - 1, " = ",
     	       	  for list in FVKHnew do #list od) fi}
     in  FVKHnew

{assume Uhashes has unipotents listed}
set local_testK_levels_B(KGBElt x, ratvec lambda, [Param_hash] Uhashes) = [Param]:
    let G = x.real_form, first_pass = 2, pol_hash = make_KTypePol_hash()
    then depth= rank(x.involution -1) - first_pass+2
    then hts = next_heights(parameter(x,lambda,0*lambda),depth)
    then () = if(facet_verbose) then prints("hts = ",hts) fi
    then vd = FPP_vertex_data(G)
    then (Lvd, Perm, mapAct) = localFD_Lvd(x,lambda,vd)
    then LFDKH = localFD_KHash000(x,lambda, Lvd, Perm, mapAct, pol_hash)
    {next add dim from 1 to first_pass}
    then () = LFDKH := localFD_KHashbt(x,lambda,vd, Lvd, Perm, mapAct,
	      LFDKH, 1, first_pass, pol_hash)
    then unipotents = local_unipotent_classes(x,lambda,Lvd)
    then D=int:1
    then () =  if test_verbose then prints("facets counts to dim ",first_pass-1, " :",
			  for list in LFDKH do #list od) fi
    then () = while first_pass + D <= rank(x.involution -1) + 2
    {while loop does is_unitary_to_ht on facets to dim first_pass; then adds facets of
    	  one dim higher and does is_unitary_to_ht on those...}
    	      do let ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH,pol_hash,hts[D-1])
       	      	 {compute graph on facets to dim first_pass}
		 then () = LFDKH := local_testK_hash(x, lambda, Lvd, LFDKH, eq, gr,
		      	   IUCL, CLBF, hts[D-1], Uhashes)
                 then () = LFDKH := localFD_KHashbt_lookDown(x,lambda,vd, Lvd,
		      	   Perm, mapAct, LFDKH, first_pass + D-1,
			   first_pass + D, pol_hash)
{then () = if test_verbose then prints("facet counts to dim ",first_pass+D-1,": ",
	     	     	  		for list in LFDKH do #list od) fi}
	        then ()= D:=D+1
   		in ()
     	     od
    {now have facets of all dims, to height hts[?]}
    then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH)
    in local_test_hashes(x, lambda, Lvd, LFDKH, eq, gr, CLBF, Uhashes)

set local_facets_GEO(KGBElt x, ratvec lambda) = [[FacetVertsIndex]]:
    let G = x.real_form
    then (Affd,,) = cofolded(G)
    then (vd, Lvd, Perm, mapAct, LF) = localFD_000(x,lambda)
    then () = LF := localFD_1(x,lambda,vd,Lvd,Perm,mapAct,LF)
    in localFbt_lookDown_GEO(x,lambda, vd, Lvd, Perm, mapAct, LF, 2,
       				        rank(x.involution -1) +2)

set spherical_facets_GEO(RealForm G) = local_facets_GEO(x_open(G), G.rho)

{how often to redo is_unitary_to_ht for dims 0 and 1}
set edge_reps = int: 2

{lowest height to start testing}
set edge_offset = int: 3

{how much to increase ht at each repetition}
set edge_skip = int: 2

{one unitary hash table for each KGBElt}
set local_test_GEO_hashes(KGBElt x, ratvec lambda, VertexData vd, VertexData Lvd,
    vec Perm, vec mapAct, KTypePol_hash pol_hash, [Param_hash] Uhashes) = [Param]:
    let (G,j0) = %x
    then depth= max(rank(x.involution -1) ,2)
    then hts = next_heights(parameter(x,lambda,0*lambda),depth)
    then () = if(facet_verbose) then prints("hts = ",hts) fi
    then vd = FPP_vertex_data(G)
    then (Lvd, Perm, mapAct) = localFD_Lvd(x,lambda,vd)
    {make sure verts are unitary to hts[0]}
    then LFDKH = localFD_KHash001(x,lambda, vd, Lvd, Perm, mapAct,
    	 	      	       	     	 hts[0],pol_hash,Uhashes)
    {next add edges, still unitary_to_ht}
    then () = LFDKH := if #LFDKH[0] < 2
    	      	       then LFDKH#[]
	      	       else localFD_KHash12(x,lambda,Lvd,Perm,
				mapAct,LFDKH,hts[0],pol_hash, Uhashes)
	               fi
    then D = int:1
    then () =  if test_verbose then prints("facets counts to dim 1:",
			  for list in LFDKH do #list od) fi
    then () = while (D <= rank(x.involution-1) - 1  ) and
    	      	    (#LFDKH = D + 1) and
		    (#(LFDKH~[0]) > D+1)
    {can't omit middle because LFDKH is truncated!}
    {step D in while loop adds facets of dim D+1; then does is_unitary_to_ht on
    facets of dim D+1; then adds facets of dim D+2, etc. If there are less than
    D+2 possibly unitary facets of dim D, then none of dim D+1.}
    	      do let () = LFDKH := localFD_KHashbt_lookDownGEO(x,lambda, Lvd,
                       Perm, mapAct, LFDKH, D+1,D+2,pol_hash)
		 then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH,pol_hash,hts[D])
       	      	 {compute graph on facets to dim D+1}
		 then () = LFDKH := local_testK_hash(x,lambda,Lvd,
                      LFDKH, eq, gr, IUCL, CLBF, hts[D], Uhashes)
                 then () = if test_verbose then prints("facet counts to dim ",
		     D+1,": ", for list in LFDKH do #list od) fi
                 then ()= D:=D+1
                 in ()
     	     od
    {now have facets of all dims, to height hts[?]}
    then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH)
    in local_test_hashes(x,lambda,Lvd,LFDKH,eq,gr,CLBF,Uhashes)

{one unitary hash table for each KGBElt}
set local_test_GEO_hashes(KGBElt x, ratvec lambda, [Param_hash] Uhashes) = [Param]:
    let (G,j0) = %x, pol_hash=make_KTypePol_hash()
    then vd = FPP_vertex_data(G)
    then (Lvd, Perm, mapAct) = localFD_Lvd(x,lambda,vd)
    in local_test_GEO_hashes(x, lambda, vd, Lvd, Perm, mapAct, pol_hash, Uhashes)

set local_test_GEO_hashes_no_ht(KGBElt x, ratvec lambda, VertexData vd,
    VertexData Lvd, vec Perm, vec mapAct, KTypePol_hash pol_hash,
    [Param_hash] Uhashes) = [Param]:
    let G = x.real_form
    then ht = next_height(parameter(x,lambda,0*lambda))
    then tester = (Param->bool): (Param p) bool:
    	      { if (cert_flag) then is_unitary_test(p, ht, cert_hash)
    	      else} is_unitary(p) {is_unitary_test(p,hts[1])}
	      {fi}
    then tester1 = (Param->bool): (Param p) bool:
    	 is_unitary_to_ht(p,ht)
    {get all verts}
    then LFDKH = localFD_KHash000(x, lambda, Lvd, Perm, mapAct, pol_hash)
    then () = if test_verbose then prints("facet counts to dim 0: ",[#LFDKH[0]]) fi
    {next add edges}
    then () = LFDKH := if #LFDKH[0] < 2
    	      	       then LFDKH#[]
	      	       else localFD_KHash1(x,lambda,vd,Lvd, Perm, mapAct,LFDKH,
		       	    pol_hash)
	               fi
    {now have all local facets of dims 0 and 1.}
    then () =  if test_verbose then prints("facet counts to dim 1:",
			  for list in LFDKH do #list od) fi
    then () = if rank(x.involution - 1) > 1 {j0 > #KGB(G)\2}
	{compute graph on facets to dim 1, to ht}
    	      then let ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH,pol_hash,ht)
    	      	   then statuses = [string]: for j:#eq do "?" od
		 {remove from LFDKH all facets failing is_unitary_to_ht(h)}
    		   then () = LFDKH := local_testK_hash(x,lambda,Lvd, LFDKH, eq,
		      gr, CLBF, statuses, tester1, Uhashes)
    		   in if test_verbose then prints("unitary to ht ",ht,
		      " counts to dim 1:", for list in LFDKH do #list od) fi
	       fi
    then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH)
    then statuses = [string]: for j:#eq do "?" od
    then () = LFDKH := local_testK_hash(x,lambda,Lvd, LFDKH, eq, gr, CLBF,
    	 statuses,tester,Uhashes)
	{all UNITARY through dim 1; these were already unitary to ht}
    then () = if test_verbose then prints("unitary facet counts to dim 1: ",
		 for list in LFDKH do #list od) fi
    then D = int:1
    then () = while (D <= rank(x.involution-1) - 1  ) and
    	      	    (#LFDKH = D + 1) and
		    (#(LFDKH~[0]) > D+1)
    {can't omit middle because LFDKH is truncated!}
    {step D in while loop adds facets of dim D+1; then does is_unitary on
    facets of dim D+1; then adds facets of dim D+2, etc. If there are less than
    D+2 possibly unitary facets of dim D, then none of dim D+1.}
    	      do let () = LFDKH := localFD_KHashbt_lookDownGEO(x,lambda, Lvd,
                       Perm, mapAct, LFDKH, D+1,D+2,pol_hash)
		    {now top degree in LFDKH is D+1}
		 then () = if test_verbose then prints("found ",#LFDKH[D+1],
		      " facets of dim ",D+1) fi
		 then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH)
       	      	 {compute graph on facets to dim D+1}
		 then lowUs = sum(for d:D+1 do #LFDKH[d] od)
			   { write statuses more simply: all unitary except
			     singleton classes of dim D+1 }
		 then newDplus1 = [vec]: for j@m in CLBF[D+1]
		      {D+1-diml facet #m belongs to class j}
		      do if #eq[j] > 1
		      	 then [LFDKH[D+1][m]]
		         else let verts = vec: LFDKH[D+1][m][:D+2]
			      {should insert Uhashloc.lookup(p).>=
			      Actually this has no effect in SO(4,4)}
			      then ps = monomials(finalize(
					  parameter(x, lambda,
					  facet_bary(Lvd.list, verts))))
					  in if all(for p in ps
					     	    do let (,j1) = %p.x
						       in Uhashes[j1].lookup(p).>= or
						       is_unitary(p){tester(p)}
						    od)
					     then [LFDKH[D+1][m]]
					     else []
					     fi
				      fi
				  od.##
		 then () = LFDKH := LFDKH[:D+1] # newDplus1
                 then () = if test_verbose then prints("unitary facet counts to dim ",
		     D+1,": ", for list in LFDKH do #list od) fi
                 then ()= D:=D+1
                 in ()
     	      od
    then unitary_by_dim = vec: for L in LFDKH do #L od
    then () = if test_verbose then prints("unitary facets by dim = ",
       	       	   		      		      unitary_by_dim);
		prints("total number of tests = ",unitary_test_counter.use_count())
	      fi
    then UParams = [Param]: {THESE NEED NOT BE FINAL!}
       	    for L@d in LFDKH
	    do for v@j in L
	       do parameter(x,lambda, facet_bary(Lvd.list,v[:d+1]))
	       od
	    od.##
	   {could omit ## to get output lists indexed by local facet dimension}
    then () = if deform_flag
       	      then for p in UParams
      	    	   do for p1 in monomials(finalize(p))
	       	       do let (,j) = %p1.x in Uhashes[j].match(herm_center(p1));
		   	  for q in face_deformed_unitaries_new(p1)
		   	  do let (,j) = %q.x in Uhashes[j].match(q)
		   	  od
		       od
		    od
	       fi
    in  UParams

set local_test_GEO_hashes_no_ht(KGBElt x, ratvec lambda, [Param_hash] Uhashes) =
    [Param]:
    let G = x.real_form, pol_hash=make_KTypePol_hash()
    then vd = FPP_vertex_data(G)
    then (Lvd, Perm, mapAct) = localFD_Lvd(x,lambda,vd)
    in local_test_GEO_hashes_no_ht(x, lambda, vd, Lvd, Perm, mapAct, pol_hash,
       Uhashes)

{how often to redo is_unitary_to_ht for dims 0 and 1}
set edge_reps = int: 2

{lowest height to start testing}
set edge_offset = int: 3

{how much to increase ht at each repetition}
set edge_skip = int: 2

{vertex set size upper bound for reverting to unitary_hash on each vertex}
set vert_diff_cutoff = int: 20

{difficulty at which to revert to unitary_hash on each vertex}
set diff_cutoff = int: 90

set prod_cutoff = int: 3000

set local_test_GEO_hashes_one_level(KGBElt x, ratvec lambda, VertexData vd,
    VertexData Lvd, vec Perm, vec mapAct, KTypePol_hash pol_hash,
    [Param_hash] Uhashes) = [Param]:
    let G = x.real_form, thetaMinus = x.involution - 1

    then () = if {TINY CASE} #Lvd.list=1
    	      then let p = parameter(x,lambda,Lvd.list[0])
	      	   then Q = monomials(finalize(p))
	      	   in if all(for q in Q do is_unitary(q) od)
		      then let () = for q in Q
		      	       	    do let (,k) = %q.x
				       in Uhashes[k].match(herm_center(q))
				    od
		      	   in return [p]
		      else return []
		      fi
	      fi
    then maxDiff = max(for v in Lvd.list
    	 	       do G.two_rho_check*(dominant(G,thetaMinus*v))
		       od)/(G.two_rho_check*G.two_rho)
    then approxMaxDiff = maxDiff.numer*100\maxDiff.denom
    then vertexDiff = #Lvd.list/#vd.list
    then approxVertexDiff = vertexDiff.numer*100\vertexDiff.denom
    {then () = prints("approxMaxDiff = ",approxMaxDiff)}
    {now have at least two vertices. If it's an easy case,
    	 revert to local_test_GEO_hashes}
    then () = if (approxMaxDiff*approxVertexDiff < prod_cutoff) and
    	      	 (approxMaxDiff < diff_cutoff)  {and
		 (approxVertexDiff < vertex_cutoff)}
	      then return local_test_GEO_hashes(x, lambda, vd, Lvd, Perm, mapAct,
	      	   	  pol_hash, Uhashes)
    	      fi
    then r = rank(thetaMinus)
    { these numbers should be adjusted depending on ...the case. Don't know how. }
    {
    then () = edge_reps:= max(1,(r+2)\3)
    then () = edge_offset:= max(0, (r+2)\3)
    then () = edge_skip:= 1
    {need (LOW,HIGH) = (2,4) for E7_s, (0,2) or (0,3) for F4_s}
    }
    then hts = next_heights(parameter(x,lambda,0*lambda),
    	 (edge_reps-1)*edge_skip + edge_offset + 1)
    then ht = hts~[0]
    {get all verts}
    then LFDKH = localFD_KHash000(x, lambda, Lvd, Perm, mapAct, pol_hash)
    then () = if test_verbose then prints("facet counts to dim 0: ",
    	 [#LFDKH[0]]) fi
    {next add edges}
    then () = LFDKH := { if #LFDKH[0] < 2
    	      	       then LFDKH#[]
	      	       else} localFD_KHash1{new}(x,lambda,vd,Lvd,Perm,
				mapAct,LFDKH,pol_hash)
	               {fi}
    {now have all local facets of dims 0 and 1.}
    then () =  if test_verbose then prints("facet counts to dim 1: ",
			  for list in LFDKH do #list od) fi
	{compute graph on facets to dim 1, to ht0}
    then () =  if test_verbose then prints(new_line, "edge_reps = ",edge_reps,
    	       ", edge_offset = ", edge_offset, ", edge_skip = ",edge_skip);
    		  prints("testing levels = ",
    	 for a:edge_reps do hts[a*edge_skip+edge_offset] od) fi
    then tester = (Param->bool): (Param p) bool:
    	 is_unitary_to_ht(p,ht)
    then () = for a:edge_reps
    	      do let b = a*edge_skip + edge_offset
		 then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH,pol_hash,hts[b])
    	      	       {remove from LFDKH all facets failing is_unitary_to_ht(hts[b])}
    		 then () = LFDKH := local_testK_hash(x,lambda,Lvd, LFDKH, eq,
		      gr, IUCL, CLBF, hts[b], Uhashes)
    		 in if test_verbose then prints("unitary to ht ",hts[b],
		   	" facet counts to dim 1: ",for list in LFDKH do #list od) fi
	      od
{ Have facets to dim 1 unitary to ht. Seek to extend list to all higher dims }
    then D = int:1
    then () = while (D <= rank(x.involution-1) - 1  ) and
    	      	    (#LFDKH = D + 1) and
		    (#(LFDKH~[0]) > D+1)
    {can't omit middle because LFDKH is truncated!}
    {step D in while loop adds facets of dim D+1; then does is_unitary_to_ht(ht) on
    facets of dim D+1; then adds facets of dim D+2, etc. If there are less than
    D+2 possibly unitary facets of dim D, then none of dim D+1.}
    	      do let () = LFDKH := localFD_KHashbt_lookDownGEO(x,lambda, Lvd,
                       Perm, mapAct, LFDKH, D+1,D+2,pol_hash)
		    {now top degree in LFDKH is D+1}
		 then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH,pol_hash,ht)
       	      	 {compute graph on facets to dim D+1}
		 then lowUs = sum(for d:D+1 do #LFDKH[d] od)
			   { write statuses more simply: all unitary except
			     singleton classes of dim D+1 }
		 then newDplus1 = [vec]: for j@m in CLBF[D+1]
		      {D+1-diml facet #m belongs to class j}
		      do if #eq[j] > 1
		      	 then [LFDKH[D+1][m]]
		         else let verts = vec: LFDKH[D+1][m][:D+2]
			      {should insert Uhashloc.lookup(p).>=
			      Actually this has no effect in SO(4,4)}
			      then ps = monomials(finalize(
					  parameter(x, lambda,
					  facet_bary(Lvd.list, verts))))
					  in if all(for p in ps
					     	    do let (,j1) = %p.x
						       in Uhashes[j1].lookup(p).>= or
						       tester(p)
						    od)
					     then [LFDKH[D+1][m]]
					     else []
					     fi
			  fi
		       od.##
		 then () = LFDKH := LFDKH[:D+1] # newDplus1
                 then () = if test_verbose then prints("unitary to ht ",ht,
		      	      		   " facet counts to dim ",
		     			   D+1,": ", for list in LFDKH do #list od) fi
                 then ()= D:=D+1
                 in ()
     	      od
    then unitary_by_dim = vec: for L in LFDKH do #L od
    then () = if test_verbose then { prints("unitary to ht ",ht, " facets by dim = ",
       	       	   		      		      unitary_by_dim);}
		prints("number of tests so far = ",unitary_test_counter.use_count())
	      fi
    in [Param]:
         if ht >=  0
         then let ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH)
              then UParams = local_test_hashes(x, lambda, Lvd, LFDKH, eq, gr,
                             CLBF, Uhashes)
              then () = if test_verbose then prints("total number of tests = ",
                                        unitary_test_counter.use_count()) fi
              in UParams
         else let UParams =
                  for list@d in LFDKH
                  do for v in list
                     do parameter(x,lambda, facet_bary(Lvd.list, v[:d+1]))
                     od
                  od.##
              then () = if deform_flag
                        then for p in UParams
                             do for p1 in monomials(finalize(p))
                                do let (,j) = %p1.x
                                   in Uhashes[j].match(herm_center(p1));
                                   for q in face_deformed_unitaries_new(p1)
                                   do let (,j) = %q.x in Uhashes[j].match(q)
                                   od
                                od
                             od
                         fi
              in UParams
	  fi


set local_test_GEO_hashes_one_level(KGBElt x, ratvec lambda, [Param_hash] Uhashes) =
    [Param]:
    let G = x.real_form, pol_hash=make_KTypePol_hash()
    then vd = FPP_vertex_data(G)
    then (Lvd, Perm, mapAct) = localFD_Lvd(x,lambda,vd)
    in local_test_GEO_hashes_one_level(x, lambda, vd, Lvd, Perm, mapAct, pol_hash,
       Uhashes) 

set local_test_GEO_hash(KGBElt x, ratvec lambda, Param_hash Uhash) =
    ([string],[Param]):
    let G = x.real_form, pol_hash=make_KTypePol_hash()
    then Uhashloc = localize(Uhash,x,lambda)
    then depth= rank(x.involution -1)
    then hts = next_heights(parameter(x,lambda,0*lambda),depth+2)
    then () = if(facet_verbose) then prints("hts = ",hts) fi
    {make sure verts are unitary to hts[0]}
    then (vd, Lvd, Perm, mapAct, LFDKH) = localFD_KHash001(x,lambda,
					hts[0],pol_hash,{cert_hash,}Uhashloc)
    {next add edges, still unitary_to_ht}
    then () = LFDKH := if #LFDKH[0] < 2
    	      	       then LFDKH#[]
	      	       else localFD_KHash12(x,lambda,Lvd,Perm,
				mapAct,LFDKH,hts[0],pol_hash,{cert_hash,}Uhashloc)
	               fi
    then D = int:1
    then () =  if test_verbose then prints("facets counts to dim 1:",
			  for list in LFDKH do #list od) fi
    then () = while (D <= rank(x.involution-1) - 1  ) and
    	      	    (#LFDKH = D + 1) and
		    (#(LFDKH~[0]) > D+1)
    {can't omit middle because LFDKH is truncated!}
    {step D in while loop adds facets of dim D+1; then does is_unitary_to_ht on
    facets of dim D+1; then adds facets of dim D+2, etc. If there are less than
    D+2 possibly unitary facets of dim D, then none of dim D+1.}
    	      do let () = LFDKH := localFD_KHashbt_lookDownGEO(x,lambda, Lvd,
                       Perm, mapAct, LFDKH, D+1,D+2,pol_hash)
		 then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH,pol_hash,hts[D])
       	      	 {compute graph on facets to dim D+1}
       		 then statuses = [string]: for j:#eq do "?" od
		 then known = known_unitaries(Uhashloc,Lvd,LFDKH) {[vec]}
    		 then () = for d:#LFDKH
	      	     	   do for m in known[d]
	         	      do statuses:= downdateUclasses(statuses,
			     	IUCL[CLBF[d][m]], CLBF[d][m],"TprevKnown")
		 	      od
	      		   od
                 then () = LFDKH := local_testK_level(x,lambda,Lvd,
                      LFDKH, eq, gr, CLBF, statuses, hts[D])
                                       {,cert_hash)}
                 then () = if test_verbose then prints("facet counts to dim ",
		     D+1,": ", for list in LFDKH do #list od) fi
                 then ()= D:=D+1
                 in ()
     	     od
    {now have facets of all dims, to height hts[?]}
    then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH)
    then statuses = [string]: for j:#eq do "?" od
    then known = known_unitaries(Uhash,x,lambda,Lvd,LFDKH) {[vec]}
    then () = for d:#LFDKH
	      do for m in known[d]
	         do statuses:= downdateUclasses(statuses, IUCL[CLBF[d][m]],
			       		  CLBF[d][m],"TprevKnown")
		 od
	      od
     then tester = (Param->bool): (Param p) bool:
    	      is_unitary(p)
     in if(facet_verbose) then prints();
       prints("setting tester = is_unitary(p)") fi;
       local_test_hash(x,lambda,Lvd,LFDKH,eq,gr,CLBF,statuses,
			Uhash, tester)



{one unitary hash table for each KGBElt}
set local_test_GEO_hashes2(KGBElt x, ratvec lambda, VertexData vd,
    VertexData Lvd, vec Perm, vec mapAct, KTypePol_hash pol_hash,
    [Param_hash] Uhashes) = [Param]:
    let G = x.real_form
    then depth= max(rank(x.involution -1),2)
    then hts = next_heights(parameter(x,lambda,0*lambda),depth)
    then () = if(facet_verbose) then prints("hts = ",hts) fi
        {get all verts}
    then LFDKH = localFD_KHash000(x,lambda, Lvd, Perm, mapAct, pol_hash)
    	{next add all edges}
    then () =  LFDKH := if #LFDKH[0] < 2
    	      	       then LFDKH#[]
	      	       else localFD_KHash1(x,lambda,vd,Lvd,Perm,
				mapAct,LFDKH,pol_hash)
	               fi
    then () =  if test_verbose then prints("facet counts to dim 1: ",
                          for list in LFDKH do #list od) fi
        {compute graph on facets to dim 1, to hts[0]}
    then () =  if test_verbose then prints("testing levels = ",hts) fi
    then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH,pol_hash,hts[0])
                       {remove from LFDKH all facets failing is_unitary_to_ht(ht0)}
    then () = LFDKH := local_testK_hash(x,lambda,Lvd, LFDKH, eq,
                      gr, IUCL, CLBF, hts[0], Uhashes)
    then () = if test_verbose then prints("unitary to ht ",hts[0],
                        " facet counts to dim 1: ",for list in LFDKH do #list od) fi
    then D = int:1
    then () =  if test_verbose then prints("facets counts to dim 1:",
			  for list in LFDKH do #list od) fi
    then () = while (D <= rank(x.involution-1) - 1  ) and
    	      	    (#LFDKH = D + 1) and
		    (#(LFDKH~[0]) > D+1)
    {can't omit middle because LFDKH is truncated!}
    {step D in while loop adds facets of dim D+1; then does is_unitary_to_ht on
    facets of dim D+1; then adds facets of dim D+2, etc. If there are less than
    D+2 possibly unitary facets of dim D, then none of dim D+1.}
    	      do let () = LFDKH := localFD_KHashbt_lookDownGEO(x,lambda, Lvd,
                          	   Perm, mapAct, LFDKH, D+1,D+2,pol_hash)
		 then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH,pol_hash,hts[D])
       	      	 {compute graph on facets to dim D+1}
		 then () = LFDKH := local_testK_hash(x, lambda, Lvd, LFDKH,
		      	   	    eq, gr, IUCL, CLBF, hts[D], Uhashes)
                 then () = if test_verbose then prints("facet counts to dim ",
		     D+1,": ", for list in LFDKH do #list od) fi
                 then ()= D:=D+1
                 in ()
     	     od
    {now have facets of all dims, to height hts[?]}
    then ((eq,gr),IUCL,CLBF) = localGraphK(LFDKH)
    in local_test_hashes(x,lambda,Lvd,LFDKH,eq,gr,CLBF,Uhashes)

{one unitary hash table for each KGBElt}

set local_test_GEO_hashes2(KGBElt x, ratvec lambda, [Param_hash] Uhashes) =
    [Param]:
    let G = x.real_form, pol_hash=make_KTypePol_hash()
    then vd = FPP_vertex_data(G)
    then (Lvd, Perm, mapAct) = localFD_Lvd(x,lambda,vd)
    in local_test_GEO_hashes2(x, lambda, vd, Lvd, Perm, mapAct,
       pol_hash, Uhashes)

set local_test_GEO(KGBElt x, ratvec lambda) =
    [Param]:
    let Uhashes = for y in KGB(x.real_form) do make_Param_hash() od
    then () = unipotents_to_hashes(x.real_form,Uhashes)
    in local_test_GEO_hashes(x,lambda, Uhashes)

set local_test_GEO2(KGBElt x, ratvec lambda) = [Param]:
    let Uhashes = for y in KGB(x.real_form) do make_Param_hash() od
    then () = unipotents_to_hashes(x.real_form,Uhashes)
    in local_test_GEO_hashes2(x,lambda,Uhashes)

set local_test_GEO_no_ht(KGBElt x, ratvec lambda) = [Param]:
    let G = x.real_form
    then Uhashes = for y in KGB(G) do make_Param_hash() od
    then () = unipotents_to_hashes(x.real_form,Uhashes)
    in local_test_GEO_hashes_no_ht(x,lambda,Uhashes)

set local_test_GEO_one_level(KGBElt x, ratvec lambda) = [Param]:
    let G = x.real_form
    then Uhashes = for y in KGB(G) do make_Param_hash() od
    then () = unipotents_to_hashes(x.real_form,Uhashes)
    in local_test_GEO_hashes_one_level(x,lambda,Uhashes)

set local_facets(KGBElt x, ratvec lambda) = [[vec]]:
    let G = x.real_form
    then (Affd,,) = cofolded(G)
    then (vd, Lvd, Perm, mapAct, LF) = localFD_000(x,lambda)
    in localFD_bt(x,lambda,vd, Lvd, Perm, mapAct, LF,1,rank(x.involution-1)+2)

set spherical_facets(RealForm G) = local_facets(x_open(G), G.rho)

set sphericalK_levels_B(RealForm G) = [Param]:
    let Uhashes = for y in KGB(G) do make_Param_hash() od
    then () = unipotents_to_hashes(G,Uhashes)
    in local_testK_levels_B(x_open(G), G.rho, Uhashes)

set spherical_GEO(RealForm G) = [Param]:
    local_test_GEO(x_open(G),G.rho)

set spherical_GEO2(RealForm G) = [Param]:
    local_test_GEO2(x_open(G),G.rho)

set spherical_GEO_one_level(RealForm G) = [Param]:
    local_test_GEO_one_level(x_open(G),G.rho)

set spherical_GEO_no_ht(RealForm G) = [Param]:
    local_test_GEO_no_ht(x_open(G),G.rho)


{next functions aim to compute FULL spherical dual in non-split case, when several
 different x give spherical reps}

set spherical_xs(RealForm G) = [KGBElt]:
    let real_rank = rank(x_open(G).involution + 1)
    in for x in KGB(G)
       do if rank(x.involution + 1) = real_rank
       	  then [x]
	  else []
	  fi
       od.##

set FPP_lambdas(KGBElt x) = [ratvec]:
    let G=x.real_form, twists = all_lambda_differential_0(x)
    then zeroPol = ParamPol: 0*G.trivial
    then rho = G.rho, verts = FPP_vertices(G)
    then th1 = x.involution + 1
    then lamthlams = [vec]:
    	 for v in verts
    	 do if ((th1*v).denom = 1) then [ratvec_as_vec(th1*v)]
	    else []
	    fi
	 od.##.no_reps
    then cands = [ratvec]:
    	 for lamthlam in lamthlams
    	 do case vec_solve(th1,lamthlam - th1*rho)
	    | else [ratvec]: []
	    | solution(lr):
	      let lambda = rho + lr
	      in for lambda0 in twists do lambda + lambda0 od
	    esac
	  od.##
    in for lambda in cands
       do let p = parameter(x,lambda,0*lambda)
       	  then lambdaNorm = p.lambda
	  in if 1*p = zeroPol
       	     then []
	     else [lambdaNorm]
	  fi
       od.##

set unitary_inds(RealForm G) = [(KGBElt,[ratvec])]:
    for x in KGB(G)
  ~ do (x, FPP_lambdas(x))
    od

set unitary_hash = make_Param_hash()

set FPP_unitary(RealForm G) = [Param]:
    let () = test_verbose:=false
    in for x in KGB(G)
    do for lambda in FPP_lambdas(x)
       do local_test_GEO(x,lambda)
       od.##
    od.##.reduce

{load a bunch of Param_hash's into one}
set transfer([Param_hash] Us, Param_hash target) = void:
    for U in Us
    do for j:U.size()
       do target.match(U.index(j))
       od
    od

set FPP_unitary_hashes_general(RealForm G,[Param_hash] Uhashes,
    (KGBElt,ratvec,VertexData,VertexData,vec,vec,KTypePol_hash,[Param_hash]->[Param])
    local) = void:
    let inv_hash = make_mat_hash(), vd = FPP_vertex_data(G)
    then () = for x in KGB(G) do inv_hash.match(x.involution) od
    then NumInvs = inv_hash.size(), pol_hash = make_KTypePol_hash()
    then dlambda_hashes = for i:NumInvs do make_vec_hash() od
    then LvdEtcs = for i:NumInvs do [(VertexData,vec,vec)]:[] od
    then old_facet_verbose = facet_verbose
    then () = test_verbose:=false
    then () = facet_verbose:=false
    then () = deform_flag :=true
    then () = cert_flag := false
    then () = unipotents_to_hashes(G,Uhashes)
    then () = for x in KGB(G)
    ~ do let lambdas = FPP_lambdas(x)
      	 in if(old_facet_verbose) then prints("KGBElt #",
      	 		       let (,m) = %x in m, ", #Uhashes = ",
			       size(Uhashes), ", #lambdas = ", #lambdas,
			       ", #tests = ",unitary_test_counter.use_count(),
			       ", #def lookups = ", deformLookupCounter.use_count(),
			       ", #def calcs = ", deformCalcCounter.use_count()) fi;
	 for lambda@j in lambdas
       	 do if(old_facet_verbose and j%4 = 0)
	    then prints("    working on ",j,"th lambda")
	    fi;
	    let theta = x.involution
	    then i = inv_hash.lookup(theta)
	    then dlambda = ratvec_as_vec(lambda + theta*lambda)
	    then j = dlambda_hashes[i].match(dlambda)
	    then () = if j = #LvdEtcs[i]
	    	      then
		      LvdEtcs[i]:=LvdEtcs[i]#localFD_Lvd(x,lambda,vd)
		      fi
	    then (Lvd, Perm, mapAct) = LvdEtcs[i][j]
	    then () =local(x, lambda, vd, Lvd, Perm, mapAct, pol_hash, Uhashes)
	    in ()
       	 od
      od
    then () = facet_verbose:=old_facet_verbose
    in ()

{one unitary hash for each KGBElt}
set FPP_unitary_hashes_one_level(RealForm G,[Param_hash] Uhashes) = void:
    FPP_unitary_hashes_general(G, Uhashes, local_test_GEO_hashes_one_level@(
    KGBElt,ratvec,VertexData,VertexData,vec,vec,KTypePol_hash,
    [Param_hash]))

{one unitary hash for each KGBElt}
set FPP_unitary_hashes_no_ht(RealForm G,[Param_hash] Uhashes) = void:
    FPP_unitary_hashes_general(G, Uhashes, local_test_GEO_hashes_no_ht@(
    KGBElt,ratvec,VertexData,VertexData,vec,vec,KTypePol_hash,
    [Param_hash]))

{one unitary hash for each KGBElt}
set FPP_unitary_hashes2(RealForm G,[Param_hash] Uhashes) = void:
    FPP_unitary_hashes_general(G, Uhashes, local_test_GEO_hashes2@(
    KGBElt,ratvec,VertexData,VertexData,vec,vec,KTypePol_hash,
    [Param_hash]))

{one unitary hash for each KGBElt}
set FPP_unitary_hashes(RealForm G,[Param_hash] Uhashes) = void:
    FPP_unitary_hashes_general(G, Uhashes, local_test_GEO_hashes@(
    KGBElt,ratvec,VertexData,VertexData,vec,vec,KTypePol_hash,
    [Param_hash]))

set FPP_unitary_hash_no_ht(RealForm G,Param_hash Uhash) = void:
    let Uhashes = for x in KGB(G) do make_Param_hash() od
    then () = FPP_unitary_hashes_no_ht(G,Uhashes)
    in transfer(Uhashes,Uhash); prints("Number of FPP-unitary facets = ",
    Uhash.size())

set FPP_unitary_hash_one_level(RealForm G,Param_hash Uhash) = void:
    let Uhashes = for x in KGB(G) do make_Param_hash() od
    then () = FPP_unitary_hashes_one_level(G,Uhashes)
    in transfer(Uhashes,Uhash); prints("Number of FPP-unitary facets = ",
    Uhash.size())

set FPP_unitary_hash(RealForm G,Param_hash Uhash) = void:
    let Uhashes = for x in KGB(G) do make_Param_hash() od
    then () = FPP_unitary_hashes(G,Uhashes)
    in transfer(Uhashes,Uhash); prints("Number of FPP-unitary facets = ",
    Uhash.size())

set FPP_unitary_hash2(RealForm G,Param_hash Uhash) = void:
    let Uhashes = for x in KGB(G) do make_Param_hash() od
    then () = FPP_unitary_hashes2(G,Uhashes)
    in transfer(Uhashes,Uhash); prints("Number of FPP-unitary facets = ",
    Uhash.size())

{
{ lists item d of answer is a list of facets of unitary spherical
reps, given as lists of their vertices: d+1 ratvecs }
set sphericalJustTheVertexLists(RealForm G) = [[[ratvec]]]:
    let FD = FacetData: sphericalKPO_long(G)
    then vlist = FD.v_data.list, FDind = FD.facet_status_inds
    in for FDindd in FDind
       do for find in FDindd
       	  do if find.status[0]="T"
	     then [for j in find.verts do vlist[j] od]
	     else []
	     fi
	  od.##
       od

{.forget dimension info; just (for each spherical hermitian barycenter)
whether or not unitary, inducing nu. G(R) must have simple derived group.}
set JustTheFacts_simple(RealForm G) = [(bool,ratvec)]:
    let (vd,FVstInd) = sphericalKPO_long(G)
    in
    ##(for d:#FVstInd
	    do if only_unitary then
	       for FVI@j in FVstInd[d]
	       do if FVI.status[0]="T"
	          then [(true,facet_bary(vd.list,FVI.verts))]
	 	  else []
	          fi
	       od.##
	       else
	       for FVI@j in FVstInd[d]
	       do
		(
	       if FVI.status[0]="T" then true
	       elif FVI.status[0] = "F" then false
	       else prints("ERROR at d = ",d,", j = ",j); false
	       fi,
		  facet_bary(vd.list,FVI.verts)
		)
	       od
	       fi
	    od)

{. records vertices of unitary regions for spherical dual real simple
G; complex is OK .}
set JustTheRegions_simple(RealForm G) = [(bool,[ratvec])]:
    let ((vlist,),FVstInd) = sphericalKPO_long(G)
    in
    ##(for d:#FVstInd
	 do if only_unitary then
	    for FVI@j in FVstInd[d]
	    do if FVI.status[0]="T"
	       then [(true,
	       	    for v in FVI.verts do vlist[v] od)]
	       else []
	       fi
	    od.##
	    else
	    for FVI@j in FVstInd[d]
	    do (
	       if FVI.status[0]="T" then true
	       elif FVI.status[0] = "F" then false
	       else prints("ERROR at d = ",d,", j = ",j); false
	       fi,
		 for v in FVI.verts do vlist[v] od
		)
	    od
	    fi
	 od)

{ lists real and/or complex simple factors }
set simple_factors(RealForm G) = [RealForm]:
    let delta=G.distinguished_involution, tf=KGB(G,0).torus_factor,
	simpleFactors = simple_factors(RootDatum: G),
	Factors = [RealForm]:[]
    in
    for rd@i in simpleFactors
    do
    let root = simple_roots(rd)[0]
    then newRoot = delta*root
    then simpleRootIndex = simple_root_index(G,root),
	 newSimpleRootIndex = simple_root_index(G,newRoot)
    then diagram = diagram_component(G,simpleRootIndex),
	 newDiagram = diagram_component(G,newSimpleRootIndex)
    in  if diagram=newDiagram then Factors##:=
	 [real_form(inner_class(rd,delta), delta, tf)]
	 else if diagram[0] < newDiagram[0] then Factors##:=
	 [real_form(inner_class(sub_datum(G,diagram##newDiagram),
		delta), delta, tf)]
	      fi
	fi
    od; Factors

set max_real_Levis(RealForm G) = [RealForm]:
    let xopen=x_open(G), Grho = G.rho, List = 1*G.trivial
    then inv=xopen.involution
    then tworhoM = (1+inv)*Grho
     then MRL= [RealForm]: []
    in for xi@j in G.fundamental_weights
    do
    let restrFund = (1-inv)*xi
    in if all(for i:j do restrFund*G.simple_coroots[i] = 0 od) and
       List[real_induce_standard(real_Levi_by_wt(restrFund, xopen).trivial,G)] = 0
       then MRL##:= [real_Levi_by_wt(restrFund, xopen)]; 
       	    List +:= real_induce_standard(real_Levi_by_wt(restrFund, xopen).trivial,G)
       fi
    od; MRL

{restricted to L having three simple factors; meant to be applied to a
maximal Levi in a simple G. [ratvec] is infinitesimal chars for spherical reps of L;
[bool] whether unitary}
set JustTheFacts(RealForm L) = [(bool,ratvec)]:
    let (Ms) = simple_factors(L)
    then JTFs = for M in Ms do JustTheFacts_simple(M) od

    in
    case #Ms
	 in [(true,null(L.rank)/1)],
	 JTFs[0],
	 for (stat0,nu0) in JTFs[0]
	     do for (stat1,nu1) in JTFs[1]
		do (stat0 and stat1, nu0+nu1)
		od
	     od.##,
	 for (stat0,nu0) in JTFs[0]
	     do for (stat1,nu1) in JTFs[1]
		do for (stat2,nu2) in JTFs[2]
		   do (stat0 and stat1 and stat2, nu0+nu1+nu2)
		   od
		od.##
	     od.##
     esac

{. takes two nonempty lists of ratvecs all of the same size, and
produces a list of all sums of pairs. Intended for getting vertices of
a product region .}
set product_vertices([ratvec] list1, [ratvec] list2) = [ratvec]:
    let n1 = #list1, n2 = #list2
    in for j:n1*n2 do
    list1[j\n2] + list2[j%n2]
    od

{. record vertices of unitarity regions. Works only for up to three
simple factors of L .}
set JustTheRegions(RealForm L) = [(bool,[ratvec])]:
    let Ls = simple_factors(L)
    then JTFs = for Lj in Ls do JustTheRegions_simple(Lj) od

    in
    case #Ls
	 in [(true,[null(L.rank)/1])],
	 JTFs[0],
	 for (stat0,nu0s) in JTFs[0]
	     do for (stat1,nu1s) in JTFs[1]
		do (stat0 and stat1,
		   product_vertices(nu0s, nu1s))
		od
	     od.##,
	 for (stat0,nu0s) in JTFs[0]
	     do for (stat1,nu1s) in JTFs[1]
		do for (stat2,nu2s) in JTFs[2]
		   do (stat0 and stat1 and stat2,
		   product_vertices(product_vertices(nu0s,nu1s),nu2s))
		   od
		od.##
	     od.##
     esac


{.like facet_statusu, adding info from real induction.}
{Marks unipotent parameters as "Tunip[number of dual nilpotent]", induced
as "TindLevi#" or "FindLevi#" FPPQuo should first be pruned by down_to_business}
set facet_statusu_ind(RealForm G, FacetData(vd,FPPQuo)) = FacetData:
    let old_facet_verbose = facet_verbose, old_test_verbose = test_verbose next
	if facet_verbose then prints("starting FPPB in facet_statusu_ind") fi
    then FPPB = for d:#FPPQuo do for Find in FPPQuo[d] do
	facet_bary(vd.list,Find.verts) od od next facet_verbose := false;
				      test_verbose := false
    then allFPPB = [ratvec]: ##FPPB, FPPnew = FPPQuo,
	 allLABELS =  ##(for d:#FPPB do for j:#FPPB[d] do (d,j) od od),
	 maxLevis = [RealForm]: max_real_Levis(G)
{indices to convert from FPPQuo to allFPPQuo}
    then bary_lookup = index_in(allFPPB)
    , lookups = [(vec->int)]: { lookup functions for equidiemnsional facets }
        for L in FPPQuo do index_in_facet_list(L) od
    then JTFLs = [ [(bool,ratvec)] ]:
	 for L in maxLevis
	 do
	 if old_facet_verbose then prints("starting JTF for Levi ",L,
	 " in facet_statusu_ind") fi;
	 JustTheFacts(L)
	 od
    then (rd,M,j) = cofolded(G)
    then leftM = M.left_inverse
{ update FPPQuo working through Levis }
    then totalChop = int: 0
    then temp = for L@j in maxLevis
    do
    if old_facet_verbose then prints(new_line,"updating status using Levi ",L);
	 prints("in facet_statusu_ind, using ",#JTFLs[j]," representations on L.") fi;
    let xL = x_open(L), rhoL = L.rho
    then countUp = int: 0, countDown = int: 0
    in
    for (uboolL,gammaL) in JTFLs[j]
	do
	let IgammaLstd = real_induce_standard(parameter(xL, rhoL, gammaL), G)
	then gammaG=first_param(IgammaLstd).infinitesimal_character
	then gammaGlisted = M*facet_bary(rd,leftM*gammaG)
	then nG = bary_lookup(gammaGlisted)
	then bigTrouble = if nG=-1 then prints("TROUBLE at MaxLevi #",j,
	     "  which is ",L, ",  and gammaL = ",gammaL, ", gammaG = ",
		gammaG); break fi
	then (d,j) = allLABELS[nG]
	then FPPnewd = FPPnew[d], Find = FPPnew[d][j]
	in
	let result =
	    if FPPnew[d][j].status!="?"
	    then FPPnew[d][j].status
		{if inducing rep is unitary, so is induced, and facets
		    in closure}
	    elif uboolL then countDown := countDown+1
		; FPPnew:= updateSing{Closure}(G, (vd,FPPnew),
		  ("Ti",Find.verts))
		; "Ti"
		{if inducing is hermitian nonunitary,
		    and induction is irreducible, then induced is hermitian
		    nonunitary, along with facets in opening}
	    elif #real_induce_irreducible(parameter(x_open(L),L.rho, gammaL),G)
	    	 = 1
	    then countUp := countUp+1
	    	 ; FPPnew:= update(lookups, FPPnew, ("Fi",Find.verts))
		 ; "Fi"
	    else "?" { FPPnew[d][j].status }
	    fi
	    then temp = (); FPPnewd[j]:= (result,FPPnewd[j].verts)
	    in FPPnew[d] := FPPnewd
	od; if old_facet_verbose then prints("completed Levi ",j," using ",
	    countUp, " updates and ", countDown, " downdates") fi
    od; facet_verbose := old_facet_verbose
    ; test_verbose := old_test_verbose
    in
    (vd, FPPnew)

set facet_statusu_ind(RealForm G) = FacetData:
    let data = facet_data_fold(cofolded(G))
    then dataAct = actualize(x_open(G), G.rho, data)
    then dataIndncH = down_to_business(G,dataAct)
    in facet_statusu_ind(G,dataIndncH)

set facet_statusu_reg(RealForm G, FacetDataOldKchar(vd,FPPQuo, OldBarys,
    Pols)) = FacetDataKchar:
    let old_facet_verbose = facet_verbose, old_test_verbose = test_verbose next
	if facet_verbose then prints("starting FPPB in facet_statusu_reg") fi
    then allFPPB = [ratvec]: ##OldBarys, FPPnew = FPPQuo,
	 allLABELS =  ##(for d:#OldBarys do for j:#OldBarys[d] do (d,j) od od),
	 maxLevis = [RealForm]: max_real_Levis(G) next facet_verbose:= false
	 ; test_verbose:=false
    {indices to convert from FPPQuo to allFPPQuo}
    then bary_lookup = index_in(allFPPB)
    	 , lookups = [(vec->int)]: { lookup functions for equidiml facets }
        for L in FPPQuo do index_in_facet_list(L) od
    then JTRs = [ [(bool,[ratvec])] ]:
	 for L in maxLevis
	 do
	 if old_facet_verbose then prints("starting JTR for Levi ",L,
	 " in facet_statusu_reg") fi;
	 JustTheRegions(L) od
    then (rd,M,j) = cofolded(G)
    then leftM = M.left_inverse
{ update FPPQuo working through Levis }
    then totalChop = int: 0
    then temp = for L@j in maxLevis
    do{LOOP OVER LEVIS}
    if old_facet_verbose then prints(new_line,"updating status using Levi ",L);
	 prints("in facet_statusu_reg, using ",#JTRs[j]," representations on L.") fi;
    let xL = x_open(L), rhoL = L.rho
    then countUp = int: 0, countDown = int: 0, countChopped = int: 0
    in
    for (uboolL,gammaLs) in JTRs[j] {Need first to chop}
	do{LOOP OVER L UNITARY REGIONS}
	{ bad next line: don't know how to chop using just folded root
	  datum; trouble is that L is not folded consistently with G }
	{ let gammaGs = [[ratvec]]: for w in chop_coroots(rd,
	    for v in gammaLs do leftM*v od, rd.semisimple_rank) do M*w od }
	let gammaGs = [[ratvec]]: chop_coroots(G,gammaLs,chop_bound)
	in
		countChopped := countChopped+#gammaGs;
		for gammaG {[ratvec], verts of one reg} in gammaGs
	     	     do{LOOP OVER CHOPPED PIECES}
		     let gammaLb = sum(G.rank, gammaG)/#gammaG
		     { next line converts to a barycenter of the folded datum }
		     then gammaGb = (1*real_induce_standard(
		     	  parameter(xL,rhoL,gammaLb),G)
			  ).infinitesimal_character
		     then gammaGlisted = M*facet_bary(rd, leftM*gammaGb)
		     then nG = bary_lookup(gammaGlisted)
		     then bigTrouble = if nG=-1 then prints(
		        "TROUBLE at MaxLevi #",j,
	     		"  which is ",L, ",  and gammaGb = ",gammaGb); break fi
		     then (d,j) = allLABELS[nG]
		     then FPPnewd = FPPnew[d], Find = FPPnew[d][j]
		     in
		     let result =
	    		if FPPnew[d][j].status!="?"
	    		then FPPnew[d][j].status
			     {if inducing rep is unitary, so is induced,
			      and facets in closure}
	    		elif uboolL then countDown := countDown+1;
			     FPPnew := downdate(lookups, FPPnew,
			         ("Ticlosure",FPPnew[d][j].verts));
			     FPPnew := updateSingK{Closure}(lookups
			     	       , (vd,FPPnew,Pols)
				       , ("Tiopen",Find.verts),Pols[d][j])
			; "Ti"
			     {if inducing is hermitian nonunitary,
		    	     	 and induction is irreducible, then
				 induced is hermitian nonunitary,
				 along with facets in opening}
	    		elif #real_induce_irreducible(parameter(
			     x_open(L),L.rho, gammaLb),G) = 1
	    		     	    then countUp := countUp+1
	    		;    FPPnew:= update(lookups, FPPnew,("Fi",Find.verts))
			;    FPPnew:= downdateSingK(lookups,(vd, FPPnew,Pols),
			     ("Fi",Find.verts), Pols[d][j])
			; "Fi"
	    		else "?" { FPPnew[d][j].status }
	    		fi
	    		then temp = (); FPPnewd[j]:= (result,FPPnewd[j].verts)
	    		in FPPnew[d] := FPPnewd
		     od{LOOP OVER CHOPPED PIECES}
       od{LOOP OVER L UNITARY REGIONS}; if old_facet_verbose then prints(
       	       "completed Levi ",j," using ",
	    countUp, " updates and ", countDown, " downdates and ",
	    countChopped, " chopped regions.") fi
	    ; totalChop := totalChop+countChopped
    od{LOOP OVER LEVIS}; facet_verbose := old_facet_verbose
    ; test_verbose := old_test_verbose
    ; if test_verbose then prints("total chopped regions ",totalChop) fi
    in
    (vd, FPPnew, Pols)


{ want to use PO data and downdate/update accordingly }
{Note that this does NOT insert unipotent reps; that's done by facet_statusu_reg(G) which is meant to come first.}
set facet_statusu_regPO(RealForm G, FacetDataOldKcharPO(vd,FPPQuo, OldBarys,
    Pols, eq, gr, {INUCL, }IUCL,  classListByFacet, statuses{, Ps})) = [string]:
    let () =  statuses:= facet_statusuKPO_old(G, (vd, FPPQuo, Pols, eq, gr
    	{, INUCL}, IUCL, classListByFacet, statuses{, Ps}))
    then old_facet_verbose = facet_verbose, old_test_verbose = test_verbose next
	if facet_verbose then prints("starting FPPB in facet_statusu_regPO") fi
    then allFPPB = [ratvec]: ##OldBarys,
	 allLABELS =  ##(for d:#OldBarys do for j:#OldBarys[d] do (d,j) od od),
	 maxLevis = [RealForm]: max_real_Levis(G) next facet_verbose:= false
	 ; test_verbose:=false
    {indices to convert from FPPQuo to allFPPQuo}
    then bary_lookup = index_in(allFPPB)
    	 , lookups = [(vec->int)]: { lookup functions for equidiml facets }
        for L in FPPQuo do index_in_facet_list(L) od
    then JTRs = [ [(bool,[ratvec])] ]:
	 for L in maxLevis
	 do
	 if old_facet_verbose then prints("starting JTR for Levi ",L,
	 " in facet_statusu_regPO") fi;
	 JustTheRegions(L) od
    then (rd,M,j) = cofolded(G)
    then leftM = M.left_inverse
{ update FPPQuo working through Levis }
    then totalChop = int: 0
    then temp = for L@j in maxLevis
    do{LOOP OVER LEVIS}
    if old_facet_verbose then prints(new_line,"updating status using Levi ",L);
	 prints("in facet_statusu_regPO, using ",#JTRs[j]," representations on L.") fi;
    let xL = x_open(L), rhoL = L.rho
    then countUp = int: 0, countDown = int: 0, countChopped = int: 0
    in
    for (uboolL,gammaLs) in JTRs[j] {Need first to chop}
	do{LOOP OVER L UNITARY REGIONS}
	{ bad next line: don't know how to chop using just folded root
	  datum; trouble is that L is not folded consistently with G }
	{ let gammaGs = [[ratvec]]: for w in chop_coroots(rd,
	    for v in gammaLs do leftM*v od, rd.semisimple_rank) do M*w od }
	let gammaGs = [[ratvec]]: chop_coroots(G,gammaLs,chop_bound)
	in
		countChopped := countChopped+#gammaGs;
		for gammaG {[ratvec], verts of one reg} in gammaGs
	     	     do{LOOP OVER CHOPPED PIECES}
		     let gammaLb = sum(G.rank, gammaG)/#gammaG
		     { next line converts to a barycenter of the folded datum }
		     then gammaGb = (1*real_induce_standard(
		     	  parameter(xL,rhoL,gammaLb),G)
			  ).infinitesimal_character
		     then gammaGlisted = M*facet_bary(rd, leftM*gammaGb)
		     then nG = bary_lookup(gammaGlisted)
		     then bigTrouble = if nG=-1 then prints(
		        "TROUBLE at MaxLevi #",j,
	     		"  which is ",L, ",  and gammaGb = ",gammaGb); break fi
		     then (d,k) = allLABELS[nG]
		     then m = classListByFacet[d][k]
		     in
		     let result =
	    		if statuses[m] !="?"
	    		then statuses[m]
			     {if inducing rep is unitary, so is induced,
			      and facets in closure}
	    		elif uboolL then countDown := countDown+1;
			     	    statuses:= downdateUclasses(statuses,
				    	       IUCL[m], m
					       , "indLevi"##to_string(j))
			; "TindLevi"##to_string(j)
			     {if inducing is hermitian nonunitary,
		    	     	 and induction is irreducible, then
				 induced is hermitian nonunitary,
				 along with facets in opening}
	    		elif #real_induce_irreducible(parameter(
			     x_open(L),L.rho, gammaLb),G) = 1
	    		     	    then countUp := countUp+1;
				    statuses := updateNUclassesB(statuses,
					       gr, m, "indLevi"##to_string(j))
			; "FindLevi"##to_string(j)
	    		else "?" { FPPnew[d][j].status }
	    		fi
	    		in statuses[m] := result
		     od{LOOP OVER CHOPPED PIECES}
       od{LOOP OVER L UNITARY REGIONS}; if old_facet_verbose then prints(
       	       "completed Levi ",j," using ",
	    countUp, " updates and ", countDown, " downdates and ",
	    countChopped, " chopped regions.") fi
	    ; totalChop := totalChop+countChopped
    od{LOOP OVER LEVIS}; facet_verbose := old_facet_verbose
    ; test_verbose := old_test_verbose
    ; if test_verbose then prints("total chopped regions ",totalChop) fi
    in statuses
    {(vd,FPPQuo, Pols, eq, INUCL, IUCL,  classListByFacet, statuses, Ps)}

{ set facet_statusu_reg(RealForm G) = FacetDataKchar:
    let data = facet_data_fold(G)
    then (vdata, dataAct, OldBarys, Pols) =
    	 actualize_oldK(x_open(G), G.rho, data)
    then (vdata, dataActu) = facet_statusu(G, (vdata, dataAct))
    in facet_statusu_reg(G,(vdata, dataAct, OldBarys, Pols))}

{collects unipotent data, then induced data, in prep for unitarity testing}
set facet_statusu_regPO(RealForm G) = FacetDataKcharPO_old:
    let data = facet_data_fold(cofolded(G))
    then (vdata, dataAct, Pols, eq, gr, IUCL, CLBF, statuses) =
    	 actualizeKPO_old(x_open(G), G.rho, data)
    then FDKoldPO = FacetDataOldKcharPO: (vdata, dataAct, [[ratvec]]: [[]], Pols, eq, gr, IUCL, CLBF, statuses)
    , FDKPO = FacetDataKcharPO_old: (vdata, dataAct, Pols, eq, gr, IUCL, CLBF, statuses)
    then () = FDKPO.class_status := facet_statusu_regPO(G,FDKoldPO)
    in FDKPO

{.spherical unitarity data one simple factor at a time.}
set genSpherical(RealForm G) = [ FacetData ]:
for G0 in simple_factors(G) do sphericalK(G0) od


{.same as spherical using induced info.}
set spherical_ind(RealForm G) = FacetData:
    let dataIndInd = facet_statusu_ind(G)
    in spherical(G, dataIndInd)

{.same as spherical using induced info.}
{ set spherical_reg(RealForm G) = FacetData:
    let dataReg = facet_statusu_reg(G)
    in sphericalK(G, dataReg)}

set spherical_regPO(RealForm G) = [string]:
    let dataRegPO = facet_statusu_regPO(G)
    in spherical_testKPO(G, dataRegPO, default_tester@Param)

{set spherical_reg_test(RealForm G, (Param->bool) tester) = FacetData:
    let dataReg = facet_statusu_reg(G)
    in spherical_testK(G, dataReg, tester)}

set spherical_reg_testPO(RealForm G, (Param->bool) tester) = [string]:
    let dataRegPO = facet_statusu_regPO(G)
    in spherical_testKPO(G, dataRegPO, tester)

set spherical_reg_testPO_long(RealForm G, (Param->bool) tester) = FacetData:
    let dataRegPO = facet_statusu_regPO(G)
    then () = dataRegPO.class_status := spherical_testKPO(G, dataRegPO
    	      			     	, tester)
        in statuses_to_facets(G, dataRegPO)

set spherical_reg_PO_long(RealForm G) = FacetData:
    let dataRegPO = facet_statusu_regPO(G)
    then () = dataRegPO.class_status := spherical_testKPO(G, dataRegPO
    	      			     	, default_tester@Param)
        in statuses_to_facets(G, dataRegPO)

{ still need simple derived group }
{need vlist to match FPP_vertex_sets_indices}

set spherical_ind_test(RealForm G, (Param -> bool) tester) = FacetData:
    let dataInd = facet_statusu_ind(G)
    in spherical_test(G, dataInd, tester)

{
idea is in a session to say
  >> FILENAME write(FD)

Then in another session you can write
<< FILENAME
which will give you FacetData FD_saved, to which you can apply spherical.
}
set write(FacetData (vdata, FVI)) = void:
    prints("set FD_saved = FacetData:");
    prints(" let vlist_saved = ", vdata.list);
    prints("then FVI_saved = [[FacetStatusVertsIndex]]:",FVI);
    prints("in (to_vertex_data(vlist_saved),FVI_saved)")

set leq([Param] Plist) = (int i, int j) bool:
    HTA(Plist[i]) <= HTA(Plist[j])

{.given a list Plist of Params, sort it according to HTA.}
set HTA_sort([Param] Plist) = [Param]:
    let listSorter = [int]: sort(leq(Plist))(#Plist)
    in [Param]: for j:#Plist do Plist[listSorter[j]] od

set cohom_ind(KGBElt x) = KGPElt:
    let G=x.real_form, theta = x.involution
    then fund_wts=fundamental_weights(G)
    then fund_wt_lookup = index_in(fund_wts)
    then lambda = sum
        ( G.rank
	, for v in fund_wts
	  do if fund_wt_lookup(theta*v).< then [] else [v] fi
	  od.##
        )
    in parabolic_by_wt(lambda,x)

set hardKGB(RealForm G) = [KGBElt]:
     for x in KGB(G)
     do if cohom_ind(x).Levi = G then [x] else [] fi
     od.##

{.Meant to refer to a particular KGBElt x and a particular list of
FacetBary's FB[d]; (j,lr) means that there is a parameter (x,lr+rho,nu)
of infinitesimal character FB[d][j].}
set_type CandLambda = (int,vec)

{.The dth term of facet_barycenters is a complete list of barycenters of
d-dimensional facets. The dth term of candidate_lambdas is a list of
pairs (j,lr) so that the jth facet is represented at KGB_Elt
by lambda-rho = lr.}

set_type KGBFacets = (KGBElt KGB_elt, [[FacetBary]]
facet_barys, [[CandLambda]] cand_lambdas)

{.Find barycenters in FPP defining a good lambda for KGBElt x.}
{dth term in result lists which entries of FB[d][j] qualify, and gives
qualifying lambda0 = lambda-rho}

set goodFPP(KGBElt x, [[FacetBary]] FB) = KGBFacets:
    let rho = rho(x.real_form), th1 = 1+involution(x)
    in
    (x, FB, for FBd in FB
    do for v@j in FBd
       do
       case vec_solve(th1,th1*(v-rho))
       | else [(int,vec)]: [] {if no solns, this facet can't occur}
       | solution (lr): [(j,lr)]
       esac
       od.##
    od)

{. Meant to refer to a particular KGBElt x, a particular list of
FacetBary's FB[d], and the list comp_chars of elements of X*
representing chraacters of the component group of H(x).
(j,lr,v, [FacetStatus]) means that for each coordinate k@m of v, there is a
final hermitian parameter (x,lr+rho+comp_chars[k],nu) of infinitesimal
character FB[d][j], whose unitarity status is recorded by the mth
entry of [FacetStatus] .}
set_type CandLambdaTwistsStatus = (int x, vec lambda0 , vec
twists, [string] status)

{.Supplement KGBFacets by including list comp_chars of elements of X^*
representing all characters of component group of Cartan for KGB_elt;
then [[(vec,[string])]] recording for each cand_lambda (j,lr) a
twist_status (whose
entries index the twists of lr giving hermitian final Params, }

set_type KGBFacetsTwists = (KGBElt KGB_elt, [[FacetBary]]
facet_barys, [vec] comp_chars, [[CandLambdaTwistsStatus]] twist_statuses)

{.Find hermitian irrs with final param involving x, not good range
cohom induced.}
{Third coord of triple, list of elts of [0,2^n),  says which twists of lambda0
are allowed}
{cand_lambda_rho meant to come from goodFPP}

set non_cohom_herm(KGBFacets (x, FB,  CLs)) = KGBFacetsTwists:
    let all_d_zero = all_lambda_differential_0(x),
    rho=rho(x.real_form), theta = x.involution
    in (x, FB, all_d_zero,
    for CLsd@d in CLs
    do for (j,lr) in CLsd
       do let gamma = FB[d][j]
	  then twists = vec: for v@k in all_d_zero
	  do let p=parameter(x, lr+rho+v, gamma)
	  in
	  if not(is_zero(p)) and p.infinitesimal_character=gamma
	     and first_param(finalize(p)).x = x and is_hermitian(p)
	  then [k] else [] fi
	  od.##
	  in if #twists  > 0 then [(j,lr,twists, [string]: for k:#twists
	  do "?" od)] else [] fi
     od.##
    od)

{probably this is all unitary attached to x that are not cohom
induced}
set non_cohom_unitary(KGBFacetsTwists (x, FB, twists, CLTs)) =
(KGBElt,[vec],[[CandLambdaTwistsStatus]]):
    let rho = rho(x.real_form) in
    (x, twists,
    for CLTsd@d in CLTs
    do for (j,lr,which_twists, status) in CLTsd
       do let ustatus = for k@m in which_twists
	  do let p=parameter(x, lr+rho+twists[k], FB[d][j])
	  in
	  if is_unitary(p) then "T" else "F" fi
	  od
       in (j,lr,which_twists,ustatus)
       od
    od
    )

{NEED to figure out correct j in FPP_barycenters}
set non_cohom_unitary(KGBElt x) = (KGBElt,[vec],[[CandLambdaTwistsStatus]]):
    non_cohom_unitary(non_cohom_herm(goodFPP(x,
    FPP_barycenters(x.real_form,-1))))

{.goodFPP for all hard_KGB elements.}
set goodFPP(RealForm G, [[FacetBary]] FB) = [(KGBElt, [[CandLambda]])]:
    let hard_KGB = hardKGB(G) in
    for x in hard_KGB do let (,,CLs) = goodFPP(x, FB) in  (x,CLs) od


set non_cohom_herm(RealForm G, [[FacetBary]] FB, [(KGBElt,
    [[(int,vec)]])] cand_lambda_rho) = [(KGBElt,[vec],
		[[CandLambdaTwistsStatus]])]:
    let rho = rho(G) in
	for (x, CLs) in cand_lambda_rho
	do let (,,twists,candTws) =
	   non_cohom_herm(x,FB,CLs) in (x,twists,candTws) od

set non_cohom_unitary(RealForm G, [[FacetBary]] FB, [(KGBElt, [vec],
    [[CandLambdaTwistsStatus]])] candTw) = [(KGBElt,[vec],
    [[CandLambdaTwistsStatus]])]:
    for (x, twists, CLs) in candTw do non_cohom_unitary(x,FB,twists,
    CLs)  od

{NEED to work out correct FPP_barycenters}

set non_cohom_unitary(RealForm G) = [(KGBElt,[vec],
    [[CandLambdaTwistsStatus]])]:
    let FB =  FPP_barycenters(G,-1) in non_cohom_unitary(G, FB,
    non_cohom_herm(G, FB, goodFPP(G,FB)))

set non_cohom_unitaryFold(RealForm G) = [(KGBElt,[vec],
    [[CandLambdaTwistsStatus]])]:
    let FD = facet_data_fold(cofolded(G))
    then vlist = FD.v_data.list, FV = FD.facet_status_inds
    then FB = [[FacetBary]]:  for FVd in FV do for FVI in FVd do
    	 facet_bary(vlist, FVI.verts) od od
    in  non_cohom_unitary(G, FB, non_cohom_herm(G, FB, goodFPP(G,FB)))

set show(RealForm G, [[FacetBary]] FB,
[(KGBElt,[vec],[[CandLambdaTwistsStatus]])] candTW) = void:
    let rho = rho(G) in
    prints("Non-cohomologically induced unitary reps for ",G);
    for (x,twists,CLTs) in candTW
    do
    prints(new_line,x);
	for CLTsd@d in CLTs
	do
	    for (j,lr,which_twists,statuses) in CLTsd
	    do
		for k@m in which_twists
		do
		if statuses[m][0] = "T" then
		   prints(parameter(x, lr+rho+twists[k], FB[d][j]),
		   "  ",FB[d][j])
		fi
		od
	    od
	od
     od
{NEED correct j in FPP_barycenters}
set show_non_cohom_unitary(RealForm G) = void:
    let FB=FPP_barycenters(G,-1), NCU = non_cohom_unitary(G)
    in
    show(G, FB, NCU)

}
