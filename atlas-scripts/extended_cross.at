<basic.at
<extended_misc.at { for type ExtParam }
<extended_types.at { for ext_type_1@(int,ExtParam) }

{ this script defines the cross action by roots from the integrality datum
  associated to the (infinitesimal character of the) extended parameter in
  question, selected by (positive) root index in that integrality_datum
}

{ check that extended parameter |E| lies over cross image by |kappa| of |p| }
set test_ext_cross (Param p, {Weyl word} [int] kappa, ExtParam E) = void:
  assert(valid(E),"Invalid extended parameter");
  let w=W_elt(root_datum(p),kappa) then q=parameter(E), cross=cross(w,p) in
  if q!=cross then error("cross/ext_cross are not consistent: ",q," ",cross) fi

{ extended cross action in length 1 }
set ext_cross_1( int j
               , ExtParam(ic,delta,gamma,lambda,theta,g,l,omega,tau,t):E
               ) = ExtParam:
  let p=parameter(E)
  , (alpha, alpha_check) =
      let id=integrality_datum(ic,gamma) { DO NOT USE RootDatum:ic } in
      (root(id,j), coroot(id,j))
  then s_alpha    = 1 - column(alpha)*row(alpha_check)
  , s_alpha_check = 1 - column(alpha_check)*row(alpha) { = ^s_alpha }
  , ac_gamma = rat_as_int(alpha_check*gamma) { integral by construction }
  , g_alpha  = rat_as_int(g*alpha) { always integral by definition of g }
  , type = string: { one of: 1C+,1C-,1i1,1i2f,1i2s,1ic,1r1f,1r1s,1r2,1rn }
	     ext_type_1(delta,j,p)
  in
{ prints("type:", type); }
  let xq =
    if ((type="1C+") or (type="1C-"))
    then
      let new_lambda = { lambda +alpha* (<alpha_check, gamma-lambda>-1) }
	  s_alpha*lambda + alpha*(ac_gamma-1)
      , new_l = { l + (<g-l, alpha>-1)*alpha_check }
	  l*s_alpha + (g_alpha-1)*alpha_check
      , new_theta = s_alpha*theta*s_alpha
      , new_omega = s_alpha_check*omega*s_alpha_check
      , new_t = s_alpha*t
      , new_tau= tau*s_alpha
      in (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    elif (type="1i1")
    then (ic,delta,gamma,lambda,theta,g, l+alpha_check ,omega,tau,t)
    elif (type="1r2")
    then (ic,delta,gamma, lambda+alpha ,theta,g,l,omega,tau,t)
    else E { trivial cross action for types 1i2f,1i2s,1ic,1r1f,1r1s,1rn }
    fi
  in { test_ext_cross(p,[j],xq); } xq

{ extended cross action in length 2 }
set ext_cross_2( int j
               , ExtParam(ic,delta,gamma,lambda,theta,g,l,omega,tau,t):E
               ) = ExtParam:
  let p=parameter(E), rd=integrality_datum(E)
  then type = string: { 2C+,2C-,2Ci,2Cr,2i11,2i12,2i22,2r22,2r21,2r11,2rn,2ic }
    ext_type_2(delta,j,p)
  , simples = simple_roots(rd), cosimples = simple_coroots(rd)
{  then ()=prints("ext_cross_2 type is:", type) }
  then alpha=root(rd,j) , alpha_check=coroot(rd,j)
  , s_alpha       = reflection(rd,j)
  then
    s_alpha_check = ^s_alpha
  , (k,beta,beta_check) = { avoid staggering 3 more let-levels }
    let b = delta*alpha then k=root_index(rd,b) in (k,b,coroot(rd,k))
  then s_beta    = reflection(rd,k)
  then s_beta_check = ^s_beta
  , s_ab = s_alpha*s_beta { = s_beta*s_alpha }
  then s_ab_check = ^s_ab
  in
  if ((type="2C+") or (type="2C-")) then
    let new_lambda = { alpha_check*gamma = beta_check*gamma by delta-symmetry }
      ratvec_as_vec(s_ab*lambda+(alpha+beta)*(alpha_check*gamma-1))
    , new_l = { g*alpha = g*beta by delta-symmetry }
      ratvec_as_vec(l*s_ab+(g*alpha-1)*(alpha_check+beta_check) )
    , new_theta = s_ab*theta*s_beta*s_alpha
    , new_omega = s_ab_check*omega*s_ab_check
    , new_tau = s_ab*tau
    , new_t = t*s_ab
    then xq =
      (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    in test_ext_cross(p,[j,k],xq); xq
  elif (type="2Ci") then
    E { cross action not defined, but Cayley transform is! }
  elif (type="2Cr") then { alpha and beta have same effect, use only alpha }
    let new_lambda = ratvec_as_vec(s_alpha*lambda+alpha*(alpha_check*gamma-1))
    , new_l = ratvec_as_vec(l*s_alpha+(g*alpha-1)*alpha_check)
    , new_theta = s_alpha*theta*s_alpha
    , new_omega = s_alpha_check*omega*s_alpha_check
    , new_tau = ratvec_as_vec(s_alpha*tau+alpha*(alpha_check*(lambda-gamma)+1))
    , new_t   = ratvec_as_vec(t-(t*alpha+t*beta)/2*alpha_check)
    then xq =
      (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    in test_ext_cross(p,[j],xq); xq
  elif (type="2i11") then
{   prints("type 2i11"); }
    let new_lambda=lambda, new_l = l+alpha_check+beta_check
    , new_theta = s_ab*theta*s_beta*s_alpha
    , new_omega = s_ab_check*omega*s_ab_check
    , new_tau = tau, new_t = t
    then xq =
      (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_t,new_tau)
    in test_ext_cross(p,[j],xq); xq
  elif (type="2i12") then
{   prints("TYPE 2i12"); }
{   prints("alpha check:", alpha_check); }
    let new_lambda=lambda
    , new_l = l+alpha_check
    , new_theta = s_ab*theta*s_beta*s_alpha
    , new_omega = s_ab_check*omega*s_ab_check
    , new_tau = tau
{   , new_t = let s = solve(1+omega,alpha_check-beta_check)}
{ see Table 2 in twisted paper, case 2i12crx }
    , new_t = t -
       requisition("failure in cross action of type 2i12, solving for s")
       (solve(1+^theta,alpha_check-beta_check))
    then xq=
      (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    in { test_ext_cross(p,[j],xq); } xq
  elif (type="2r22") then
    let new_lambda=vec:lambda+alpha+beta
    , new_l = l
    , new_theta = s_ab*theta*s_beta*s_alpha
    , new_omega = s_ab_check*omega*s_ab_check
    , new_tau = tau
    , new_t = t
    then xq =
      (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    in test_ext_cross(p,[j,k],xq); xq
  elif (type="2r21") then
    let new_lambda = lambda+alpha
    , new_l = l
    , new_theta = s_ab*theta*s_beta*s_alpha
    , new_omega = s_ab_check*omega*s_ab_check
{    , new_tau = let zeta = solve(1+theta,alpha-beta) }
{ see Table 2 in twisted paper, case 2r21crx }
    , new_tau = tau -
       requisition("failure in cross action of type 2r21, solving for zeta")
       (solve(1+omega,alpha-beta))
    , new_t = t
    then xq =
      (ic,delta,gamma,new_lambda,new_theta,g,new_l,new_omega,new_tau,new_t)
    in test_ext_cross(p,[j],xq); xq
  else E
  fi


{ extenteded cross action not yet defined for length 3 cases }
set ext_cross_3(int j,ExtParam E) = ExtParam:
  let p=parameter(E) then type=ext_type_3(delta(E),j,p)
  in prints("ext_cross_3"); E { should be defined properly here! FIXME }

{ ext_cross_simple calls one of the ext_cross_i; it supposes that the
  root(integrality_datum(E),j) is actually among simple_roots(RootDatum(ic(E)).
  This function used to be called in all cases, but now it is called by
  nonintegral.at:ext_cross@(int,ExtParam) only in special cases (and
  after moving to a simple root), namely for types 2i11, 2i12, 2r22, and 2r21.
}
set ext_cross_simple (int j, ExtParam (ic,delta,,,,,,,,):E) =
    ExtParam:
( let p=parameter(E), l=ext_length(integrality_datum(E),delta,j) in
{ prints("length is:", l); }
  assert(is_fixed(delta,p),"Parameter is not fixed by delta")
; case l-1 { case statement requires value from 0 }
  in ext_cross_1(j,E)
  ,  ext_cross_2(j,E)
  ,  ext_cross_3(j,E)
  else error("wrong ext_length")
  esac
)
