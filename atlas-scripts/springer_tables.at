<nilpotent_orbits.at
<character_tables.at
<character_table_tensor.at

{tables encoding the Springer correspondence}

set_type [SpringerTable=
  (CharacterTable ct,
  [ComplexNilpotent] orbits,
  (ComplexNilpotent->ComplexNilpotent) dual_map,
  (ComplexNilpotent->ComplexNilpotent) dual_map_i,
  (ComplexNilpotent->int) springer,
  )]

set root_datum(SpringerTable st)=RootDatum: st.ct.root_datum
set root_datum_parent(SpringerTable st)=RootDatum: st.ct.root_datum_parent

{equality of normalized diagrams}
set equal([[int]] a,[[int]] b)=bool:
if #a != #b then false else
all(for i:#a do a[i]=b[i] od) fi

{ComplexNilpotent given by diagram}
set orbit_by_diagram([ComplexNilpotent] orbits,[vec] diagram)=ComplexNilpotent:
let index=first(for i:#orbits do equal(orbits[i].diagram_normalized,diagram) od) in orbits[index]

set orbit_by_diagram(SpringerTable st,[vec] diagram)=ComplexNilpotent:
orbit_by_diagram(st.orbits,diagram)

set orbit_by_diagram(RootDatum rd,[vec] diagram)=ComplexNilpotent:
let index=first(for i:#rd.orbits do equal(rd.orbits[i].diagram_normalized,diagram) od) in
rd.orbits[index]

set dual_orbit_by_diagram(SpringerTable st,[vec] diagram)=ComplexNilpotent:
let index=first(for i:#st.root_datum.dual.orbits do
equal(st.root_datum.dual.orbits[i].diagram_normalized,diagram) od) in
st.root_datum.dual.orbits[index]

{dual_map_i(dual_map(O))}
set special_closure(SpringerTable st,ComplexNilpotent O)=ComplexNilpotent:
orbit_by_diagram(st,st.dual_map_i(st.dual_map(O)).diagram_normalized)
set special_closure(SpringerTable st)=(ComplexNilpotent->ComplexNilpotent):(ComplexNilpotent O):special_closure(st,O)

{orbit is special if O=special_closure(O)}
set is_special(SpringerTable st,ComplexNilpotent O)=bool:
if is_even(O) then true else st.special_closure(O)=O fi

set is_special(SpringerTable st)=(ComplexNilpotent->bool): (ComplexNilpotent O):
is_special(st,O)

{all special orbits}
set special_orbits(SpringerTable st)=[ComplexNilpotent]:
##for O in st.ct.root_datum.orbits do if st.is_special(O) then [O] else [] fi od

{all special representations}
set special_representations(SpringerTable st)=[int]:
sort(for orbit in st.special_orbits do st.springer(orbit) od)

{complex nilpotent of product group}
set tensor(ComplexNilpotent O1,ComplexNilpotent O2)=ComplexNilpotent:
let (rd1,(),H1)=O1,(rd2,(),H2)=O2 in (rd1*rd2,(),H1##H2)

set factor(ComplexNilpotent O,RootDatum rd1,RootDatum rd2)=(ComplexNilpotent,ComplexNilpotent):
let H1=O.H[:rd1.rank] then
H2=O.H[rd2.rank~:] then
O1=(rd1,(),H1), O2=(rd2,(),H2) in
(O1,O2)

{
set factor_new(ComplexNilpotent O,RootDatum rd1,RootDatum rd2)=(
let diag_1=O.H*rd1.simple_roots then
diag_2=O.H*rd2.simple_roots in (diag_1,diag_2)
}

{write rd.derived as rd_1 x rd_2 where
rd_1 is semisimple, rd_2 is simple
also return [indices_1,indices_2]
where indices_i is the list of simple roots of rd in rd_i
}
set split_last_factor(RootDatum rd)=(RootDatum,RootDatum,[[int]]):
let factors=simple_factors(rd) then
rv=factors[0].derived then
()= for i:#factors-2 from 1 do rv*:=factors[i].derived od in
(rv,factors~[0].derived, [##for i:#factors-1 do simple_factor_indices(rd,i) od, simple_factor_indices(rd,#factors-1)])

{tensor product of springer tables
st1.root_datum can be anything semisimple,
st2.root_datum must be simple
}
set tensor(SpringerTable st1,SpringerTable st2)=SpringerTable:
let ct=tensor(st1.ct,st2.ct) then
rd1=st1.root_datum, rd2=st2.root_datum then
rd=rd1*rd2 then
orbits=
 ##for O1 in st1.orbits do
  for O2 in st2.orbits do
   tensor(O1,O2)
  od
 od
then factor_orbit(ComplexNilpotent O_0)=
 {O may be an orbit for G, not st.root_datum,
  need to identify O with an orbit for st.root_datum
  using diagram_normalized
  example:
  set G=([0,1,2,3,4,6],trivial(E7_s).x).Levi
  then G.root_datum and springer_table(G).root_datum are not the same
  set O=G.orbits[3]
  in orbit_by_diagram calls below, pass orbits (precomputed)
  rather than rd
 }
 let O=orbit_by_diagram(orbits,O_0.diagram_normalized) then
 (O1_0,O2_0)=factor(O,rd1,rd2) in
{ let ()=prints("O1_0:", O1_0, " ", O1_0.diagram_normalized) then
 ()=prints("O2_0:", O2_0, " ", O2_0.diagram_normalized) in}
 (orbit_by_diagram(st1,O1_0.diagram_normalized),orbit_by_diagram(st2,O2_0.diagram_normalized))
then dual_map(ComplexNilpotent O_0)=
 let O=orbit_by_diagram(orbits,O_0.diagram_normalized) then
 (O1,O2)=factor_orbit(O) in
 tensor(st1.dual_map(O1),st2.dual_map(O2))
then springer(ComplexNilpotent O_0)=int:
 let O=orbit_by_diagram(orbits,O_0.diagram_normalized) then
 (O1,O2)=factor_orbit(O) then
 i=springer(st1)(O1),j=springer(st2)(O2)
 in i*(st2.ct.n_classes)+j
then dual_map_i(ComplexNilpotent O_check)=
{O_check is for st.root_datum.dual,
not the same as rd.dual}
{st1: all but last factor of rd (n-1 factors)
 st2: last factor
 diagram: O_check.diagram_normalized, has n factors
 diagram_1: first n-1 factors of diagram
 diagram_2: last factor of diagram
 then st1.dual_map_i(O_check_1)
 st2.dual_map_i(O_check_2)
 tensor these two to get dual_map_i(O_check)
}
let diagram=O_check.diagram_normalized then
{()=prints("diagram: ", diagram) then}
diagram_1=[vec]:for i:#diagram-1 do diagram[i] od then
diagram_2=[vec]:[diagram~[0]] then
{()=prints("diagram_1: ", diagram_1) then
()=prints("diagram_2: ", diagram_2) then}
O1_check=dual_orbit_by_diagram(st1,diagram_1) then
O2_check=dual_orbit_by_diagram(st2,diagram_2) then 
{()=prints("O1_check: ", O1_check) then
()=prints("O2_check: ", O2_check) then}
 O1=st1.dual_map_i(O1_check), O2=st2.dual_map_i(O2_check) in
 tensor(O1,O2)
in (ct,orbits,dual_map,dual_map_i,springer)

set show_old(SpringerTable st)=void:
let orbits=st.root_datum.orbits in
tabulate(["i","O","d(O)","dd(O)","pi","special"] #
 for O@i in orbits do
  let O_d=st.dual_map(O) then
  O_dd=st.dual_map_i(O_d) then
  special=st.is_special(O) then
  sigma_index=st.springer(O) in
  [i.to_string,O.diagram.to_string,O_d.diagram.to_string,O_dd.diagram.to_string,sigma_index.to_string,special.to_string]
 od)

set springer_inverse(SpringerTable st,int special_character_number)=ComplexNilpotent:
st.orbits[first(for i:#st.orbits do st.springer(st.orbits[i])=special_character_number od)]

set springer_inverse(SpringerTable st)=(int->ComplexNilpotent):(int j):springer_inverse(st,j)

set special_star(SpringerTable st,ComplexNilpotent O)=string:
if is_special(st,O) then "*" else "" fi

set special_star(SpringerTable st)=(ComplexNilpotent ->string):
(ComplexNilpotent O):special_star(st,O)


