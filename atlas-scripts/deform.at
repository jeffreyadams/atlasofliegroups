<basic.at
<polynomial.at { for type |i_poly| and function |eval| }
<convert_c_form.at { final part of unitarity computation }

{ this file defines commands that are equivalent to the |full_deform| command
  that is now built-in; it therefore serves mainly documentation (and
  historic) purposes, and should not be required for any other scripts. In
  fact we added some initial commands that mimic the methods |KL_sum_at_s|
  and |deformation_terms| that were already originally implemented directly in
  the library, and used through the |deform| atlas command, in order to show
  after the fact how this could have been done as an atlas script
}

{ this function is now obsolete, as |partial_KL_block| now condenses internally }
set compress { output from old |partial_KL_block| to a more useful form } (
    [Param] B, mat KL_mat, [i_poly] polys, vec stops, vec survivors, mat map) =
  ([Param], mat, [int]): { $(block,((-1)^l(y/s)*P_{x,y}[q:=-1],lengths)$ }
  let polys_at_minus_1 = for p in polys do eval(p,minus_1) od
  then KL_mat_at_minus_1 = mat: { matrix of polynomial evaluations at -1 }
    for col in KL_mat do for inx in col do polys_at_minus_1[inx] od od
  then
  reduced_KL_mat = mat: for j in survivors do map*KL_mat_at_minus_1[j] od
  , survivor_lengths = let l=0 in
    for s in survivors do while stops[l+1]<=s do l+:=1 od; l od
  in
  ( for i in survivors do B[i] od { block restricted to survivors }
  , { matrix of associated P polynomials, but evaluated at -1 and sign-twisted }
    for col@j in reduced_KL_mat
    do (vec:for e@i in col do minus_1^survivor_lengths[i]*e od)
       *minus_1^survivor_lengths[j]
    od
  , survivor_lengths { length mapping }
  )

set deformation_terms (Param p) = ParamPol:
  let (B,KL_mat,length) = ([Param],mat,vec):
    let (block,M,polys) = partial_KL_block(p:=normal(p))
    then l = vec: for q in block do q.length od, n=#block
    , p_1= for Q in polys do eval(Q,minus_1) od
    in
    ( block
    , for col@j in M
      do let lj=l[j] in
	 for entry@i in col do minus_1^(lj-l[i])*p_1[entry] od
      od
    , l
    )
  then nB=#B in
  if =nB or B~[0]!=p
  then null_module(p) { if |p| itself is not among survivors, return 0 }
  else { compute final column |acc| of |Q| matrix by solving linear system
         $P'*acc=e_p$ with $P'$ a matrix of Split, columns from |KL_sum_at_s| }
    let remainder = null(nB-1)#1 { start with standard basis vector for |p| }
    , solution=null(nB)
    , !opposite_parity=1-length~[0]%2 { opposite to that of |length(p)| }
    , !on_p = orientation_nr(p)
    in
    for q_ind : nB
    ~do let contrib=remainder[q_ind]*KL_mat[q_ind] in
      remainder -:= contrib
    ; if length[q_ind]%2=opposite_parity
      then solution +:= contrib
      fi
    od
  ; null_module(p)+
    for c@i in solution
    do { twist (1-s)*solution according to orientation numbers of its terms }
      let x=B[i] then (q,r)=(on_p-orientation_nr(x))\%2 in
      assert(=r,"odd orientation");
      (minus_1^q*c*one_minus_s,x) { we have |s^q*c*(1-s) = (-1)^q*c(1-s)| }
      { for the same reason we replaced |s| by |-1| in computations giving |c| }
    od
  fi

set deformation_terms_by_dual (Param p) = ParamPol:
  assert(p.is_final,"deformation requires a final parameter");
  let (block,KL_mat,P_polys) = partial_KL_block(p)
  , (full_block,start,dual_KL_mat,dual_polys) = dual_KL_block(p)
  then pol_eval =  for P in P_polys do eval(P,minus_1) od
  , dual_pol_eval = for P in dual_polys do eval(P,minus_1) od
  , l_sg = for q in block do minus_1^length(q) od
  , to_full = (int->int):
    let map = p.null_module + for q@i in full_block do (Split:(i,1),q) od
    in (int i) int: let c=map[block[i]] in assert(!=c,"absent"); c.int_part
  then P_mat = mat:
    for col@j in KL_mat do for e@i in col do l_sg[i]*l_sg[j]*pol_eval[e] od od
  , Q_mat = mat:
    for col in ^dual_KL_mat do for e in col do dual_pol_eval[e] od od
  , opposite_parity=1-length(p)%2 { opposite to that of |length(p)| }
  then solution = sum
    ( #block { size of vectors being summed (after conversion to matrix) }
    # for q@i in block
      do if length(q)%2=opposite_parity
	 then [ Q_mat[i.to_full,start]*P_mat[i] ]
	 else []
	 fi
      od.##
    )
  , !on_p = orientation_nr(p)
in null_module(p) +
   for q@i in block
   do { twist (1-s)*solution according to orientation numbers of its terms }
     ( orientation_nr_term(on_p,q)*solution[i]*one_minus_s , q )
   od

set deformation_terms_by_dual (Param p,int max_height) = ParamPol:
(  assert(p.is_final,"deformation requires a final parameter")
;  assert(p.height<=max_height,"height bound kills term to deform")
;  let (full_block,start,dual_KL_mat,polys) = dual_KL_block(p)
   then subset = [int]:
     for q@i in full_block do if q.height<=max_height then [i] else [] fi od.##
   , ev = for P in polys do eval(P,minus_1) od
   , Q_col = vec:[] { vector variable to be assigned below }
   then Q_mat = mat: { transpose, select rows/cols from |subset|, set $q:=-1$ }
     for i in subset
     do let col = vec: for j in subset do ev[dual_KL_mat[i,j]] od
     in if i=start then Q_col:=col else col fi { store the column for |p| }
     od
   , block = [Param]: for i in subset do full_block[i] od
   then signed_P_mat = { $(-1)^{l(x,y)}P_{x,y}[q:=-1]$ for $x,y$ in |block| }
      inverse(Q_mat)
   , lp_parity=p.length%2 { parity of length that is excluded below }
   then solution = vec:
      { compute more efficiently: |signed_P_mat*diagonal(odd_levels)*Q_col|,
        where |odd_levels=vec: for q@i in block do #q.length%2!=lp_parity| }
        subset := { reuse local variable, now for selecting odd levels }
           for q@i in block do if q.length%2=lp_parity then [] else [i] fi od.##
      ; (mat: signed_P_mat.n_rows # for j in subset do signed_P_mat[j] od)
       *(vec: for i in subset do Q_col[i] od)
  , !on_p = orientation_nr(p)
in null_module(p) +
   for q@i in block
   do { twist (1-s)*solution according to orientation numbers of its terms }
     ( orientation_nr_term(on_p,q)*solution[i]*one_minus_s , q )
   od
)

set_type
[ ReductionStatus = (void reducible | Param lower )
]

{ go to next reducibility point (move even if at reducibility point) }
set reduction_at (Param p) = ReductionStatus:
   let rp=(0/1)#reducibility_points(p)
in if rp~[0]=1 then reducible()
   else lower(p*rp~[0])
   fi

set next_down (Param p) = Param:
   let rp=(0/1)#reducibility_points(p)
in assert(rp~[0]=1,"Not a reducibility: "+p.to_string); p*rp~[1]

{ use |deformation_terms_by dual| for a full deformation, in which we try to
  group all successive deformations involving a same block together }
set deform_to_height (Param p,int max_height) = KTypePol:
(  assert(p.height<=max_height,"height bound kills term to deform")
;  let G=real_form(p)
   then !K_empty=null_K_module(G), !empty=null_module(G)
in { first ensure there is a potential deformation at |p| }
   case reduction_at(p)
      | lower(q): p:=q
      | reducible(): () { keep p }
      esac
;  let queue = ParamPol: p, result = KTypePol: K_empty, lower = ParamPol:empty
in while >#queue or
       if >#lower else false
       then set (queue,lower) := height_split(lower,height(first_param(lower)))
       ; true
       fi
   do { invariant of the loop: all terms in |queue| have potential deformation }
      let (c0,q):term = first_term(queue)
   in queue:= (queue next queue:=empty) - term
   ;  if =nu(q) then result := (result next result:=K_empty) + (c0,q.K_type)
      else lower:= (lower next lower:=empty) + (c0,next_down(q))
      fi
   ;  let terms = deformation_terms_by_dual(q,max_height)
   in for c@r in terms
      do case reduction_at(r)
         | reducible():
	    queue:= (queue next queue:=empty) + (c0*c,r)
         | lower(qq): { element of initial block, but no further deformation }
	    lower:= (lower next lower:=empty) + (c0*c,qq)
         esac
      od
   od
;  result
)

{ the original version of this file started here }

set d_verbose=false

{ if at reducibility point stay there, otherwise go to next lower one }
set weak_lower (Param p) = Param:
  let (x,lambda,gamma)=%p, rp=reducibility_points(p)
  then lim = #rp
  in param(x,lambda,gamma*if lim=0 then 0 else rp[lim-1] fi)

{ go to next reducibility point (move even if at reducibility point) }
set lower (Param p) = Param:
  let (x,lambda,gamma)=%p, rp=reducibility_points(p)
  then lim = let nrp=#rp in if nrp>0 and rp[nrp-1]=1/1 then nrp-1 else nrp fi
  in  param(x,lambda,gamma*if lim=0 then 0 else rp[lim-1] fi)

set deformation (Param p) = (Param,ParamPol): { deformed Param and new terms }
  (lower(p),deform(p)) { here |deform| may be replaced by |deformation_terms| }

set recursive_deform (Param p) = KTypePol:
  if d_verbose then prints("recursive_deform with:", p) fi;
  if not is_final(p) then error("improper parameter") fi;
  let empty=null_module(real_form(p)) in
  if d_verbose { choose verbose or non-verbose version of the function }
  then rec_fun full_def (Split sc,Param p) KTypePol:
	 { |sc| will simply scale the coefficients of resulting KTypePol }
    begin
      p := alcove_center(p);
      prints("full_def with: sc=", sc, ", p=", p, p.infinitesimal_character);
      assert(is_standard(p)
	    ,"non standard parameter encountered in deformation");
      let acc=empty, at_nu0=KTypePol: sc*(p.K_type) { fully deformed |p| } in
      for factor in reducibility_points(p)
      ~do
	let p_def=p*factor { next deformation of |p| }
	then def=deform(p_def) { bypass built-in |deform| here }
        in
	  prints("adding deformation term: p=", p_def, new_line,"adding:", def)
      ; acc+:=def
      od
    ; for k@q in acc { traverse the sum of the deformation terms spun off }
      do { apply |full_def| recursively to all those terms }
        at_nu0 +:= full_def(sc*k,q) { gather harvest from those deformations }
      od
    ; prints("full_def complete, result:",at_nu0)
    ; at_nu0
    end
  else rec_fun full_def (Split sc,Param p) KTypePol:
	 { |sc| will simply scale the coefficients of resulting KTypePol }
    begin
      p := alcove_center(p);
      assert(is_standard(p),"non standard parameter in deformation");
      let acc=empty, at_nu0=KTypePol: sc*(p.K_type) { fully deformed |p| } in
      for factor in reducibility_points(p)
      ~ { direction of deformation is down, towards 0; this is not essential }
      do acc+:=deform(p*factor) od
    ; for k@q in acc { traverse the sum of the deformation terms spun off }
      do at_nu0 +:= full_def(sc*k,q) od
    ; at_nu0
    end
  fi { apply that recursive function to the initial argument: } (1,p)

{ code that follows is adapted from hermitian.at to do unitarity computation
  in terms of the above functions rather than built-ins
}

set oriented_KL_sum (Param p) = ParamPol:
   let ori_nr_p = orientation_nr(p) in  null_module(real_form(p)) +
   for c@q in KL_sum_at_s(p) do (c*orientation_nr_term(ori_nr_p,q),q) od

{ untwisted |c_form_irreducible|, for efficiency; only used in equal rank case }
set c_form_irreducible (Param p) = KTypePol:
  let P=oriented_KL_sum(p), count=0 then nP=#P
  then
    f(Param p) = if count<11 or count%10=0 or nP-count<=10
                 then prints("Term ",count,": ",p)
		 fi; count+:=1; recursive_deform(p)
  in prints("Fully deforming ",nP," terms"); map(f, P)

{ utility: compute fixed and unfixed contributions to c-form on irreducible(p)
  no deformation is done, but orientation numbers are included;
  fixed contributions are already halved; for unfixed ones this needs to wait
}
set twisted_c_form_irreducible_contributions (Param p) =
    (ParamPol,ParamPol): { (fixed part, 2*unfixed part) }
  let G=p.real_form, ori_nr_p = orientation_nr(p)
  then fixed_terms=G.null_module, unfixed_terms=G.null_module
  in
  for c@q in (1+s)*KL_sum_at_s(p) + (1-s)*twisted_KL_sum_at_s(p)
  do if twist(q)=q
     then fixed_terms+:=(half(c)*orientation_nr_term(ori_nr_p,q),q)
     else unfixed_terms+:=(c*orientation_nr_term(ori_nr_p,q),q)
     fi
  od; (fixed_terms,unfixed_terms)

{ for now we do not have any script for the twisted deformation; use built-in }
set twisted_c_form_irreducible (Param p) = KTypePol:
( let (fixed,unfixed)=twisted_c_form_irreducible_contributions(p)
{ |1+s| divides |unfixed|, no need for |scale_extended|; take half at |nu=0| }
  , count=0
  then nf=#fixed
  then
    f(Param p) = if count<11 or count%10=0 or nf-count<=10
                 then prints("Term ",count,": ",p)
		 fi; count+:=1; twisted_full_deform(p)
  in prints("Fully twisted deforming ",nf," terms (",#unfixed," unfixed).")
; map(f,fixed)+half(unfixed.K_type_pol)
)

{.whether J(p) admits an invariant Hermitian form.}
set is_hermitian (Param p) = bool: equivalent(twist(p),p)

set check_hermitian (Param p) = void:
  assert(p.is_hermitian
        ,"Irreducible module does not admit any invariant Hermitian form"
	)
set hermitian_form_irreducible (Param p) = KTypePol:
  if is_equal_rank(real_form(p))
  then c_form_irreducible(p) { not twisted, in equal rank case this is faster }
  else check_hermitian(p); twisted_c_form_irreducible(p)
  fi.convert_cform_hermitian

{ compute Hermitian form on p, and report if it is unitary }
set is_unitary (Param p) = bool:
  p.is_hermitian and hermitian_form_irreducible(p).is_pure
