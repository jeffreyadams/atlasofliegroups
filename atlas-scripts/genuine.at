<basic.at
<torus.at { for torus@(int,int,int) }
<hermitian.at { for hermitian_form_irreducible@Param }

set is_positive (KTypePol P) = bool:
  all(for c@P in P do let (a,b)=%c in a>=0 and b>=0 od)

{ all coefficients a+bs in a ParamPol have a,b\ge 0 }
set is_positive (ParamPol P) = bool:
  all(for c@P in P do let (a,b)=%c in a>=0 and b>=0 od)

{ make first coefficient have a>0 or a=0, b>0 }
set coeff_normalize(KTypePol P) = KTypePol:
  if #P=0 then P
  else let (w,)=first_term(P) then (a,b)=%w in
   if a<0 or (a=0 and b<0) then -P else P fi
  fi

set coeff_normalize(ParamPol P)=ParamPol:
  if #P=0 then P
  else let (w,)=first_term(P) then (a,b)=%w in
   if a<0 or (a=0 and b<0) then -P else P fi
  fi

set is_positive_or_negative(ParamPol P)=bool:
  is_positive(coeff_normalize(P))

set test_positive (KTypePol P) = (KTypePol,bool):
  let badterms=null_module(P) +
    for c@p in P
    do let (a,b)=%c in if a<0 or b<0 then [(c,p)] else [] fi
    od.##
  in (badterms,=badterms)

set test_positive_or_negative (KTypePol P) = (KTypePol,bool):
  test_positive(coeff_normalize(P))

{ assume all params are K-types representing standardrepKs; write up to height
  bound as sum of actual K-types (irreducible representations of K)
  then: all coefficients a+bs have a,b\ge 0. In other words, this is a
  sum of standardrepks which give the actual K-types of a representation
  (not just a virtual representation), at least up to the given height
}
set is_genuine (KTypePol P, int height_bound) = bool:
  is_positive(branch(P,height_bound))

set test_genuine(KTypePol P, int height_bound) = (KTypePol,bool):
  test_positive(branch(P,height_bound))

{ on jeff branch use hermitian_form_normalized, but on master branch
  this doesn't exist. Temporarily (until merge jeff->master) add this
  command.
}
set hermitian_form_irreducible_normalized = (Param->KTypePol):
  hermitian_form_irreducible@Param

{ test hermitian form on irreducible is genuine }
set is_hermitian_form_irreducible_genuine (Param p,int height_bound) = bool:
  is_genuine(hermitian_form_irreducible_normalized(p),height_bound)

set test_hermitian_form_irreducible_genuine (Param p,int height_bound)=
    (KTypePol,bool):
  test_genuine(hermitian_form_irreducible_normalized(p),height_bound)
