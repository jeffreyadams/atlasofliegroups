<misc.at
<matrix.at

<misc.at

{structure constants for the Lie algebra
following Lusztig, via [Geck]:
"On the construction of semisimple Lie algebras and Chevalley groups" 2017
see structure_constants.pdf
}

{m_\pm defined as in [Geck]}
set m_plus(RootDatum rd,vec alpha, vec beta)=int:let (p,)=root_string(rd,alpha,beta) in p+1
set m_minus(RootDatum rd,vec alpha, vec beta)=int:let (,q)=root_string(rd,alpha,beta) in q+1

set m_plus(RootDatum rd)=((vec,vec)->int):(vec alpha,vec beta):m_plus(rd,alpha,beta)
set m_minus(RootDatum rd)=((vec,vec)->int):(vec alpha,vec beta):m_minus(rd,alpha,beta)

{f:simple roots -> \pm 1 satisfying f(alpha)f(beta)=-1 if
(distinct) roots alpha,beta are non-orthogonal
 there are exactly two such functions
}

set orientation_function(RootDatum rd)=(int ->int):(int index):
let n=rd.ss_rank then
v=null(n) in
v[0]:=1;
while =product(v) {repeat until all coordinates are pm 1} do
 let new=(-1,-1) in
 while(new =(-1,-1) do
  for i:n do for j:n do
   {find (i,j) so v[i]=\pm 1, v[j]=0, <alpha_i,alpha_j^v>\ne 0}
  if !=v[i] and v[j]=0 and simple_roots(rd)[i]*simple_coroots(rd)[j] !=0 then new:=(i,j) fi od od) od;
 let (x,y)=new in v[y]:=-v[x]
od;if index>=0 and index<n then v[index] else 0 fi

{data type for structure constants for a Lusztig basis,
 i.e. satisfying the conditions in [Geck,Section 4]
 table: rows/columns <-> (all) roots
 alpha,beta entry is N(alpha,beta)
 where N(alpha,beta)=0 if alpha+beta is not a root
  (including the case beta=-alpha)
 and [X_alpha,X_beta]=N(alpha,beta)X_{alpha+beta}
 if alpha+beta is a root
}

set_type StructureConstantTable=
(RootDatum root_datum,
(int->int) orientation_function,  {mapping [0,...,n-1] to \pm 1}
mat table  
)

{Table has given orientation function, -> epsilon
epsilon is a map taking \pm simple root to \pm 1
epsilon(alpha)=orientation_function(simple_root_index(alpha)) if alpha is simple
and epsilon(alpha)=-epsilon(-alpha) for -alpha simple
}
set epsilon(StructureConstantTable T)=(vec->int):(vec alpha):
assert(is_simple_root(T.root_datum,alpha) or is_simple_root(T.root_datum,-alpha),"not \pm a simple root");
if is_posroot(T.root_datum,alpha) then T.orientation_function(T.root_datum.simple_root_index(alpha))
else -T.orientation_function(T.root_datum.simple_root_index(-alpha)) fi

{look up value of N(alpha,beta) in table
 note that lookup is by vec alpha,beta, not int}
set lookup(StructureConstantTable T)=((vec, vec)->int):(vec alpha,vec beta):
if T.root_datum.not_a_root(alpha) or T.root_datum.not_a_root(beta) then 0 else
T.table[T.root_datum.all_root_index(alpha),T.root_datum.all_root_index(beta)] fi

{synonym for lookup}
set N(StructureConstantTable T)=((vec,vec)->int):(vec alpha,vec beta):T.lookup(alpha,beta)

{update one entry of the table}
set update(StructureConstantTable T)=((vec, vec,int)->StructureConstantTable):(vec alpha,vec beta,int n):
let table=T.table in
table[T.root_datum.all_root_index(alpha),T.root_datum.all_root_index(beta)]:=n;
(T.root_datum,T.orientation_function,table)

{initialize table for rd, fill in all N(alpha,beta) with ht(alpha)=1,
 using given orientation function
}
set initialize_structure_constant_table(RootDatum rd,(int->int) orientation_function)=StructureConstantTable:
let roots=rd.roots then
table=null(#roots,#roots) then
T=(rd,orientation_function,table) in
for alpha in rd.simple_roots do {fill in N(alpha,beta) for alpha simple, all beta}
 for beta in roots do
 if is_root(rd,alpha+beta) then
  T:=T.update(alpha,beta,T.epsilon(alpha)*T.root_datum.m_minus(alpha,beta))
 fi
 od
od;
for alpha in rd.simple_roots do  {fill in N(alpha,beta) for -alpha simple, all beta}
 for beta in roots do
 if is_root(rd,-alpha+beta) then
  T:=T.update(-alpha,beta,T.epsilon(-alpha)*T.root_datum.m_minus(alpha,-beta))
 fi
 od
od;T

{use the default orientation function}
set initialize_structure_constant_table(RootDatum rd)=StructureConstantTable:
initialize_structure_constant_table(rd,rd.orientation_function)

{assuming all the necessary terms are already in the table, compute a new term}
set compute_structure_constant(StructureConstantTable T,vec alpha,vec beta)=int:
let new=
if T.root_datum.not_a_root(alpha+beta) then 0
 else
 let phi=simple_root_summand(T.root_datum,alpha) then
 psi=alpha-phi in
 assert(is_root(T.root_datum,psi),"psi is not a root?");
 if (phi != -beta) and (psi != -beta) then
{ prints("looking up:",phi,psi,beta,psi+beta);}
  rat_as_int(
             (1/T.lookup(phi,psi))*
             (T.lookup(psi,beta)*T.lookup(phi,psi+beta)-T.lookup(phi,beta)*T.lookup(psi,phi+beta))
            )

elif phi=-beta then
{   prints("looking up 2:",phi,psi,beta,psi+beta);}
  rat_as_int(
             (1/T.lookup(phi,psi))*
             (T.lookup(psi,beta)*T.lookup(phi,psi+beta)+(-1)^(T.root_datum.height(phi))*(psi*coroot(T.root_datum,phi)))
            )

else { psi=-beta then }
{     prints("looking up 3:",phi,psi,beta,psi+beta);}
  -rat_as_int(
              (1/T.lookup(phi,psi))*
	      ((-1)^(T.root_datum.height(psi))*phi*coroot(T.root_datum,psi)+T.lookup(phi,beta)*T.lookup(psi,phi+beta))
	     )
 fi
fi
{in prints("new=",new);}
in new

{assuming N(alpha,beta) is computed for all height(alpha)<m, all beta,
compute for all height(alpha)=m}
set update_structure_constant_table(StructureConstantTable T,int height)=StructureConstantTable:
for alpha in roots_of_height(T.root_datum,height) do
 for beta in T.root_datum.roots do T:=T.update(alpha,beta,compute_structure_constant(T,alpha,beta))
 od
od;
T

{starting with initialized table, fill completely}
set fill_structure_constant_table(StructureConstantTable T)=StructureConstantTable:
for i:T.root_datum.max_height-1 from 2 do T:=update_structure_constant_table(T,i) od;T

set structure_constant_table(RootDatum rd)=StructureConstantTable:
fill_structure_constant_table(initialize_structure_constant_table(rd))

{return [[X_alpha,X_beta],X_gamma] + [[X_beta,X_gamma],X_alpha] + [[X_gamma,[X_alpha,X_beta]]}
set jacobi_formula(StructureConstantTable T)=((vec,vec,vec)->(vec)):(vec alpha, vec beta, vec gamma):
let N=T.N then
rd=T.root_datum in
if alpha=beta or alpha=gamma or beta=gamma then null(#rd.roots) {trivial identity}
elif alpha = -beta then
 let rv=[
 {let ()=prints(N(beta,gamma)*N(alpha,beta+gamma)) in} N(beta,gamma)*N(alpha,beta+gamma),
 gamma*coroot(rd,alpha)*(-1)^(rd.height(alpha))*(-1),
 N(gamma,alpha)*N(beta,gamma+alpha)] in {prints("alpha=-beta:", rv);}rv
elif alpha = -gamma  then
 let rv=
 [N(beta,gamma)*N(alpha,beta+gamma),
 N(alpha,beta)*N(gamma,alpha+beta),
 beta*coroot(rd,alpha)*(-1)^(rd.height(alpha))] in {prints("alpha=-gamma:", rv);}rv
elif beta = -gamma  then
 let rv=
 [alpha*coroot(rd,beta)*(-1)^(rd.height(beta))*(-1),
 N(alpha,beta)*N(gamma,alpha+beta),
 N(gamma,alpha)*N(beta,gamma+alpha)] in {prints("beta=-gamma:", rv);}rv
else
 let rv=
 [N(beta,gamma)*N(alpha,beta+gamma),
 N(alpha,beta)*N(gamma,alpha+beta),
 N(gamma,alpha)*N(beta,gamma+alpha)] in {prints("none:", rv);}rv
fi

{test all Jacobi identities for X,Y,Z root vectors
see jacobi@StructureConstantTable in brackets.at for a more complete test
}
set jacobi_structure_constants_identity(StructureConstantTable T)=bool:
let rd=T.root_datum then
rv=true then
 roots=rd.roots in
for a in roots do
 for b in roots do
  for c in roots do
   let x=T.jacobi_formula(a,b,c) in
    if not =x then  rv:=false;
  prints(a,b,c," ",x, b-a, " ", b+a) fi
od od od;rv

set jacobi_structure_constants_identity(RootDatum rd)=bool:jacobi_structure_constants_identity(rd.structure_constant_table)

{extract rows/columns given by S=[int]}
set sub_table(StructureConstantTable T,[int] S)=mat:
principal_submatrix(T.table,S)

{extract rows/columns given by S=[vec]}
set sub_table(StructureConstantTable T,[vec] S)=mat:
sub_table(T, for v in S do T.root_datum.all_root_index(v) od)