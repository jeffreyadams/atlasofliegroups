< basic {for required_solution, etc.}
< ratmat {for ratmat}
< induction {for theta-stable parabolics}
< hermitian {for is_unitary}
< to_ht {for is_unitary_to_ht}
< FPP_facetsDirac {for herm_center}
< weak_packets {for unipotent_representations}
< derived_cover {to pass simple factors to derived simple factors}
{placed in hermitian.at, where it belongs.}
{all root data live on same Z^n}
{The jth [int] sigmaj is the map of simple roots for the jth little_rd into simple roots for G.}
set resorted([RootDatum] little_rds, RootDatum rd) = [[int]]:
    for little_rd in little_rds
    do for alpha@j in little_rd.simple_roots
	  do find_vec(alpha,rd.simple_roots)
	  od
       od

{ND stands for non-derived: just use simple factors as Levis in G}
{ lists real and/or complex simple factors }
{warning: simple roots may be ordered differently in simple_factors than in G. Example
is G = SO(2) x SO(6): simple roots (0,1,2) for G become (1,0,2) in simple_factors(G)[0]}
set simple_factors(RealForm G) = [RealForm]:
    let delta=G.distinguished_involution, tf=KGB(G,0).torus_factor,
	simpleFactors = simple_factors(RootDatum: G),
	Factors = [RealForm]:[]
{need to provide the permutation of the simple roots in}
    in
    for rd@i in simpleFactors
    do
    let root = simple_roots(rd)[0]
    then newRoot = delta*root
    then simpleRootIndex = simple_root_index(G,root),
	 newSimpleRootIndex = simple_root_index(G,newRoot)
    then diagram = diagram_component(G,simpleRootIndex),
	 newDiagram = diagram_component(G,newSimpleRootIndex)
    in  if diagram=newDiagram then Factors##:=
	 [real_form(inner_class(rd,delta), delta, tf)]
	 else if diagram[0] < newDiagram[0] then Factors##:=
	 [real_form(inner_class(sub_datum(G,diagram##newDiagram),
		delta), delta, tf)]
	      fi
	fi
    od; Factors

{projection from ratl coweight of G to coweight of S, respecting
values on roots of S}
set cowt_inclusions(RealForm G) = [(ratvec->ratvec)]:
    for S in simple_factors(G)
    do (ratvec->ratvec):
    (ratvec v) : sum(G.rank,
      for xi@j in fundamental_coweights(S) do (v*S.simple_roots[j])*xi od)
    od

{projection from ratl weight of G to ratl weight of S, respecting
values on roots of S}
set wt_projections(RealForm G) = [(ratvec->ratvec)]:
    for S in simple_factors(G)
    do (ratvec->ratvec):
    (ratvec gamma) : sum(G.rank,
      for xi@j in fundamental_weights(S) do (gamma*S.simple_coroots[j])*xi od)
    od

set factor_KGBs(KGBElt x) = [KGBElt]:
    let G = x.real_form
    then SF = simple_factors(G)
    in for S in SF {this is automatically a theta-stable Levi}
       do {inverse_embed_KGB(x, S) doesn't work}
       	  let (w,) = from_dominant(S, x.involution *S.two_rho)
       	  then winv = w.inverse
       	  in KGB_elt(S.inner_class, KGB(G,0).involution * winv,
       	     		torus_factor(x) {+G.rho_check - S.rho_check})
       od
 
{these cohom induce (on K level) to p, I think}
set factor_params(Param p) = [Param]:
    let PIs = wt_projections(p.real_form)
    in for xj@j in factor_KGBs(p.x)
       do parameter(xj, p.lambda - p.real_form.rho + xj.real_form.rho,
       	  		PIs[j](p.nu))
       od

{these comologically induce to mu (on K), I think}
set factor_K_types(KType mu) = [KType]:
    for xj@j in factor_KGBs(mu.x)
    do K_type(xj, mu.lambda_minus_rho)
    od

{these comologically induce to mu (on K), I think}
{x is supposed to be a fundamental fiber KGBElt}
set factor_K_types(KType mu, KGBElt x) = [KType]:
    for xj@j in factor_KGBs(x)
    do K_types(K_highest_weight_from_K0_weight(xj, K0_param(mu, x).lambda_minus_rho))[0]
    od


{WHY DON'T LKTs of factor_params match factor_K_types???}
{In changing nu can change KGBElt of final parameter}
{In SL(2), (2,[0],[1]) has x =2, but (2,[0],[0]) has TWO x's, 0 and 1.}

set derived_info(RealForm G) = (RealForm, mat):
    let (,M) = derived_info(G.root_datum)
    in (derived(G),M)

{ lists derived groups DS ofreal and/or complex simple factors S.
  Matrix M maps weights for S to weights for DS. Result is (S,DS,M)}
  {because of simple_factors, roots in S and DS can be ordered differently}
set derived_simple_factors_info(RealForm G) = [(RealForm,RealForm, mat)]:
    for S in simple_factors(G)
    do let (derS,M) = {derived_cover_real_form_info(S)} derived_info(S)
    then () = if Cartan_matrix(derS) != Cartan_matrix(S) then prints("S and derS permuted!") fi 
    in (S,derS,M)
    od

{projection from ratl coweight of G to coweight of DS, respecting
values on roots of S}
set derived_cowt_inclusions(RealForm G) = [(ratvec->ratvec)]:
    for (S,derS,M) in derived_simple_factors_info(G)
    do (ratvec->ratvec):
    (ratvec v) : sum(G.rank,
      for xi@j in fundamental_coweights(derS) do (v*S.simple_roots[j])*xi od)
    od

{projection from ratl weight of G to rational weight of DS, respecting
values on roots of S}
set derived_wt_projections(RealForm G) = [(ratvec->ratvec)]:
    for (S,derS,M) in derived_simple_factors_info(G)
    do (ratvec->ratvec):
       (ratvec gamma) : sum(derS.rank,
      for xi@j in fundamental_weights(derS) do (M*gamma*derS.simple_coroots[j])*xi od)
    od

{x is a KGBElt for G; want to pass to a KGBElt for each derived simple factor}
set derived_factor_KGBs(KGBElt x) = [KGBElt]:
    let derSF = derived_simple_factors_info(x.real_form)
    in for (S,derS,M) in derSF {this is automatically a theta-stable Levi}
       do {let Minv = right_inverse(M/1)}
       	  {let Minv_entries(int i, int j) = rat:
	      S.fundamental_weights[j][i]
	  then Minv = matrix((S.rank, DS.rank),Minv_entries)}
	  let derSsimp = derS.simple_roots
	  then DderS = det(derSsimp)
	  then Minv = required_solution(derS.simple_roots.^, DderS*S.simple_roots.^).^/DderS
	  then () = assert(let (N,,denom) = M*Minv in denom = 1 and N = id_mat(derS.rank),
	       	    	       "bad Minv in derived_factor_KGBs")
       	  then dertheta = ratmat_as_mat(M*x.involution*Minv)
       	  then derx = KGB_elt(derS.inner_class, dertheta, torus_factor(x)*Minv)
	  then derSprime = derx.real_form
	  {then tfshift = (KGB(DS,0).torus_factor - KGB(DSprime,0).torus_factor)/2}
	  {then () = assert(all(for alpha in DS.simple_roots do (tfshift*alpha).denom = 1 od),
	       	    "derived KGB is really bad")}
	  then () = derx := KGB(derS, KGB_elt(derS.inner_class, dertheta, torus_factor(x)*Minv).number)
	  in derx
       od

set derived_factor_params(Param p) = [Param]:
    let DSFinfo = derived_simple_factors_info(p.real_form)
    {let DPIs = derived_wt_projections(p.real_form)
    in}
    in for xj@j in derived_factor_KGBs(p.x)
       do let (,DS,M) = DSFinfo[j]
       	  in parameter(xj, M*(p.lambda_minus_rho) + DS.rho, M*p.nu)
         { replace M by DPIS[J]?? }
       od

{these comologically induce to mu (on K), I think}
set derived_factor_K_types_info(KType mu) = [(KType,mat)]:
    let DSFinfo = derived_simple_factors_info(mu.real_form)
    in for xj@j in derived_factor_KGBs(mu.x)
       do let (,,M) = DSFinfo[j]
       	  then muj = K_type(xj, M*mu.lambda_minus_rho)
	  in (muj,M)
       od

{these comologically induce to mu (on K), I think}
set derived_factor_K_types(KType mu) = [KType]:
    for (muj,) in derived_factor_K_types_info(mu)
    do muj
    od

{WHY DON'T LKTs of factor_params match factor_K_types???}
{In changing nu can change KGBElt of final parameter}
{In SL(2), (2,[0],[1]) has x =2, but (2,[0],[0]) has TWO x's, 0 and 1.}