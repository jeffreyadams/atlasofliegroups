<basic.at { for |factors@LieType }
<matrix.at

set A1="A1"
set A2="A2"
set A3="A3"
set A4="A4"
set A5="A5"
set A6="A6"
set A7="A7"
set A8="A8"
set B2="B2"
set B3="B3"
set B4="B4"
set B5="B5"
set B6="B6"
set B7="B7"
set B8="B8"
set C2="C2"
set C3="C3"
set C4="C4"
set C5="C5"
set C6="C6"
set C7="C7"
set C8="C8"
set D2="D2"
set D3="D3"
set D4="D4"
set D5="D5"
set D6="D6"
set D7="D7"
set D8="D8"
set E6="E6"
set E7="E7"
set E8="E8"
set F4="F4"
set G2="G2"

{------commands related to having a canonical Lie_type------}

set type_letters = string: "ABCDEFGT"

{ get index into |type_letters| }
set number_of(string type)=int:
   assert(#type=1,"not a single character");
   if type="T" then 7 else ascii(type)-ascii("A") fi

{ A structure to record LieType values ignoring permutation of factors.
  A matrix of size 16x8
  each column corresponds to a type A=0,B=1,C=2,D=3,E=4,F=5,G=6,T=7
  each row to the rank of a simple factor (one more than the row number)
  Each entry is non-negative, recording number of simple factors (type,rank)
  except that position [0,7] holds the central torus rank
}
set Lie_type_matrix(LieType lt) = mat:
(  let M=null(16,8) in
   for (type,rank) in simple_factors(lt) do M[rank-1,number_of(type)] +:= 1 od
;  M[0,7] := central_torus_rank(lt)
;  M
)

set Lie_type_matrix(RootDatum rd) = mat: Lie_type_matrix(Lie_type(rd))
{Lie_type_matrix@RealForm is automatic}

{convert from matrix to LieType}
set Lie_type(mat M) = LieType:
   assert(shape(M)= (16,8),"Matrix is wrong shape");
   let lt=Lie_type("") {empty type} in
   for col@l in M do for m@i in col
   do for :m do lt:=extend(lt,type_letters[l],i+1) od { simple(l,i+1)^m }
   od od; lt

set standardize_Lie_type (LieType lt) = LieType: Lie_type(Lie_type_matrix(lt))

set nice_format (LieType lt) = string:
  if lt = "" then "e" {trivial group}
  else let coef(int m) = string: if m>1 then int_format(m) else "" fi in
     for column@j in Lie_type_matrix(lt)
     do for mult@i in column
        do if =mult then ""
	   else "+" + coef(mult) + type_letters[j] + int_format(i+1)
	   fi
	od.##
     od.##
     [1:]
  fi

set nice_format (RootDatum rd) = string: rd.Lie_type.nice_format

{types B2 and C2 are allowed, but not others
 such as C1, B1, D1,D2,D3,...
 so have to deal with B2=C2 as a special case
}
set normalize_Lie_type_matrix(mat M)=
assert(shape(M)= (16,8),"Matrix is wrong shape");
M:=update_matrix_entry(M,1,1,M[1][1]+M[2][1]);
M:=update_matrix_entry(M,2,1,0);
M

{two complex groups are locally isomorphic iff they have the same
(normalized) Lie_type_matrix}
set is_locally_isomorphic(RootDatum rd_1,RootDatum rd_2)=bool:
normalize_Lie_type_matrix(Lie_type_matrix(rd_1))=
normalize_Lie_type_matrix(Lie_type_matrix(rd_2))

set Cartan_matrix_type(RootDatum rd)=(LieType,[int]):Cartan_matrix_type(rd.Cartan_matrix)

set simple_type(LieType lt)=(string,int):
assert(lt.is_simple,"LieType is not simple");
let letters=["A","B","C","D","E","F","G"] then
col=first(7,(int i):!=lt.Lie_type_matrix[i]) in (letters[col],lt.rank)

set simple_type(RootDatum rd)=(string,int):simple_type(rd.Lie_type)