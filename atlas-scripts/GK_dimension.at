<basic.at
<tensor_product.at { |dimension@ParamPol| }

{ largest k so that b^k<=n }
{sum of dimensions of K-types up to given height}
set dim_K_types_std_upto (Param p, int n) = int: dimension(branch_std(p,n))

{terms of ParamPol of height <=n (with multiplicity)}
set truncate (ParamPol P, int n) = ParamPol:
   null_module(P.real_form) +
   for c@p in P do (if height(p)<=n then c else 0 fi,p) od

{terms of ParamPol of height =n (with multiplicity)}
set slice (ParamPol P, int n)=
   null_module(P.real_form) +
   for c@p in P do (if height(p)=n then c else 0 fi,p) od

{estimating GK dimension of module X
X_n=K-types of height <=n}
{dim(X_n)= cn^d  d=GK-dimension
 dim(X_2^n)= c2^dn
 dim(X_2^(n-1))= c2^d(n-1)
 dim(X_2^n)/ dim(X_(2^(n-1))
 dim(X_2^n)/X_x^(n-1))= c2^dn/c2^d(n-1)=2^d
 d=log_2(dim(X_2^n)/X_2^(n-1))
}


set rounded_log_2 (rat r) = int:
   let max_power_2(int n) = int:
      let count=0 in while n>=2 do n\:=2; count+:=1 od; count
in ((r^2).floor.max_power_2+1)\2

{ separate terms of |P| coarsely by height }
set sort_K_types_by_log_2_height (KTypePol P, int exp) = [KTypePol]:
   let result = let N=null_K_module(P.real_form) in
       for :max(exp,rounded_log_2(height(P)))+1 do N od
in for a@p in P do result[rounded_log_2(height(p))] +:= a*p od; result

{estimate GK dimension
 list[k]: KTypePol all terms with rounded_log_2(height)=k
 estimate: log_2(dim(list[k+1])/dim(list[k])
}
set growth ([KTypePol] list)= [int]:
(   let n=#list-1, v=for P in list do dimension(P) od
in prints("v=",v)
;  prints("k=0,...,",n,":")
;  prints("height up to: 2^",n,"=",2^n)
;  prints("a_k=dimension of K-types up to height 2^k")
;  prints("b_k=dimension of K-types up to height 2^(k-1)",new_line)
;  for k:#v
   do let a=max(sum(v[:k+1]),1), b=max(sum(v[:k]),1)
      then exponent = rounded_log_2(a/b)
   in ("k=", k, " 2^k=",2^k, new_line
      , "(a,b)=(",a,",",b,")", new_line
      , "a/b=", with_decimals(3)(a/b), new_line
      , "rate:",exponent,new_line
      ,"------------"
      ).prints
   ;  exponent
   od
)

{estimate growth of standard module up to height 2^n}
set growth_std (Param p, int n) = [int]:
   let P=branch_std(p,2^n) then Q=sort_K_types_by_log_2_height(P,n) in growth(Q)

{estimate growth of irreducible module up to height 2^n}
set growth_irr (Param p, int n) = [int]:
   let P=branch_irr(p,2^n) then Q=sort_K_types_by_log_2_height(P,n) in growth(Q)
