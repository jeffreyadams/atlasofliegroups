{ This file is to be loaded before anything else if it is used at all.
  It's purpose is to replace all old functionality that requires or transforms
  Param values to have dominant infinitesimal character; the replacement will be
  by code based on the built-ins cross@(vec,Param) and Cayley@(vec,Param) that
  only require integral dominance, and which moreover conjugate rather than
  transform to that situation
}

forget cross@(int,Param)
forget Cayley@(int,Param)

set old_block = block@Param
forget block@Param

{ some defintions from basic.at are needed here, but it will not yet be loaded }
set assert (bool b,string message) = void: if not b then error(message) fi
set sum ([int] r) = int: let s=0 in for a in r do s+:=a od; s
set none ([bool] p) = bool:
  for x in p do if x then return false fi od; true
set first ([bool] p) = int: for x@i in p do if x then return i fi od; -1
set x_nr (Param p) = int: let (x,,) =%p then (,n) = %x in n
set integrality_datum (Param p)= RootDatum:
  integrality_datum(p.real_form, let (,,gamma)=%p in gamma)

set cross(int s,Param p) = Param:
  let id = integrality_datum(p) in cross(root(id,s),p)

set Cayley(int s,Param p) = Param:
  let id = integrality_datum(p) in Cayley(root(id,s),p)

set block (Param p) = ([Param],int):
  let id = integrality_datum(p)
  , tab = [[Param]]: for i:KGB_size(real_form(p)) do [] od
  , queue = [p]
  then !sr = simple_roots(id)
  in
begin
  let done=0 in
  while #queue>done
  do let cur = queue[done].print next done+:=1
     then n=x_nr(cur).print then t=tab[n]
  in if for q in t do q=cur od.none
     then tab[n]:=t#cur
     ; for alpha in sr
       do queue#:=cross(alpha,cur); queue#:=Cayley(alpha,cur)
       od
     fi
  od
; let res = ##print(tab)
    , p_pos = let n=x_nr(p) in
              for t in tab[:n] do #t od.sum + for q in tab[n] do q=p od.first
  in assert(#res = (let (B,)=old_block(p) in #B),"wrong size block")
  ; (##tab,p_pos)
end
