<basic.at
<sort.at { for inv_standardisation }
<extended.at { for E@(mat,Param,ratvec) }
<extended_cayley.at { for ext_Cayley }
<nonintegral.at { for ext_cross }
<polynomial.at { for polynomial arithmetic }

set_type KGB_pair = (KGBElt x, KGBElt_gen y)
{ Parameters and extended parameters are parametrized by pairs (x,y)
  x is a KGB element and y is a *generalized* KGB element, y^2 not necessarily
  central. See end of synthetic.at for KGBElt_gen
}


{ equality of pairs of KGB elements }
set = (KGB_pair(x,y), KGB_pair(z,w) ) = bool: x=z and y=w
set != (KGB_pair(x,y), KGB_pair(z,w)) = bool: x!=z or y!=w

{ y_gen=(ic,omega,psi), psi\in X^*(H)_Q is dual torus factor, made to be
  omega-fixed. Compare definition to x@entended_param from extended_misc.at,
  which implies that torus_factor(x(E))=(g-l-rho_check(ic))*(1+theta)/2
}
set y_gen(ExtParam(ic,,gamma,lambda,,,,omega,,)) = KGBElt_gen:
  (dual(ic),omega,(gamma-lambda-rho(ic))*(1+omega)/2)

{ this computes y_gen(E@(mat,Param,ratvec)(.,p,.)) without the unused stuff }
set y_gen (Param p) = KGBElt_gen:
  let ic=inner_class(p), (x,lambda_rho,gamma)=%p { vec lambda_rho: lambda of E }
  then theta=involution(x)
  { dual tf : gamma-lambda(p) ($-\theta$-fixed) where lambda(p)=lambda_rho+rho }
  in (dual(ic),-^theta,gamma-(lambda_rho+rho(ic)))


{ Some purely administrative support functions }

{ index((x,y,list_of_pairs) :
  index of (x,y) in [(x_i,y_i)], return -1 if not found
}
set index (KGB_pair xy, [KGB_pair] xy_pairs) = int:
  let i=#xy_pairs-1 in  while i>=0 and xy_pairs[i]!=xy do i -:= 1 od; i

{ look for pair (x,y) in array [(x_i,y_i)] (bool) }
set find_pair( (KGB_pair,[KGB_pair]) p) = bool:
  index(p)>=0

{ add pair (x,y) to list if not already there }
set add_pair( KGB_pair xy, [KGB_pair] xy_pairs) = [KGB_pair]:
  if index(xy,xy_pairs)>=0 then xy_pairs else xy_pairs#xy fi

{ index(E,list_of_pairs) = index(x(E),y(E),list_of_pairs) }
set index( ExtParam Ep, [KGB_pair] xy_pairs) = int:
  index((x(Ep),y_gen(Ep)),xy_pairs)

{ index(p,list_of_pairs)=index(x(p),y(p),list_of_pairs)
  not used
set index(Param p,[KGB_pair] xy_pairs) = int:
  index((x(p),y_gen(p)),xy_pairs)
}



{ compute all other |ExtParam| values you can get to by applying a
  single Cayley transform or cross action to a given extended parameter
}
set neighbors(int j, ExtParam Ep) = [ExtParam]:
  let type=ext_type(j,Ep) in
{ prints("Ep in neighbors: ",format(Ep)); }
{ prints("type in neighbors: ", type); }
  if   type="1C+" then [ext_cross(j,Ep)]
  elif type="1C+" then [ext_cross(j,Ep)]
  elif type="1C-" then [ext_cross(j,Ep)]
  elif type="1i1" then [ext_cross(j,Ep),ext_Cayley(j,Ep)[0]]
  elif type="1i2f" then ext_Cayley(j,Ep)
  elif type="1i2s" then []
  elif type="1ic" then []
  elif type="1r1f" then ext_Cayley(j,Ep)
  elif type="1r1s" then []
  elif type="1r2" then [ext_cross(j,Ep),ext_Cayley(j,Ep)[0]]
  elif type="1rn" then [ext_cross(j,Ep),ext_Cayley(j,Ep)[0]]
  elif type="1r1s" then []
  elif type="2C+" then [ext_cross(j,Ep)]
  elif type="2C-" then [ext_cross(j,Ep)]
  elif type="2Ci" then ext_Cayley(j,Ep)
  elif type="2Cr" then ext_Cayley(j,Ep)
  elif type="2i11" then [ext_cross(j,Ep),ext_Cayley(j,Ep)[0]]
  elif type="2i12" then ext_cross(j,Ep)#ext_Cayley(j,Ep)
  elif type="2i22" then ext_Cayley(j,Ep)
  elif type="2r22" then [ext_cross(j,Ep),ext_Cayley(j,Ep)[0]]
  elif type="2r21"
    then [ext_cross(j,Ep),ext_Cayley(j,Ep)[0],ext_Cayley(j,Ep)[1]]
  elif type="2r11" then ext_Cayley(j,Ep)
  elif type="2rn" then []
  elif type="2ic" then []
  elif type="3C+" then [ext_cross(j,Ep)]
  elif type="3C-" then [ext_cross(j,Ep)]
  elif type="3Ci" then ext_Cayley(j,Ep)
  elif type="3Cr" then ext_Cayley(j,Ep)
  elif type="3i" then ext_Cayley(j,Ep)
  elif type="3r" then ext_Cayley(j,Ep)
  elif type="3rn" then []
  elif type="3ic" then []
  else prints("type:", type);error("I must have missed a case")
  fi

{ see sort.at }
{ sort {x1,x2,...} by number of x }
set kgb_sort ([KGBElt] v) = [KGBElt]:
  for index in inv_standardisation(for x in v do #x od) do v[index] od

{sort [(x1,y1),...] by number of x }
set x_sort ([KGB_pair] v) = [KGB_pair]:
  for index in inv_standardisation(for (x,y) in v do #x od) do v[index] od


{ return [(x,y)] for the nodes connected to vertex by root j }
set xy_neighbors (int j,
  ExtParam(ic,delta,gamma,lambda,theta,g,l,omega,tau,t):E) =
  [KGB_pair]:
  for F in neighbors(j,E) do (x(F),y_gen(F)) od

{ xy_neighbors given by (j,delta,p,g) }
set xy_neighbors (int j, mat delta,Param p, ratvec g) = [KGB_pair]:
  xy_neighbors(j,E(delta,p,g))

{ block is parametrized by (x,y), so is the extended block
  (also need delta,gamma,g)
  (x,y) -> E(delta,x,y,gamma,g)
}

{ xy_neighbors given by (j,delta,gamma,x,g,y) }
{not used?}
{set xy_neighbors (
  int j, mat delta, ratvec gamma, KGBElt x, ratvec g,KGBElt_gen y) = [KGB_pair]:
  xy_neighbors(j, E(delta,gamma,x,g,y))
}

{ find xy neighbors of a list (j,delta,gamma,g,[(x1,y1),...] }
set xy_neighbors (
  int j, mat delta, ratvec gamma, ratvec g, [KGB_pair] xy_pairs) = [KGB_pair]:
  let rv=xy_pairs in
  for (x,y) in xy_pairs
  do
    for (z,w) in xy_neighbors(j,E(delta,gamma,x,g,y))
    do rv:=add_pair((z,w),rv) od
  od; rv

{ generate_subspace(i,j,delta,gamma,g,(x,y)) returns a Hecke invariant subspace
  (more precisely its spanning subset, represented as list) of space of
  extended parameters: all nodes you can get to by applying Hecke operators
  T_i and T_j to given node
}
set generate_subspace(
    int j, int k, mat delta, ratvec gamma, ratvec g, KGB_pair(x,y)) =
    [KGB_pair]:
begin
  let rv=[(x,y)], last=0 in
  while last<#rv { latest iteration made progress }
  do last := #rv { mark }
{ ; prints(); prints("calling xy_neighbors ", j, ", ", gamma, ", ", rv) }
  ; rv := xy_neighbors(j,delta,gamma,g,rv)
{ ; prints(); prints("calling xy_neighbors ", k, ", ", gamma, ", ", rv) }
  ; rv := xy_neighbors(k,delta,gamma,g,rv)
  od
; x_sort(rv)
end

{ generate_subspace is usually called this way: }
set generate_subspace (int i, int j, ExtParam E) = [KGB_pair]:
  generate_subspace((i,j,delta(E),gamma(E),g(E),(x(E),y_gen(E))))

{ same, but just a single Hecke operator; supply it twice (does little harm) }
set generate_subspace(
    int j, mat delta, ratvec gamma, ratvec g, KGB_pair p) = [KGB_pair]:
  generate_subspace(j,j,delta,gamma,g,p)

set generate_subspace (int i ,ExtParam E) = [KGB_pair]:
  generate_subspace(i,i,delta(E),gamma(E),g(E),(x(E),y_gen(E)))

{ decompose(i,j,delta,B,g) returns ([[KGB_pair]],int,[int])
  first argument is an array of subspaces,
  each subspace is a subspace from generate_subspace, the union of the elements
  of these subspaces is all KGB pairs (x,y) in fixed(delta,B)
  int is total size of fixed(delta,B)
  [int] is the array of sizes of the subspaces
}

set decompose (int i, int j, mat delta, [Param] B, ratvec g) =
  ([[KGB_pair]],int,[int]):
begin prints("Computing fixed parameters in block of size ", #B)
; let B_0=fixed(delta,B) in
  prints("Computed ", #B_0, " fixed parameters")
; let all = [KGB_pair]: for p in B_0 do (x(p),y_gen(p)) od in
  prints("computed basis of (x,y) pairs")

; let gamma=infinitesimal_character(B[0]), (x_0,y_0)=all[0]
  then first_subspace = generate_subspace(i,j,E(delta,gamma,x_0,g,y_0))
  then done=first_subspace
  in prints("Computed first subspace, of dimension ", #first_subspace)
; let subspaces=[first_subspace] then sizes=[#first_subspace], k=0 in
  while #done < #all
  do let (x,y)=all[k] in
    if find_pair((x,y), done) then k:=k+1
    else let subspace=generate_subspace(i,j,E(delta,gamma,x,g,y)) in
      prints("Computed subspace ", #subspaces, " of dimension ", #subspace)
    ; subspaces #:= subspace; sizes #:= #subspace; done ##:= subspace
    fi
  od
; (subspaces,#B_0,sizes)
end

{ given E=E(x,y,lambda,l,tau,t) and F=(x',y',lambda',tau',l't') related by 2i12
  compute the sign: coefficient of pi(F) in  T_kappa(\pi(E))
  using the new *conjectural* formula, for the old one see 2ign_2i12_old
  the conjecture is the following
  set s=sign(ext_Cayley(k,E)[0 or 1],F)
  set t=sign(ext_Cayley(k,F)[0 or 1],E)
  in each case the Cayleys of type 2i12/2r21 by root k are double valued,
    and one of them gives \pm the other argument
  then define
    sign_2i12(k,E,F)=1 if s=t=1 and -1 otherwise
  the idea is:
  there are 4 representations E_1,E_2 (more compact Cartan)
    and F_1,F_2 (more split)
  take these to be the default extended parameters
  for each pair (i,j) (i,j=1,2) there is a sign E_i --> F_j:
    whether \pm F_j occurs in the Cayley of E_i by root k (of type 2i12)
  and another sign F_i --> E_j:
    whether \pm E_j occurs in the Cayley of F_i by root k (of type 2r21)

  typically 7 of these are +, and 1 is minus

  then sign_2i12(k,E_i,F_j)=-1 if *either arrow gets a minus*, and 1 otherwise

  in SL(8,R) with p=spherical_principal_series(G,rho(G)/4)
  you get 6 pluses and 2 minuses
}

set sign_2i12 (int j, ExtParam E, ExtParam F) = int:
  let f (int j, ExtParam E, ExtParam F) = int:
    let c=ext_Cayley(j,E) in sign(c[0],F)+sign(c[1],F)
  in if f(j,E,F)=1 and f(j,F,E)=1 then 1 else -1 fi

{ given E=E(x,y,lambda_rho,l,tau,t) and F=(x',y',lambda_rho',tau',l't') related
  by 2i12, compute the sign: coefficient of pi(F) in  T_kappa(\pi(E))
  see "More on the 2i12, 2Ci and 1i cases" Proposition 1.13
}
set sign_2i12_old (int j,ExtParam E,ExtParam F) = int:
{ (ic_E,delta_E,gamma_E,lambda_E,theta_E,g_E,l_E,omega_E,tau_E,t_E):E,
  (ic_F,delta_F,gamma_F,lambda_F,theta_F,g_F,l_F,omega_F,tau_F,t_F):F))=int:
}
begin
  let id=integrality_datum(E) in
  let alpha=root(id,j) in
  let alpha_check=coroot(id,j) in
  let beta=delta(E)*alpha in
  prints("sign_2i12 alpha,beta=", alpha, ", ", beta)
; let k=root_index(id,beta) in
  let beta_check=coroot(id,k) in
  let (p,q)=(parameter(E),parameter(F)) in
  assert(valid(E),"E is not valid")
; assert(valid(F),"F is not valid")
; assert(ext_type(j,E)="2i12" and ext_type(j,F)="2r21","Wrong types")
; assert(q=Cayley_set(j,Cayley_set(k,p)[0])[0] or
         q=Cayley_set(j,Cayley_set(k,p)[0])[1]
        ,"q is not a 2i12 Cayley transform of p")
; let l_test_1=in_lattice((1+^theta(E)),l(F)-l(E)) in
  let l_test_2=in_lattice((1+^theta(E)),l(F)-l(E)+alpha_check) in
  let lambda_test_1=in_lattice((1+^omega(F)),lambda_rho(F)-lambda_rho(E)) in
  let lambda_test_2 =
    in_lattice((1+^omega(F)),alpha+lambda_rho(F)-lambda_rho(E)) in
  let kappa= if (l_test_2 and lambda_test_2) then -1 else 1 fi in
  let sigma = solve((1+^omega(F)),alpha-beta)
              .(requisition("can't solve for sigma sign_2i12")) in
  let tau=tau(E) in
  let tau_alpha_beta=tau*(alpha_check+beta_check) in
  let tau_0=
    ratvec_as_vec(tau+tau*beta_check*sigma-tau_alpha_beta/2*alpha) in
  let s = solve((1+^theta(E)),alpha_check-beta_check)
          .(requisition("can't solve for s in epsilon_t")) in
  let t=t(F) in
  let t_alpha_beta=t*(alpha+beta) in
  let t_0 = ratvec_as_vec(t+t*beta*s-t_alpha_beta/2*alpha_check) in
  let E_new=
    if l_test_1
    then (ic(E),delta(E),gamma(E),lambda_rho(E),theta(E),g(E),l(F),omega(E)
         ,tau_0,t_0)
    elif l_test_2
    then (ic(E),delta(E),gamma(E),lambda_rho(E),theta(E),g(E),l(F)+alpha_check
         ,omega(E),tau_0,vec:t_0-s)
    else error("l_test_1 and l_test_2 both false")
    fi
  then F_new=
    if lambda_test_1
    then (ic(F),delta(F),gamma(F),lambda_rho(E),theta(F),g(F),l(F),omega(F)
         ,tau_0,t_0)
    elif lambda_test_2
    then (ic(F),delta(F),gamma(F),lambda_rho(E)+alpha,theta(F),g(F),l(F)
         ,omega(F),vec:tau_0-sigma,t_0)
    else prints(E, x(E), y_gen(E), F, x(F), y_gen(F))
    ; error("lambda_test_1 and lambda_test_2 both false") fi
  in
  assert(valid(E_new),"E_new is not valid")
; assert(valid(F_new),"F_new is not valid")
; let sign_E=sign(E,E_new) in
  let sign_F=sign(F,F_new) in
  let sign=sign_E*sign_F*kappa in
  prints("sign_E=", sign_E, ", sign_F=", sign_F, " kappa=", kappa
        , " sign=", sign)
; sign
end

{ sign_2r21(j,E,F) is defined to be sign_2i12(j,F,E) }
set sign_2r21(int j, ExtParam E, ExtParam F) =int:
  sign_2i12(j,F,E)

{ see "More on the 2i12, 2Ci and 1i cases" Section 2 }
set sign_2Ci (int j,ExtParam E) = int:
  let id=integrality_datum(E)
  then alpha=root(id,j), alpha_check=coroot(id,j)
  then beta=E.delta*alpha then beta_check=coroot(id,beta)
  then exponent = rat_as_int( { exponent of i should be even, convert for -1 }
    ((alpha_check+beta_check)*E.tau) * ((E.g-E.l)*alpha-1) /2 )
  in minus_1^exponent

set sign_2Cr (int j,ExtParam E) = int:
  let id=integrality_datum(E)
  then alpha=root(id,j), alpha_check=coroot(id,j)
  then beta=E.delta*alpha then beta_check=coroot(id,beta)
  then exponent = rat_as_int( { exponent of i should be even, convert for -1 }
    (alpha_check*(E.gamma-E.lambda_rho)-1) * (E.t*(alpha+beta)) /2 )
  in minus_1^exponent

set signs_1i1(int j, ExtParam E, ExtParam E1, ExtParam F) = (int,int):
begin
  assert(ext_type(j,E)="1i1","Wrong type in signs_1i1")
; let alpha=root(E.ic,j), alpha_check=coroot(E.ic,j), F=ext_Cayley(j,E)[0]
  then sigma = solve((1+^omega(F)),alpha)
               .(requisition("can't solve for sigma in signs_1i1"))
  then new_tau_E = vec: E.tau-(alpha_check*E.tau)*sigma
  , l_E_alpha = E.l*alpha
  then new_l_E=
    if is_even(l_E_alpha)
    then E.l-rat_as_int(l_E_alpha/2)*alpha_check
    else E.l-rat_as_int((l_E_alpha-1)/2)*alpha_check
    fi
  then new_E =
    (E.ic,E.delta,E.gamma,E.lambda_rho,E.theta
    ,E.g,new_l_E,E.omega,new_tau_E,E.t)
  then new_F = ext_Cayley(j,new_E), sign_E_new_E=sign(E,new_E)
  in prints("sign_E_new_E:", sign_E_new_E)
{ ; display(new_E) }
; display(E)
; let sign_cross = sign_E_new_E*sign(ext_cross(j,new_E),E1)
  ,  sign_Cayley = sign_E_new_E*sign(ext_Cayley(j,new_E)[0],F)
  in (sign_cross,sign_Cayley)
end

{ not needed?
  set signs_1r1f(int j, ExtParam E, ExtParam F) = int:
    signs_1i1(j,F,E)
}

{ temporarily install polynomial arithmetic }
forget +@(vec,vec)
forget -@(vec,vec)
forget *@(vec,vec)
set + = flex_add@(vec,vec)
set - = flex_sub@(vec,vec)
set * = convolve@(vec,vec)

{ compute matrix of twisted Hecke operator T_j on E(delta,gamma,x,g,y) in basis
  of extended parameters {E_i=E(delta,gamma,x_i,g,y_i)}, assuming pair=(x,y)
  occurs in basis matrix of polynomials, see polynomials.at
}
set hecke_row (
    int j, mat delta, ratvec gamma, ratvec g, KGB_pair pair, [KGB_pair] basis
  ) = [i_poly]:
begin
  let i=index(pair,basis), n=#basis in
  let R=zero_poly_row(n), (x,y)=pair in
{ note: following E is the default, i.e. sgn(E)=1, however dual_sgn(E)=\pm1 }
  let E=E(delta,gamma,x,g,y) in
  let type=ext_type(j,E) in
{ let ()=prints("type (in hecke_row):", type) in }
  if type="1C+"
  then let F=ext_cross(j,E) in
    let k=index(F,basis) in
    R:=update_row(R,k,sgn_poly(sign(F)))
  elif type ="1C-"
  then let F=ext_cross(j,E) in
    let k=index(F,basis) in
    R:=update_row(R,k,sign(E)*poly_q);
    R:=update_row(R,i,poly_q-poly_1)
  elif type="1i1"
  then let E1=default(ext_cross(j,E)) in
    let F=default(ext_Cayley(j,E)[0]) in
    let k=index(E1,basis) in
    let m=index(F,basis) in
    let sign_cross=sign(ext_cross(j,E)) in
    let sign_Cayley=sign(ext_Cayley(j,E)[0]) in
    if sign_cross=-1
    then prints("sign_1i1_cross=-1 in computing Hecke operator of type 1i1")
    fi
  ; if sign_Cayley=-1
    then prints("sign_1i1_Cayley=-1 in computing Hecke operator of type 1i1")
    fi
  ; R:=update_row(R,k,sgn_poly(sign_cross))
  ; R:=update_row(R,m,sgn_poly(sign_Cayley))
  elif type="1i2f"
  then let m0=index(ext_Cayley(j,E)[0],basis) in
    let m1=index(ext_Cayley(j,E)[1],basis) in
    R:=update_row(R,i,poly_1)
  ; R:=update_row(R,m0,poly_1)
  ; R:=update_row(R,m1,poly_1)
  elif type="1i2s" then R:=update_row(R,i,-poly_1)
  elif type="1ic" then R:=update_row(R,i,poly_q)
  elif type="1r1f"
  then let E0=default(ext_Cayley(j,E)[0]) in
    let E1=default(ext_Cayley(j,E)[1]) in
    let m0=index(E0,basis) in
    let m1=index(E1,basis) in
    let sign_Cayley_0=sign(ext_Cayley(j,E)[0]) in
    let sign_Cayley_1=sign(ext_Cayley(j,E)[1]) in
    if sign_Cayley_0=-1
    then prints("sign_1r1f_Cayley_0=-1 in computing Hecke operator")
    fi;
    if sign_Cayley_1=-1
    then prints("sign_1r1f_Cayley_1=-1 in computing Hecke operator")
    fi
  ; R:=update_row(R,i,poly_q-poly_2)
  ; R:=update_row(R,m0,sgn_poly(sign_Cayley_0)*(poly_q-poly_1))
  ; R:=update_row(R,m1,sgn_poly(sign_Cayley_1)*(poly_q-poly_1))
  elif type="1r1s" then R:=update_row(R,i,poly_q)
  elif type="1r2"
  then let E1=ext_cross(j,E) in
    let k=index(E1,basis) in
    let F=ext_Cayley(j,E)[0] in
    let m=index(F,basis) in
    R:=update_row(R,i,poly_q-poly_1)
  ; R:=update_row(R,k,sgn_poly(-sign(E1)))
  ; R:=update_row(R,m,(poly_q-poly_1)*sign(F))
  elif type="1rn" then R:=update_row(R,i,-poly_1)
  elif type="2C+"
  then let F=ext_cross(j,E) in
    let k=index(F,basis) in
    R:=update_row(R,k,sgn_poly(sign(F)))
  elif type ="2C-"
  then let F=ext_cross(j,E) in
    let k=index(F,basis) in
    R:=update_row(R,k,poly_q2*sign(F))
  ; R:=update_row(R,i,poly_q2-poly_1)
  elif type ="2Ci"
  then let F=ext_Cayley(j,E)[0] in
   let a=sign_2Ci(j,E) in
   let b=sign(F) in
   let c=a*b in
   let m=index(F,basis) in
   prints("2Ci signs for indices ", i, "->", m, " sign_2Ci(E):", a
         ,", sign(F):",b, " c:", c)
  ; R:=update_row(R,m,(poly_q+poly_1)*c)
  ; R:=update_row(R,i,poly_q)
  elif type ="2Cr"
  then {sign must equal the one from the 2Ci direction}
    let E0=default(ext_Cayley(j,E)[0]) in
    let F0=ext_Cayley(j,E0)[0] in
    let a=sign_2Ci(j,E0) in
    let b=sign(F0) in
    let c=a*b in
    let m=index(E0,basis) in
    prints("2Cr signs for indices ", i, "->", m, " sign_2Ci(E0):", a
	  , ", sign(F0):",b, " c:", c)
  ; R:=update_row(R,m,(poly_q2-poly_q)*c)
  ; R:=update_row(R,i,poly_q2-poly_q-poly_1)
  elif type ="2i11"
  then let E1=ext_cross(j,E) in
    let k=index(E1,basis) in
    let F=ext_Cayley(j,E)[0] in
    let m=index(F,basis) in
    R:=update_row(R,k,sgn_poly(sign(E1)))
  ; R:=update_row(R,m,sgn_poly(sign(F)))
  elif type ="2i12"
  then let cayley=ext_Cayley(j,E) in
    let F1=default(cayley[0]) in
    let F2=default(cayley[1]) in
    let sign_F1=sign_2i12(j,E,F1) in
    let sign_F2=sign_2i12(j,E,F2) in
    prints("type 2i12  for parameter with index ", index(E,basis)
           , " sign_F1:", sign_F1, ", sign_F2:", sign_F2)
  ; R:=update_row(R,index(F1,basis),sgn_poly(sign_F1))
  ; R:=update_row(R,index(F2,basis),sgn_poly(sign_F2))
  ; R:=update_row(R,i,poly_1)
  elif type ="2i22"
  then let F0=ext_Cayley(j,E)[0] in
  let F1=ext_Cayley(j,E)[1] in
    let m0=index(F0,basis) in
    let m1=index(F1,basis) in
    R:=update_row(R,m0,sgn_poly(sign(F0)))
  ; R:=update_row(R,m1,sgn_poly(sign(F1)))
  ; R:=update_row(R,i,poly_1)
  elif type ="2r22"
  then let E1=ext_cross(j,E) in
    let k=index(E1,basis) in
    let F=ext_Cayley(j,E)[0] in
    let m=index(F,basis) in
    R:=update_row(R,m,sgn_poly(sign(F))*(poly_q2-poly_1));
    R:=update_row(R,k,-sgn_poly(sign(E1)));
    R:=update_row(R,i,poly_q2-poly_1)
  elif type ="2r21"
  then let F=default(E) in
    let cayley=ext_Cayley(j,F) in
    let E1=default(cayley[0]) in
    let E2=default(cayley[1]) in
    let sign_E1=sign_2r21(j,F,E1) in
    let sign_E2=sign_2r21(j,F,E2) in
    prints("type 2r21 for parameter with index ", index(E,basis)
          , " sign_E1:", sign_E1, ", sign_E2:", sign_E2)
  ; R:=update_row(R,index(E1,basis),sgn_poly(sign_E1)*(poly_q2-poly_1))
  ; R:=update_row(R,index(E2,basis),sgn_poly(sign_E2)*(poly_q2-poly_1))
  ; R:=update_row(R,i,poly_q2-poly_2)
  elif type ="2r11"
  then let F0=ext_Cayley(j,E)[0] in
    let m0=index(F0,basis) in
    let F1=ext_Cayley(j,E)[1] in
    let m1=index(F1,basis) in
    R:=update_row(R,m0,sgn_poly(sign(F0))*(poly_q2-poly_1))
  ; R:=update_row(R,m1,sgn_poly(sign(F1))*(poly_q2-poly_1))
  ; R:=update_row(R,i,poly_q2-poly_2)
  elif type ="2rn" then R:=update_row(R,i,-poly_1)
  elif type ="2ic" then R:=update_row(R,i,poly_q2)
  else R
  fi
end

{ restore normal vector arithmetic }
forget +@(vec,vec)
forget -@(vec,vec)
forget *@(vec,vec)
set + = fix_add@(vec,vec)
set - = fix_sub@(vec,vec)
set * = dot_product@(vec,vec)

{ row of matrix of action of Hecke operator
  hecke_row(j,E,basis)
}
set hecke_row (
    int j, ExtParam(,delta,gamma,,,g,,,,):E, [KGB_pair] basis
 ) = [i_poly]:
 hecke_row(j,delta,gamma,g,(x(E),y_gen(E)),basis)

{ hecke_matrix(j,delta,gamma,g,basis)
  compute matrix of T_j acting on basis
}
set hecke_matrix (
  int j, mat delta, ratvec gamma, ratvec g,[KGB_pair] basis) = i_poly_mat:
  for i:#basis
  do let (x,y)=basis[i] then E=E(delta,gamma,x,g,y) in
    { row i of result: } hecke_row(j,E,basis)
  od

{ quadratic(M,j) or quadratic(M,j,true)
  quadratic relation for matrix M, of length j=1,2,3;
  quadrati(M,j,true) to see the resulting matrix, which should be 0
}
set quadratic (i_poly_mat M, int length, bool show) = bool:
begin
  let value=(M+poly_1)*(M-poly_q^length) in
  if show
  then prints("M="); printPolyMatrix(M); prints(); printPolyMatrix(value)
  fi
; is_zero(value)
end

set quadratic(i_poly_mat M, int length)=quadratic(M,length,false)

{ braid(M,N,j) or braid(M,N,j,1) tests braid relation for M,N
  j=number of factors on each side =1,2,3,4,6
  final argument to see the resulting matrix, which should be 0
}
set braid(i_poly_mat M,i_poly_mat N, int length,bool show) = bool:
begin
  assert(if length<=4 then length>0 else length=6 fi,"wrong length")
; let pair = (M,N) { naming components here would make things difficult }
  in for i:length-1 do pair := (let (X,Y)=pair in (Y*M,X*N)) od
; let A = -pair { that is dyadic -@(i_poly_mat,polly_mat): take the difference }
  in if show then prints("difference: "); printPolyMatrix(A) fi
; is_zero(A)
end

set braid (i_poly_mat M,i_poly_mat N, int length) = bool:
  braid(M,N,length,false)

{ utility function modify(E,lambda,l,tau,t) replaces these terms in E }
set modify(
    ExtParam(ic,delta,gamma,,theta,g,,omega,,)
  , vec lambda, vec l, vec tau, vec t) =
  ExtParam: (ic,delta,gamma,lambda,theta,g,l,omega,tau,t)

{various tests of hecke relations}

{ test_hecke(i,j,delta,gamma,g,basis):
  tests quadratic and braid relations for T_i,T_j acting on basis
}
set test_hecke (int i, int j,
 mat delta, ratvec gamma, ratvec g, [KGB_pair] basis) = bool:
begin {get the inner class:}
  let (x_0,)=basis[0] then rd=RootDatum:real_form(x_0)
  then id=integrality_datum(rd,gamma)
  , M=hecke_matrix(i,delta,gamma,g,basis)
  , N=hecke_matrix(j,delta,gamma,g,basis)
  then {see extended.at for definition of folded_order=0,1,2,3}
    m=folded_order(id,delta,i,j)
  , l_i=ext_length(id, delta, i)
  , l_j=ext_length(id, delta, j)
  then quad_M=quadratic(M,l_i,false), quad_N=quadratic(N,l_j,false)
{ then ()=printPolyMatrix(M); prints(); printPolyMatrix(N) }
  then braid = braid(M,N,m)
  in prints("quadratic relation for M of length ", l_i, ": ", quad_M)
; prints("quadratic relation for N of length ", l_j, ": ", quad_N)
; prints("braid relation for M,N with ", m, " terms on each side: ", braid)
; quad_M and quad_N and braid
end

set test_hecke (int i, int j, mat delta, ratvec gamma, [KGB_pair] basis) = bool:
  let (x,y)=basis[0] in test_hecke(i,j,delta,gamma,canonical_g(x),basis)

{ test_hecke(i,j,delta,B,g):
  test quadratic and braid relations for T_i and T_j acting on all delta-fixed
  parameters of B
}
set test_hecke (int i, int j, mat delta, [Param] B, ratvec g) = bool:
begin
  let (bases,n,sizes)=decompose(i,j,delta,B,g) in
  prints("computing on block of ", n, " fixed parameters in "
        , #sizes, " subspaces, of dimensions ", sizes)
; let gamma=infinitesimal_character (B[0])
  then results =
    for basis@k in bases
    do prints(); prints("subspace ", k, " of dimension ", sizes[k])
    ; test_hecke(i,j,delta,gamma,g,basis)
    od
  in all(results)
end

set test_hecke (int i, int j, mat delta, [Param] B) = bool:
  test_hecke(i,j,delta,B,canonical_g(B[0]))

set test_hecke (int i,int j, mat delta,Param p) = bool:
  test_hecke(i,j,delta,block_of(p))
set test_hecke (int i,int j,Param p,ratvec g) = bool:
  test_hecke(i,j,distinguished_involution(real_form(p)),block_of(p),g)
set test_hecke(int i,int j,Param p) = bool:
  test_hecke(i,j,distinguished_involution(real_form(p)),block_of(p))
