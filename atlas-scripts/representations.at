<basic.at
<misc.at { for generate_all_subsets }
<group_operations.at { for is_split and such }
<cross_W_orbit.at
{<nilpotent.at}
<nilpotent_orbit_partitions.at
<nilpotent_orbits_exceptional.at
{ some common representations }

{ finite dimensional with highest weight gamma in X^*
  param(last KGB element,lambda=gamma+rho,nu=gamma+rho)
  consequently every simple root is in the tau-invariant,
  and the infinitesimal character is gamma+rho
}
set finite_dimensional (RealForm G,vec lambda) = Param:
  let lambda_dom=dominant(G,lambda) then gamma=lambda_dom+rho(G) in
  parameter(KGB(G,KGB_size(G)-1),gamma,gamma)

set finite_dimensional_fundamental_weight_coordinates (RealForm G,vec tau) =
  Param:
  let fw=fundamental_weights(G), result=ratvec:null(rank(G)) in
  for i:#tau do result+:=tau[i]*fw[i] od;
  assert(is_integer(result), "weight is not integral");
  finite_dimensional(G,result\1)

{ the trivial block }
set trivial_block (RealForm G) = [Param]: block_of(trivial(G))

{return a large fundamental series if G is quasisplit (not necessarily unique)}
set large_fundamental_series (RealForm G,ratvec lambda) = Param:
  assert(is_quasisplit(G),"group is not quasisplit");
  assert(is_regular(G,lambda),"lambda is not regular");
  parameter(G,0,lambda,lambda)

set large_fundamental_series (RealForm G) = Param:
  large_fundamental_series(G,rho(G))

{ return a large discrete series if G is quasisplit and equal rank
  (not necessarily unique) }
set large_discrete_series (RealForm G,ratvec lambda) = Param:
  assert(is_equal_rank(G),"group is not equal rank");
  large_fundamental_series(G,lambda)

set large_discrete_series (RealForm G) = Param:
  large_discrete_series(G,rho(G))

{warning: p may fail to be final}
{.minimal principal series of split group with given lambda,nu}
set minimal_principal_series (RealForm G,ratvec lambda,ratvec nu) = Param:
  assert(is_split(G),"group is not split");
  let n=KGB_size(G)-1 in
  normal(parameter(KGB(G,n),lambda,nu))

set minimal_principal_series(RealForm G) = Param:
  minimal_principal_series (G,rho(G),rho(G))
set minimal_spherical_principal_series (RealForm G,ratvec nu) = Param:
  minimal_principal_series(G,rho(G),nu)
set minimal_spherical_principal_series (RealForm G) = Param:
  minimal_spherical_principal_series(G,rho(G))

{ G should be absolutely simple, SL(n,R), Sp(2n,R), S(n,n) or SO(n+1,n) or
  simple complex, and have standard coordinates (as we use |nilpotent_lambdas|)
}
set spherical_unipotent_representations (RealForm G) = [Param]:
  assert(is_split(G),"group is not split");
  let codes = %Lie_type(root_datum(G)) then n_factors=#codes in
  if n_factors=1 then  { assert(is_split(G),"Group is not split");}
    for gamma in nilpotent_lambdas(G)
    do minimal_spherical_principal_series(G,gamma) od
  elif n_factors=2 then { check that it looks like a simple complex group }
    let C_type = Lie_type(codes[0]) in
    assert(Lie_type(codes[1])=C_type,"not a complex group");
    let lambdas=nilpotent_lambdas(simply_connected(C_type))
    , x=x(trivial(G)), zero=null(rank(G))
    in {parameter might not be normal}
    for lambda in lambdas do dominant(param(x, zero, lambda##lambda)) od
  else []
  fi

{
  let lietype=Lie_type(root_datum(G)) in
  if #lietype=1 then  { assert(is_split(G),"Group is not split");}
    for gamma in nilpotent_lambdas(G)
    do minimal_spherical_principal_series(G,gamma) od
  elif #lietype=2 then { check that it looks like a simple complex group }
    let (first,second)=let arr=%lietype in (arr[0],arr[1]) in
    assert(Cartan_matrix(first)=Cartan_matrix(second),"not a complex group");
    let lambdas=nilpotent_lambdas(simply_connected(first))
    , x=x(trivial(G)), zero=null(rank(G))
    in {parameter might not be normal}
    for lambda in lambdas do dominant(param(x, zero, lambda##lambda)) od
  else []
  fi
}


{ Harish-Chandra parameter of (relative) discrete series, with respect to
  given x_b }
set hc_parameter (Param p,KGBElt x_b) = ratvec:
  assert(is_equal_rank(derived(real_form(p)))
        ,"Group is not equal rank mod center");
  assert(Cartan_class(p)=fundamental_Cartan(real_form(p))
        ,"Cartan is not compact mod center");
  let w=cross_divide(x_b,x(p)) in w*lambda(p)

{ Harish-Chandra parameter of (relative) discrete series, with respect to
  x_b=KGB(G,0) }
set hc_parameter (Param p) = ratvec:
  hc_parameter(p,KGB(real_form(p),0))

{ discrete series parameter with given HC parameter lambda, wrt given x }
set discrete_series (KGBElt x,ratvec lambda) = Param:
  let ic=inner_class(x) then rd=root_datum(ic) in
  assert(is_equal_rank(derived(ic)),"G is not equal rank mod center");
  assert(is_integer(lambda-rho(rd)),"lambda is not in rho+X^*");
  assert(is_regular(rd,lambda),"lambda is not regular");
  let (w,lambda_dom)=from_dominant(rd,lambda) in
  parameter(cross(inverse(w),x),lambda_dom,null(rank(ic)))

{ discrete series parameter with given HC parameter lambda, wrt KGB(G,0) }
set discrete_series (RealForm G,ratvec lambda) = Param:
  discrete_series(KGB(G,0),lambda)

{ for lists of multiple representations see all_parameters.at }
