<basic.at
<W_classes.at { definition of |WeylClassTable| and supporting functions }
<combinatorics.at { functions for specific classical types }
<lietypes.at
<e8_gap.at { load the information from GAP }

{ The purpose of this module is to group case-by-case definitions of W-class
  tables for root data with a specified simple Cartan matrix type, and give a
  definion of |class_table@RootDatum| the employs the decomposition of the
  Dynkin diagram of a root datum into connected components to build up, for a
  general root datum, a |WeylClassTable| built up from those for appropriate
  sub-root-data.
}


{ The following method to combine conjugacy class tables of Weyl groups for root
  subdata whose simple roots form a mutually orthogonal partition of the simple
  roots of |rd| can be given before doing any of the case-by-case stuff.
  Explicitly passing |rd| as argument allows the proper renumbering to be
  applied when passing to and from the Weyl group of the full root datum.
}
set combine(RootDatum rd,[WeylClassTable] tables) = WeylClassTable:
(  let rds = for table in tables do table.root_datum od
   , radix = for table in tables do table.n_classes od { mixed radix list }
   , tr = two_rho(rd)
in assert(for rdj@j in rds
          do for i:j { iterate of all pairs |i<j| }
	     do for alpha_v in simple_coroots(rds[i])
	        do for beta in simple_roots(rdj)
	           do =alpha_v*beta
		   od.all
	        od.all
	     od.all
	  od.all,"Factors are not mutually orthogonal")
;  let reps = [[WeylElt]]: { all class representatives, lifted to |rd| }
      for table in tables
      do for w in table.class_representatives do chamber(rd,w*tr) od
      od
   , words = all_words(radix) { mixed radix representations of class numbers }
   , index = mixed_radix_nr(radix) { map from |word| to its index in |words| }
   , project_W = [(WeylElt->WeylElt)]: { projectors to component Weyl groups }
      for rdi in rds
      do let tri = two_rho(rdi) in (WeylElt w): chamber(rdi,w*tri)
      od
in W_class_table
   ( rd
   , for word in words do product(rd,for n@i in word do reps[i][n] od) od
   , (int N) int: { class size }
     for l@i in words[N] do tables[i].class_sizes[l] od.product
   , (WeylElt w) int: { class number }
        for proj@i in project_W do tables[i].class_of(proj(w)) od.index
   , (int N,int k) int:
	for n@i in words[N] do tables[i].class_power(n,k) od.index
   )
)

{				type A				}

{ get an actual WeylElt from a partition <-> conjugacy class in W}
set conjugacy_class_S(Partition P) = WeylElt:  {for GL(n)}
(  assert(is_positive(P), "P is not a partition (has non-positive entries)")
;  let (n, , simples) = Levi_A(P)
in W_elt(if =n then trivial_group else GL(n) fi,simples)
)

{ for other type A root data like SL(n), we need to work a bit harder }
set conjugacy_class_A(RootDatum rd) = (Partition->WeylElt):
   let map = test_simple_type("A",rd) in
   (Partition P) WeylElt:
(  assert(is_positive(P), "P is not a partition (has non-positive entries)")
;  let (n, , simples) = Levi_A(P)
in assert(n=#map+1,"Partition is of "+ n +" rather than "+(#map+1))
;  W_elt(rd,for s in simples do map[s] od)
)

{ The inverse operation, find cycle type of a WeylElt for GL(n). This could be
  done using |classic_permutation| and |cycle_type| from combinatorics.at, but
  knowing that we have a GL(n) element, we can be a bit more efficient.
}
set cycle_type_GL (WeylElt w) = Partition:
  let n=w.root_datum.rank in cycle_type((vec:#n)*w)

{ sometimes we can avoid sorting the cycles into decreasing length order }
set unsorted_cycle_type_GL (WeylElt w) = [int]:
  let n=w.root_datum.rank in
  for cycle in permutation_cycles((vec:#n)*w) do #cycle od

set class_table_S (int n) = WeylClassTable:
  let rd=GL(n), reps = [Partition]: partitions(n)
  then lookup = (Partition->int): index_partition(reps)
  in W_class_table(rd, for rep in reps do conjugacy_class_S(rep) od
		  , (int i)int: cycle_class_size(reps[i])
		  , (WeylElt w) int: lookup(cycle_type_GL(w))
		  , (int i,int k)int: lookup(cycle_power(reps[i],k))
		  )

set class_table_A (RootDatum rd) = WeylClassTable:
  let partitions = [Partition]: partitions(rd.semisimple_rank+1)
  , type(WeylElt w) = Partition: cycle_type(classic_permutation(w))
  , class_rep = (Partition->WeylElt): conjugacy_class_A(rd)
  then lookup = (Partition->int): index_partition(partitions)
  in W_class_table( rd, for lambda in partitions do class_rep(lambda) od
		  , (int i)int: cycle_class_size(partitions[i])
		  , (WeylElt w) int: lookup(type(w))
		  , (int i,int k)int: lookup(cycle_power(partitions[i],k))
		  )

{				types B,C				}

set BC_classes (int n) = [Signed_cycles]:
   for PQ in partition_pairs(n) do to_cycles(PQ) od

{ word representative in types B and C of conjugacy class for partition pair;
  the parts of P correspond to are cycles without flip, those of Q with flip }
set class_word_BC (Partition P,Partition Q) = [int]:
(  assert((P:=P.strip_to_partition).>, "P is not a partition")
;  assert((Q:=Q.strip_to_partition).>, "Q is not a partition")
;  let (nP,,P_gens)=Levi_A(P) { for P part, do the same as in type A }
   , (nQ,,simples)=Levi_A(Q) { for Q part we need to post-process |simples| }
then
   Q_gens = { each cycle from Q gets a sign flip when its end is sensed }
      let j=0 { position in simples } in
      for i:nQ
      do let pos=nP+i { position in [0,n) where we are }
      in if j<#simples and i=simples[j] then j+:=1; [pos] { extend our cycle }
         else { tack on a sign flip at the final element of the cycle }
	    for k:nQ-i from pos do k od## for k:nQ-1-i from pos ~do k od
	 fi
      od.##
in P_gens##Q_gens
)


{ for general type B root data, we need to look up and use the diagram order }
set conjugacy_class_B (RootDatum rd) = (BiPartition->WeylElt):
   let map = test_simple_type("B",rd) then n=#map in
   (BiPartition pair) WeylElt:
(  let size = rank(pair)
in assert(size=n,"Cycles sum to "+size+" rather than "+n)
;  W_elt(rd,for s in class_word_BC(pair) do map[s] od)
)

set class_table_B (int n) = WeylClassTable:
   let rd=SO(n+n+1), classes = [BiPartition]: partition_pairs(n)
   then lookup = (BiPartition->int): index_bipartition(classes)
in W_class_table( rd, for pair in classes do W_elt(rd,class_word_BC(pair)) od
		, (int i)int: cycle_class_size(classes[i].to_cycles)
		, (WeylElt w) int: lookup(cycle_code(w).as_bipartition)
		, (int i,int k)int:
		    cycle_power(classes[i].to_cycles,k).to_partition_pair.lookup
		)

set class_table_B (RootDatum rd) = WeylClassTable:
   let classes = [BiPartition]: partition_pairs(rd.semisimple_rank)
   , type_code(WeylElt w) = [int]: signed_cycle_type_code(classic_permutation(w))
   , class_rep = (BiPartition->WeylElt): conjugacy_class_B(rd)
   then lookup = (BiPartition->int): index_bipartition(classes)
in W_class_table( rd, for pair in classes do class_rep(pair) od
		, (int i)int: cycle_class_size(classes[i].to_cycles)
		, (WeylElt w) int: lookup(type_code(w).as_bipartition)
		, (int i,int k)int:
		    cycle_power(classes[i].to_cycles,k).to_partition_pair.lookup
		)

{ for general type C root data, we need to look up and use the diagram order }
set conjugacy_class_C (RootDatum rd) = (BiPartition->WeylElt):
   let map = test_simple_type("C",rd) then n=#map in
   (BiPartition pair) WeylElt:
(  let size = rank(pair)
in assert(size=n,"Partition sizes sum to "+size+" rather than "+n)
;  W_elt(rd,for s in class_word_BC(pair) do map[s] od)
)

{ in class table construction we prefer |BiPartition| over |Signed_cycles| }
set class_table_C (int n) = WeylClassTable:
   let rd=Sp(n+n), classes = [BiPartition]: partition_pairs(n)
   then lookup = (BiPartition->int): index_bipartition(classes)
in W_class_table( rd, for pair in classes do W_elt(rd,class_word_BC(pair)) od
		, (int i)int: cycle_class_size(classes[i].to_cycles)
		, (WeylElt w) int: lookup(cycle_code(w).as_bipartition)
		, (int i,int k)int:
		    cycle_power(classes[i].to_cycles,k).to_partition_pair.lookup
		)

set class_table_C (RootDatum rd) = WeylClassTable:
   let classes = [BiPartition]: partition_pairs(rd.semisimple_rank)
   , type_code(WeylElt w) = vec: signed_cycle_type_code(classic_permutation(w))
   , class_rep = (BiPartition->WeylElt): conjugacy_class_C(rd)
   then lookup = (BiPartition->int): index_bipartition(classes)
in W_class_table( rd, for pair in classes do class_rep(pair) od
		, (int i)int: cycle_class_size(classes[i].to_cycles)
		, (WeylElt w) int: lookup(type_code(w).as_bipartition)
		, (int i,int k)int:
		    cycle_power(classes[i].to_cycles,k).to_partition_pair.lookup
		)

{				type D					}


{ word representative in types D of unsplit conjugacy class for partition pair }
set class_word_D(Partition lambda,Partition mu) = [int]:
(  assert((lambda:=lambda.strip_to_partition).>, "lambda is not a partition")
;  assert((mu:=mu.strip_to_partition).>, "mu is not a partition")
;  assert(=#mu%2, "mu has an odd number of parts")
;  assert(not(=mu and =lambda%2)
	 , "mu is empty and lambda has even parts: split class")
;  let (n,,L_gens) = Levi_A(lambda), (m,,simples) =Levi_A(mu)
   ,  rise(int a,int len) = [int]: for i:len from a  do i od
   ,  fall(int a,int len) = [int]: for i:len from a ~do i od
then  sign_pair(int k,int l) = [int]: { arguments are positions in |[0,m[| }
         rise(n+l,m-1-l)##rise(n+k,m-k) { |m-k-2|, plus 2 final for signs }
       ##fall(n+k,m-2-k)##fall(n+l,m-1-l) { remainder of conjugation }
then  M_gens = { each cycle pair from |mu| get sign flips when second is done }
      let odd=false { parity of number cycles from |mu| already treated }
      , j=0 { position in |simples| }
      , k=minus_1 { variable to record end of previous cycle } in
      for i:m
      do if j<#simples and i=simples[j] then j+:=1; [n+i] { extend our cycle }
         elif odd:=not odd
	 then [] next k:=i { break cycle, save index, wait for |sign_pair| }
	 else sign_pair(k,i) { wrap up two cycles by adding signs }
	 fi
      od.##
in L_gens##M_gens
)

{ word representative in types D of split conjugacy class for partition pair }
set class_word_D(Partition lambda,bool minus) = [int]:
(  assert((lambda:=lambda.strip_to_partition).>, "lambda is not a partition")
;  assert(lambda.is_very_even, "lambda is has odd parts: not a split class")
;  let n=sum(lambda), bars = let sum=minus_1 in for k in lambda do sum+:=k od
in if minus else complement(n,bars) { just have a word for each (even) cycle }
   then complement(n,bars) ## [n-2,n-1] { add adjacent flips in last cycle }
   fi
)

set class_word(D_class c) =  [int]:
   case c
   | unsplit_class(cycles): class_word_D(cycles.to_partition_pair)
   | split_class(lambda_minus): class_word_D(lambda_minus)
   esac


set conjugacy_class_SO(D_class c) = WeylElt:
   let n=rank(c) in W_elt(SO(n+n),class_word(c))

{ for general type D root data, we need to look up and use the diagram order }
set conjugacy_class_D(RootDatum rd) = (D_class->WeylElt):
   let map = test_simple_type("D",rd) then n=#map in
   (D_class cycles) WeylElt:
(  let size = rank(cycles)
in assert(size=n,"Cycles sum to "+size+" rather than "+n)
;  W_elt(rd,for s in class_word(cycles) do map[s] od)
)

set class_table_D(int n) = WeylClassTable:
   let rd=SO(n+n), classes = [D_class]: D_classes(n)
   then lookup = (D_class->int):
      let ranked = { |ranked[i]| is index in |classes| of class ranked |i| }
         sort(#classes,(int i,int j)bool: classes[i]<=classes[j])
      then list = for i in ranked do classes[i] od
      in (D_class c) int: { index in |classes| where one finds |c| }
         ranked[binary_search_first((int i)bool: c<=list[i], 0,#classes)]
in W_class_table( rd, for class in classes do conjugacy_class_SO(class) od
		, (int i)int: class_size(classes[i])
		, (WeylElt w)int: lookup(signed_permutation(w).to_D_class)
		, (int i,int k)int: lookup(cycle_power(classes[i],k))
		)

set class_table_D(RootDatum rd) = WeylClassTable:
   let classes = [D_class]: D_classes(rd.semisimple_rank)
   , class_rep = (D_class->WeylElt): conjugacy_class_D(rd)
   then lookup = (D_class->int):
      let ranked = { |ranked[i]| is index in |classes| of class ranked |i| }
         sort(#classes,(int i,int j)bool: classes[i]<=classes[j])
      then list = for i in ranked do classes[i] od
      in (D_class c) int: { index in |classes| where one finds |c| }
         ranked[binary_search_first((int i)bool:c<=list[i], 0,#classes)]
in W_class_table( rd, for class in classes do class_rep(class) od
		, (int i)int: class_size(classes[i])
		, (WeylElt w)int: lookup(classic_permutation(w).to_D_class)
		, (int i,int k)int: lookup(cycle_power(classes[i],k))
		)

{				type G2					}

set ! G2_class_words = [[],[0],[1],[0,1],[0,1,0,1],[0,1,0,1,0,1]]

set class_table_G (RootDatum rd) = WeylClassTable:
  let map=test_simple_type("G",rd)
  then magic_coweight = 5*coroot(rd,map[0])+9*coroot(rd,map[1]), rho=rho(rd)\1
  then type(WeylElt w) = int:
    case magic_coweight*(w*rho) { mod 15; all collisions are conjugate }
    in die, 5, 2, die, 1, die, die, 3, 4, die, die, 2, die, 1, 0
    esac
  , reps =
      for word in G2_class_words do W_elt(rd,for bit in word do map[bit] od) od
  in W_class_table( rd, reps
		  , (int i) int: {class size} case i in 1,3,3,2,2,1 esac
		  , {classify |w|} type
		  , (int i,int k) int: {class powers}
		    case i-3 else { order 2 } case k in 0,i esac
		    in {i=3} case k in 0,3,4,5,4,3 esac
		    ,  {i=4} case k in 0,4,4 esac
		    esac
		  )

set class_table_G (int n) = WeylClassTable:
   assert(n=2,"Inexistent type G"+n); class_table_G(simply_connected("G2"))


{				type F4					}

{ orbit sizes on long respectively short roots; these characterise classes }
set class_signature_F4 (WeylElt w) = (Partition,Partition):
   let rd=root_datum(w), orbits = root_orbits(w)
   then longs = Partition:
     for c in orbits do if is_long_root(rd,c[0]) then [#c] else [] fi od.##
   , shorts = Partition:
     for c in orbits do if is_long_root(rd,c[0]) then [] else [#c] fi od.##
   in (longs.sort_to_partition,shorts.sort_to_partition)

{ list conjugacy classes in Kondo order; non standard ordering of diagram is
  allowed: |map| maps Bourbaki indices to corresponding indices in |rd| }
set classes_Kondo_F4 (RootDatum F4) = [WeylElt]:
   let map = [int]: test_simple_type("F",F4)
   then convert([int] word) = [int]: for letter in word do map[letter] od
   then a = W_elt(F4,[1].convert), b=W_elt(F4,[2,1,2].convert)
   , c=W_elt(F4,[2,3,2,1,2,3,2].convert), d=W_elt(F4,[0].convert)
   , tau =W_elt(F4,[2].convert), sigma =W_elt(F4,[2,3].convert)
   then e=(a*b*c*d)^2, z=(a*b*c*d)^3
in for w in
     [ id_W(F4)
     , z { central element, acts as $-1$ }
     , a*b
     , e
     , e*z
     , a*d*b*d*c*d
     , sigma
     , sigma*z
     , sigma*e
     , sigma*e*z
     , c*d*sigma
     , d { long root reflection }
     , d*z
     , sigma*d
     , sigma*d*z
     , a*d*b
     , tau { short root reflection }
     , tau*z
     , e*tau
     , e*tau*z
     , c*a*tau
     , tau*d
     , a*tau
     , a*tau*z
     , c*d*b*tau
     ]
   do minimal_representative(w)
   od


set class_table_F (RootDatum rd) = WeylClassTable:
   let classes = [WeylElt]: classes_Kondo_F4(rd)
   then sigs = [BiPartition]:
      for class in classes do class_signature_F4(class) od
   then N=1152 { = order_W(rd) }
   ,  lookup = (BiPartition->int):
      let ranked = sort(#sigs,(int i,int j)bool: sigs[i]<=sigs[j])
      then list = for i in ranked do sigs[i] od { |sigs| sorted by |<=| }
      in (BiPartition sig) int: { index in |sigs| where one finds |sig| }
         ranked[binary_search_first((int i)bool: sig<=list[i], 0,#list)]
in W_class_table ( rd
		 , classes
		 , (int i) int: N\centralizer_order(classes[i])
		 , (WeylElt w) int: lookup(class_signature_F4(w))
		 , (int i,int k) int:
		   let (a,b) = sigs[i]
		   in lookup(cycle_power(a,k),cycle_power(b,k))
		 )

set class_table_F (int n) = WeylClassTable:
   assert(n=4,"Inexistent type F"+n); class_table_F(simply_connected("F4"))


{				type E6					}


{ orbit sizes on roots; these characterise conjugacy classes for W(E6) }
set class_signature_E6 (WeylElt w) = Partition:
   let rd=root_datum(w)
in for c in root_orbits(w) do #c od.sort_to_partition

set class_table_E6 (RootDatum rd) = WeylClassTable:
   let classes = [WeylElt]: assert(#test_simple_type("E",rd)=6,"Not E6")
	       ; conjugacy_class_reps(rd)
   then sigs = [Partition]: for w in classes do class_signature_E6(w) od
   , leq = leq_equal_sum_partitions@(Partition,Partition)
   then N=51840 { order_W("E6") }
   ,  lookup = (Partition->int):
      let ranked = sort(#sigs,(int i,int j)bool: leq(sigs[i],sigs[j]))
      then list = for i in ranked do sigs[i] od { |sigs| sorted by |leq| }
      in (Partition sig) int: { index in |sigs| where one finds |sig| }
         ranked[binary_search_first((int i)bool: leq(sig,list[i]), 0,#list)]
in W_class_table ( rd
		 , classes
		 , (int i) int: N\centralizer_order(classes[i])
		 , (WeylElt w) int: lookup(class_signature_E6(w))
		 , (int i,int k) int: lookup(cycle_power(sigs[i],k))
		 )

{ we shall do storage of the class table for one particular E6 root datum }
set !standard_datum_E6 = RootDatum: simply_connected("E6")

{ voluntarily override previous definition to memoize for |standard_datum_E6| }
set class_table_E6 = (RootDatum->WeylClassTable):
   let Wct= trivial_class_table { place holder value }
in (RootDatum rd) WeylClassTable:
   if rd != standard_datum_E6 then class_table_E6(rd) { this is not recursion! }
   elif =Wct.root_datum.rank { whether this is the first time we are called }
   then Wct:=class_table_E6(rd) { compute and store the first time }
   else Wct { any next time just return the previously computed value }
   fi

set class_table_E6 () = WeylClassTable: class_table_E6(standard_datum_E6)


{				type E7					}

{ Unlike other exceptional simple types, the class invariant of the cycle type
  of the permutation of the roots defined by a Weyl group element does not
  entirely separate conjugacy classes: three pairs of classes are ambiguous.
  In each case the type of |Levi_datum(w)| will distinguish the pairs, and
  indeed just the number of simple factors of this type will do: one member of
  the pair gives a single factor, while the other one has 2,3, or 4 factors.

  Since |Levi_datum(w)| is cheaper to compute then say |centralizer_order(w)|,
  we use this number of simple factors as additional component in order to
  characterise conjugacy classes, useful for looking up arbitrary elements |w|.
}

set class_signature_E7 (WeylElt w) = (Partition,int):
   let rd=root_datum(w)
in ( for c in root_orbits(w) do #c od.sort_to_partition
   , w.Levi_datum.Lie_type.simple_factors.#
   )

{ comparison of root cycle types first, use second component to disambiguate }
set leq_E7_signatures ((Partition P,int m),(Partition Q,int n)) = bool:
   case cmp_equal_sum_partitions(P,Q) then true in m<=n else false esac

{ Compared ot other types, fast construction of a class table for E7 takes quite
  a bit of preparation effort. Having a sorted list of class signatures will
  speed up searching for elements, as in other types, but computing class powers
  is harder. In most cases using just the root permutation cycle type suffices:
  for unambiguous classes their powers are also unambiguous, and it turns out
  that even powers of ambiguous classes are unambiguous as well (the ambiguous
  classes have even element orders 2,4,6). Odd powers of ambiguous classes are
  still ambiguous; in most cases they are the ambiguous class itself, but the
  thrid powers of the ambiguous classes with element order 6 give the ambiguous
  classes with order 2, with the "one simple factor" condition unchanged. We can
  therefore avoid actually computing powers of signatures of class
  representatives. This however requires the sorted list of class signatures to
  be transformed into a sorted |list| of just permutation cycle types (for
  searching without needing to know the Levi datum), with associated to each a
  list of 1 or 2 class numbers. In most cases the number of factors is not used
  at all, but in the ambiguous cases we use whther or not that nuber equals 1.
}
set class_table_E7 (RootDatum rd) = WeylClassTable:
   let classes = [WeylElt]: assert(#test_simple_type("E",rd)=7,"Not E7")
	       ; conjugacy_class_reps(rd)
   then sigs = [Partition,int]: { class signatures; to be modified a bit below }
      for w in classes do class_signature_E7(w) od
   then N=2903040 { order_W("E7") }
   ,  (lookup_w,lookup_cyc) { define two functions that share precomputed data }
         = ((WeylElt->int),(Partition->[int])):
      let ranked = [int]:
         sort(#sigs,(int i,int j)bool: leq_E7_signatures(sigs[i],sigs[j]))
      then (list,locs) = ([Partition],[[int]]): { sorted cycle type, positions }
         let locs=[int]:[], prev= Partition:[]
	 then out = [Partition,[int]]: { grouping of |sigs[ranked[i]] values }
	    for loc@rank in ranked
	    do let (lambda,)=sigs[loc] in
	       if =rank then [] next prev:=lambda; locs:=[loc]
	       elif lambda=prev then [] next locs#:=loc
	       else [(prev,locs)] next prev:=lambda; locs:=[loc]
	       fi
	    od.##
      in out #:= (prev,locs) { attach last group; now split into (list,locs): }
      ;  ( for (lambda, ) in out do lambda od, for (,locs) in out do locs od )
      then locate(Partition lambda) = int: { position of |lambda| in |list| }
         binary_search_first
	   ((int i)bool: leq_equal_sum_partitions(lambda,list[i]), 0,#list)
   in ( { lookup_w = } (WeylElt w) int:
        let (lambda,n)=class_signature_E7(w) then locs = locs[locate(lambda)]
	in if #locs=1 or n=1 {single factor} then locs[0] else locs[1] fi
      , { lookup_cyc = } (Partition mu) [int]: locs[locate(mu)]
      )
in W_class_table ( rd
		 , classes
		 , (int i) int: N\centralizer_order(classes[i])
		 , lookup_w
		 , (int i,int k) int:
		   let (lambda,n)=sigs[i] then locs = lookup_cyc(lambda)
		   in if k.is_odd and #locs>1
		      else cycle_power(lambda,k).lookup_cyc [0] {unambiguous}
		      then { cycle type will still be ambiguous }
		         let seq = #(n>1) in { 0/1 value to disambiguate }
			 assert(locs[seq]=i); { check }
			 cycle_power(lambda,k).lookup_cyc [seq]
		      fi
		 )

{ we shall do storage of the class table for one particular E6 root datum }
set !standard_datum_E7 = RootDatum: simply_connected("E7")

{ voluntarily override previous definition to memoize for |standard_datum_E6| }
set class_table_E7 = (RootDatum->WeylClassTable):
   let Wct= trivial_class_table { place holder value }
in (RootDatum rd) WeylClassTable:
   if rd != standard_datum_E7 then class_table_E7(rd) { this is not recursion! }
   elif =Wct.root_datum.rank { whether this is the first time we are called }
   then Wct:=class_table_E7(rd) { compute and store the first time }
   else Wct { any next time just return the previously computed value }
   fi

set class_table_E7 () = WeylClassTable: class_table_E7(standard_datum_E7)


{				type E8					}


{ orbit sizes on roots; these characterise conjugacy classes for W(E8) }
set class_signature_E8 (WeylElt w) = Partition:
   let rd=root_datum(w)
in for c in root_orbits(w) do #c od.sort_to_partition

set class_table_E8 (RootDatum rd) = WeylClassTable:
   let classes = [WeylElt]: assert(#test_simple_type("E",rd)=8,"Not E8")
	       ; conjugacy_class_reps(rd)
   then sigs = [Partition]: for w in classes do class_signature_E8(w) od
   , leq = leq_equal_sum_partitions@(Partition,Partition)
   then lookup = (Partition->int):
      let ranked =
         sort(#sigs,(int i,int j)bool: leq(sigs[i],sigs[j]))
      then list = for i in ranked do sigs[i] od { |sigs| sorted by |leq| }
      in (Partition sig) int: { index in |sigs| where one finds |sig| }
         ranked[binary_search_first((int i)bool: leq(sig,list[i]), 0,#list)]
   , sizes = [int]: { |for w in classes do 696729600\centralizer_order(w)| }
     [1,120,3780,2240,80640,45360,37800,580608
     ,604800,907200,3150,37800,100800,268800,113400,151200
     ,1209600,1814400,5806080,1612800,4838400,1209600,2721600,37800
     ,453600,1209600,3628800,4838400,6451200,806400,1612800,89600
     ,907200,7257600,10886400,11612160,7257600,14515200,24883200,3780
     ,680400,604800,2419200,5443200,8709120,8709120,2419200,100800
     ,1209600,3225600,5443200,19353600,24883200,14515200,11612160,5806080
     ,10886400,268800,1612800,2419200,80640,453600,120,14515200
     ,19353600,2419200,4838400,268800,1209600,9676800,14515200,17418240
     ,11612160,24883200,43545600,45360,907200,3628800,1814400,14515200
     ,17418240,29030400,23224320,29030400,34836480,12902400,23224320,6451200
     ,24883200,2419200,9676800,2419200,1161216,4838400,2419200,11612160
     ,12902400,3628800,580608,5443200,4480,89600,268800,403200
     ,806400,1209600,1161216,15120,2240,37800,4480,1
     ]
   , pows = [[int]]: { list |i| gives class of powers 2..order\2 of class |i| }
     [[],[],[],[],[3,1],[2],[],[7]
     ,[3,2],[2],[],[10],[3,10],[],[],[2]
     ,[8,15,3,16,2],[11,17,10],[7,18,7,1],[13,1],[13,6],[3,6],[2],[]
     ,[10],[3,23],[8,5,3,26,2],[29,11,31,27,10],[28,31,28],[31,10],[13,10],[]
     ,[2],[8,32,3,33,2],[11,34,10],[35,7,35,3,7,35]
       ,[8,9,3,36,2],[13,14],[38,38],[]
     ,[10],[3,39],[13,39],[40,43,10],[7,44,7,39],[7,45,7,2],[13,2],[3,10]
     ,[47,11,3,48,10],[13,10],[14],[28,57,28,51,31,51,28,62]
         ,[38,52,38,52,38,62],[29,61,31,53,10]
         ,[35,55,35,60,7,54,35,55,3,54,7,54,35,62],[7,55,7,62]
     ,[40,56,10],[31,62],[13,62],[31,6],[3,62],[10],[],[29,24,31,63,10]
     ,[28,67,28,64,31,64,28,1],[31,23],[13,23],[31,1]
         ,[8,15,3,68,2],[46,15,13,69,2]
         ,[48,17,47,70,11,70,3,17,48,70,10],[45,71,7,5,45,71,7,71,2]
     ,[35,18,35,4,7,72,35,18,3,72,7,72,35,1],[38,73,38,73,38,1],[50,74,14],[2]
       ,[39],[8,75,3,77,2],[11,78,10],[48,78,47,79,11,79,3,78,48,79,10]
     ,[45,80,7,75,45,80,7,80,2],[42,76,13,81,39]
              ,[86,92,86,100,106,82,86,92,110,82,106,82,86,111]
	      ,[89,97,100,83,107,83,110,97,89,83,111]
	    ,[92,84,106,107,92,84,106,84,111],[96,101,96,85,31,85,96,111]
	    ,[86,106,86,110,106,86],[28,101,28,87,31,87,28,111]
     ,[38,88,38,88,38,111],[100,107,110,89,111]
            ,[102,107,13,90,111],[103,109,110,91,10]
	    ,[106,92,106,111],[29,109,31,93,10]
            ,[103,11,110,94,10],[35,98,35,108,7,95,35,98,3,95,7,95,35,111]
     ,[96,31,96],[107,97,111],[7,98,7,111],[40,99,10]
       ,[110,111],[31,111],[13,111]
     ,[110,10],[31,10],[47,109,3,105,10],[106],[111],[3,111],[10],[],[]
     ]
in W_class_table ( rd
		 , classes
		 , (int i) int: sizes[i]
		 , (WeylElt w) int: lookup(class_signature_E8(w))
		 , (int i,int k) int: { lookup(cycle_power(sigs[i],k)) }
		   let n=classes[i].order, pow=pows[i] in
		   if (k%:=n)<2 then case k in 0,i esac
		   elif k<=n\2 then pow[k-2]
		   elif k=n-1 then i
		   else pow[n-k-2]
		   fi
		 )

{ we shall do storage of the class table for one particular E8 root datum }
set !standard_datum_E8 = RootDatum: simply_connected("E8")

{ voluntarily override previous definition to memoize for |standard_datum_E8| }
set class_table_E8 = (RootDatum->WeylClassTable):
   let Wct= trivial_class_table { place holder value }
in (RootDatum rd) WeylClassTable:
   if rd != standard_datum_E8 then class_table_E8(rd) { this is not recursion! }
   elif =Wct.root_datum.rank { whether this is the first time we are called }
   then Wct:=class_table_E8(rd) { compute and store the first time }
   else Wct { any next time just return the previously computed value }
   fi

set class_table_E8 () = WeylClassTable: class_table_E8(standard_datum_E8)

set GAP_reorder_E8 (WeylClassTable Wct) = [int]: { map GAP to |Wct| numbers }
   let Wct_prof = mat: { with shape (5,25) }
      let reps=Wct.class_representatives, sizes=Wct.class_sizes in
      5 # for j:Wct.n_classes
          do [ reps[j].order
	     , sizes[j]
	     , Wct.sign[j]
	     , Wct.reflection[j]
	     , Wct.reflection[Wct.class_power(j,3)]
	     ]
	  od
   then profile_ranked = [int]: { columns |eg_gap_profile| ranked }
      sort(#e8_gap_profile
          ,(int i,int j): lex_lesseq(e8_gap_profile[i],e8_gap_profile[j])
	  )
   , Wct_ranked = { columns of |Wct_prof| ranked by |lex_lesseq| }
      sort(#Wct_prof,(int i,int j): lex_lesseq(Wct_prof[i],Wct_prof[j]))
   in compose_permutations(Wct_ranked,inverse(profile_ranked))


set class_table_E (int n) = WeylClassTable:
   case n-6
   in class_table_E6(), class_table_E7(), class_table_E8()
   else error("Inexistent type E",n)
   esac


{				The synthesis				}

set simple_class_table (LieType lt) = WeylClassTable:
(  let (letter,rank)=lt.simple_type { this also asserts that |lt| is simple }
in case ascii(letter)-ascii("A")
   in let (table) = class_table_A(SL(rank+1)) in table
   ,  let (table) = class_table_B(rank) in table
   ,  let (table) = class_table_C(rank) in table
   ,  let (table) = class_table_D(rank) in table
   ,  class_table_E(rank)
   ,  class_table_F(4)
   ,  class_table_G(2)
   else error("Classification of simple types exploded!")
   esac
)

set class_table_simple (RootDatum rd,string letter,int n) = WeylClassTable:
   case ascii(letter)-ascii("A")
   in let (table) = class_table_A(rd) in table
   ,  let (table) = class_table_B(rd) in table
   ,  let (table) = class_table_C(rd) in table
   ,  let (table) = class_table_D(rd) in table
   , case n-6
     in class_table_E6(rd), class_table_E7(rd), class_table_E8(rd)
     esac
   , class_table_F(rd)
   , class_table_G(rd)
   esac

{ the name of this function highlights that it does considerable work }
set construct_class_table (RootDatum rd) = WeylClassTable:
   let (Lie_type,map) = Cartan_matrix_type(rd.Cartan_matrix)
   then simples = simple_factors(Lie_type)
   then root_data = [RootDatum]: { subdata with a single simple factor + torus }
      let offset=0 in
      for (,rank) in simples
      do sub_datum(rd,for i:rank do map[offset+i] od)  next offset+:=rank
      od
   then simple_tables = [WeylClassTable]: { tables for each of |root_data| }
      for rdi@i in root_data
      do let (letter,n)=simples[i] in class_table_simple(rdi,letter,n)
      od
in combine(rd,simple_tables)
