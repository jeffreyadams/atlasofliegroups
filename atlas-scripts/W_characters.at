<basic.at
<elliptic.at { for |elliptics_for_Levi@(RootDatum,[int])| }
<sort.at { for sorting lists of posroot indices }
<Weylgroup.at { for |order_W@RootDatum|, |root_reflection@(RootDatum,vec)| }
<W_orbit.at { for |W@RootDatum| }
<tabulate.at { for |tabulate| }
<cyclotomic.at {for |product_of_cyclotomic|}

{ The purpose of this file is working with Weyl group characters.

  A large initial part is dedicated to deciding conjugacy in the Weyl group, and
  finding an explicit witness of conjugacy from a class represntative.

}

{ Preliminary: some transformations of presentation of a Levi system

  A Levi system, not necessarily standard, can be defined either by the roots
  forming a simple system for it (represented by their indices, usually within
  |posroots(rd)|, though the code handles negative indices of negative roots
  too), or by a predicate selecting the indices of positive roots in the system.

  The function |Levi_info| deduces the predicate from the simple system, or from
  a Weyl group element $w$ (selecting coroots vanishing on $w$-fixed weights),
  and |Levi_datum| builds the root datum for the subsystem, given the predicate.
}

{ select posroots indices for (non standard) Levi, given by its simple system }
set Levi_info (RootDatum rd, [int] Levi) = (RootDatum,(int->bool)):
   let orth=kernel(rd.rank ^ for i in Levi do coroot(rd,i) od) in
   (rd,(int j) bool: =coroot(rd,j)*orth)

{ the |select| predicate for the above functions to use for a given |w| }
set Levi_info (WeylElt w) = (RootDatum,(int->bool)):
   let orth=eigen_lattice(matrix(w),1), rd=w.root_datum in
   (rd,(int i) bool: =coroot(rd,i)*orth)

set Levi_datum (RootDatum rd, (int->bool) select {from posroot indices}) =
      RootDatum:
   root_datum(simple_system_from_positive
      (columns_with(select,rd.posroots),columns_with(select,rd.poscoroots)) )

set Levi_datum ((RootDatum,[int])pair) = RootDatum: pair.Levi_info.Levi_datum
set Levi_datum (WeylElt w) = RootDatum: w.Levi_info.Levi_datum

{ A first task is to list the $W$ conjugacy classes.

  Every Weyl group element $w$ has an associated Levi subgroup (not necessarily
  standard), whose roots are those whose reflections fix all weights fixed by
  $w$ (its eigenspace for $1$ in the reflection representation). Then $w$ is in
  the Weyl group of this Levi subgroup, and by construction is elliptic there.

  The Weyl subgroup of any Levi subgroup is conjugate in $W$ to that of a
  standard Levi subgroup, so for the purpose of finding the conjugacy classes of
  $W$ it suffices to consider only standard Levi subgroups. A first task is to
  classify standard Levi subgroups (determined by subsets of the simple roots)
  by conjugacy. It turns out that Levi subsystems (whether or not standard) are
  conjugate in $W$ if and only if their sum-of-posroots ($2\rho$) are conjugate.
  We also compute explicit conjugating elements between standard Levi systems.

  So compute $2\rho$ values for standard Levi subsystems, use |dominant| to
  decide $W$-conjugacy, and classify all subsets of the set of simple roots
  (from |power_set| in basic.at) by conjugacy of their associated $2\rho$s.
}

{ $2\rho$ for standard Levi, from predicate to |select| simple root indices }
set two_rho(RootDatum rd, (int->bool) select {from simple indices}) = vec:
  root_datum(columns_with(select,rd.simple_roots)
            ,columns_with(select,rd.simple_coroots)
            ).two_rho

{
  For each standard Levi system we determine the dominant orbit representative
  |rho2_dom| of $2\rho$, a Weyl group element |w0| that witnesses this, and the
  image under it of the Levi system (a non-standard Levi system $L$ whose value
  $2\rho_L$ equals |rho2_dom|, since the Levi system remains positive throughout
  the transformation). A conjugate standard Levi system will not necessarily map
  to the same non-standard Levi system $L$, whence we generate the orbit of the
  latter under the stabiliser subgroup of the |rho2_dom|, with witnesses.

  The orbit generation here is taylored to the specific situation that we know
  that all elements of the acting subgroup fix the $2\rho$ value for $L$, so the
  only way they can map all simple generators of $L$ to roots of $L$ is by
  permuting them among each other. Also since the $2\rho_L$ value is dominant,
  for the full system, and so a fortiori dominant for the positive roots in any
  system in the orbit of $L$, the acting stabiliser subgroup will map positive
  roots of $L$ to positive roots. We can then work with positive root indices
  only, act on lists of such indices, and sort the result to test for equality.
  }

set_type orbit_data = [int,WeylElt] { posroot set as binary number, conjugator }
set right_act([int] Levi,WeylElt w) = int: { encode |w^-1*Levi| in binary }
   let rd=w.root_datum in
   for i in Levi do 2^coroot_index(rd,coroot(rd,i)*w) od.sum
set unbinary (int bin) = [int]: let i=0 in
   while bin.>
   do let (q,r)=bin\%2 in if =r then [] else [i] fi
   next i+:=1; bin:=q
   od.##

{ list of (L,w) where 2rho(L)=dominant(2rho(Levi)) and L=w*Levi  }
set rho_stabiliser_orbit (RootDatum rd, [int] standard_Levi) = orbit_data:
   let (w0,rho2_dom) = from_dominant(rd,two_rho(rd,is_member(standard_Levi)))
   then rho_stabiliser = Levi_datum(rd,(int i)bool: =coroot(rd,i)*rho2_dom)
   then root_perm = { list of posroot permutations for stabiliser generators }
      let two=2/1 then pow2(int n)=int:floor(two^n) { negatives to 0 } in
      for beta in rho_stabiliser.simple_roots
      do for alpha in rd.posroots
         do root_index(rd,reflect(rd,beta,alpha)).pow2
	 od
      od
   then act(int i,[int] roots) = int:
      let map = root_perm[i] in for j in roots do map[j] od.sum
   , orbit = [(right_act(standard_Levi,w0),/w0)] { starting point }
   , current=0
   in while current<#orbit
      do let (L_bin,w)=orbit[current] next current+:=1 then L=L_bin.unbinary in
         for k:rho_stabiliser.semisimple_rank
         do let new_L_bin=act(k,L) in
            if none(#orbit,(int i): let (x,)=orbit[i] in x=new_L_bin)
            then orbit #:=
              (new_L_bin,root_reflection(rd,rho_stabiliser.simple_roots[k])*w)
            fi
         od
      od; orbit

{ group together conjugate standard Levis, with witness conjugating from first }
set classify_standard_Levis (RootDatum rd) =  [vec,[int],[[int],WeylElt]]:
   let classify_group ([[int]] list) = [vec,[int],[[int],WeylElt]]:
      let orbs=[orbit_data]: [], result=[vec,[int],[[int],WeylElt]]: [] in
      for Levi in list
      do let (w0,rho2_dom)=from_dominant(rd,two_rho(rd,is_member(Levi)))
         then i = first(#result,(int i)bool: let (v,,)=result[i] in v=rho2_dom)
      in if i.< { is this a previously unseen |rho2_dom| value }
         then orbs #:= rho_stabiliser_orbit(rd,Levi)
         ;  result #:= (rho2_dom,Levi,[])
         else { |rho2_dom| value already seen, and tabulated in |orbs[i]| }
            let orbit=orbs[i], L = right_act(Levi,w0)
            then pos = first(#orbit,(int i)bool: let (rts,)=orbit[i] in L=rts)
            in assert(pos.>=,"conjugate with dominant rho not found in orbit");
               let (rho2,L,v)= result[i], (,w)=orbit[pos] in
               result[i] := (rho2,L,v#(Levi,w0*w { Levi <-w0-- L <-w-- first }))
         fi
     od; result
  ,  r = rd.semisimple_rank
  in for k:r+1 do classify_group(choices_from(#r,k)) od.##

{ older method to do the same, but without searching for conjugacy witnesses }
set standard_Levi_conjugacy_representatives (RootDatum rd) = [ [int] ]:
begin
   let reps_by_rho ([[int]] list) = [[int]]:
       let rho2s = [vec]:[] { list of known dominant $2\rho$ values } in
     ##for subset in list
       do let rho2=dominant(rd,two_rho(rd,is_member(subset)))
       in if none(#rho2s,(int i)bool: rho2s[i]=rho2)
          then rho2s#:=rho2 { now we know |rho2|}; [subset] { contribute }
          else [] { |rho2| was already present, contribute nothing }
          fi
       od
   , r = rd.semisimple_rank
in { now apply |reps_by_rho| to each size class, and concatenate the results }
   for k:r+1 do reps_by_rho(choices_from(#r,k)) od.##
end

{ A second task is to enumerate elliptic conjugacy classes for each standard
  Levi subsystem. The function |elliptics_for_standard_Levi@(RootDatum,[int])|
  defined in elliptic.at accomplishes this, partly by explicit listing.
}

{. list of conjugacy class representatives of rd .}
set conjugacy_class_reps (RootDatum rd) = [WeylElt]:
##for subset in standard_Levi_conjugacy_representatives(rd)
  do elliptics_for_standard_Levi(rd,subset)
  od

set conjugacy_classes = conjugacy_class_reps@RootDatum

set elliptic_conjugacy_classes(RootDatum rd)=[WeylElt]:

##for w in conjugacy_classes(rd) do if is_elliptic(w) then [w] else [] fi od

{
  From $w$ we find the associated non-standard Levi subsystem, the minimal one
  in whose Weyl group $w$ occurs. Our next task, surprisingly difficult, is to
  find a standard Levi system conjugate to it, and a conjugating element of $W$.

  For the case where we are given a non standard list of simple generators (not
  all positive, and in arbitrary order) for the full root system, there is an
  easy algorithm to find $w$ (called |chamber| below) that maps the set of
  simple roots of |rd| to those generators, and the permutation of them (map
  from positions to simple root index being mapped to it) so obtained. It goes:
  as long as the system contains a negative root, select one (recording its
  position) and apply the corresponding (non simple) root reflection to all
  roots; ultimately all roots become positive, and as a set we have obtained the
  simple roots. The list of their indices is our permutation; as letters of $w$,
  from right to left, take for each reflection applied the simple generator that
  ended up at the recorded position. This is done in |chamber_max_system| below.

  Our approach is then to extend the Levi system one root at a time to a maximal
  system, and then apply this algorithm. To find a root by which we can extend
  the Levi system to a larger one, we first locate using |minimal_extenders| a
  set of candidates (root indices, not necessarily positive ones), whose roots
  are minimally positive for some some linear form vanishing on |Levi|. From
  these, |extend_Levi| will then select a minimal one for |Levi| root addition.
}

{ list of posroot indices, minimal>0 for some linear form vanishing on |Levi| }
set minimal_extenders (RootDatum rd,[int] Levi) = [int]:
   let orth = { columns: generators in $X_*$ of annihilator subspace of |Levi| }
      kernel(rd.rank ^ for i in Levi do root(rd,i) od)
in case a_column_with((vec alpha)bool: !=alpha*orth {@*(vec,mat)}, rd.posroots)
   | no_vec: [] { |Levi| already spans subspace containing all roots }
   | solution(alpha):
      { find a column |f| of |orth| (coweight) witnessing |alpha*orth| nonzero }
      let f = requisition(a_column_with((vec cowt)bool: !=cowt*alpha, orth))
      , min=0 { minimal positive coroot evaluation on |wt| so far; 0 if none }
      , result = [int]: [] { list of root indices with minimal positive eval }
      in for beta@i in rd.posroots
         do let eval=f*beta then abs_eval=eval.abs in
            if =eval then () { ignore roots on which |f| vanishes }
            elif min=0 or abs_eval<min { cases where |result| is replaced }
            then min:=abs_eval; result:=[if eval<0 then -1-i else i fi]
            elif abs_eval=min { ex aequo case, now |result| is extended }
            then result #:= if eval<0 then -1-i else i fi
            fi
         od
      ; result
   esac

set extend_Levi (RootDatum rd,[int] Levi) = [int]:
   let mins = minimal_extenders(rd,Levi) in
   for m in mins
   do let alpha=root(rd,m) in
      if none(#Levi,(int i): is_root(rd,alpha-root(rd,Levi[i])) )
      then return Levi#m { found a valid |m|, add it to Levi and return }
      fi
   od; assert(#mins=0); { if there were any candidates, one should work }
   [] { return indication that |Levi| was already maximal }

{ return maximal Levi containing |Levi|, ordered in the way they were found }
set maximise (RootDatum rd,[int] !Levi) = [int]:
   let ssr = rd.semisimple_rank, max=Levi in
   while #max<ssr do max:=extend_Levi(rd,max); assert(!=#max) od; max

{ find chamber defined by a maximal system, and its simple root permutation }
set chamber_max_system (RootDatum rd, [int] sys) = (WeylElt,[int]):
   let roots= rd.rank # for index in sys do root(rd,index) od
   , ssr=rd.semisimple_rank
   then positions = { a list of positions in |roots| (rather than a Weyl word) }
      assert(#sys=ssr) { first check that |sys| has enough roots };
      while let i=first(ssr,(int i)bool: not is_posroot(rd,roots[i])) in i.>=
      do roots := left_reflect(rd,roots[i],roots); i { record position }
     ~od
   then perm= for alpha in roots do root_index(rd,alpha) od
   in assert(all(ssr,is_member(perm)),"Not a complete system");
   (W_elt(rd,for pos in positions do perm[pos] od),perm)

set from_standard_Levi ((RootDatum,[int]) (rd,Levi):arg) =
      (WeylElt, [int]): { chamber, unsorted standard Levi }
   let (chamber,perm) = chamber_max_system(rd,maximise(arg)) in
   (chamber,perm[:#Levi] { select start of simple indices list })

set standard_Levi_lookup (
      RootDatum rd,[vec,[int],[[int],WeylElt]] table) = ([int]->WeylElt, [int]):
([int] unsorted_standard_Levi) (WeylElt, [int]):
   let rho2 = dominant(rd,two_rho(rd,is_member(unsorted_standard_Levi)))
   , standard_Levi=unsorted_standard_Levi.sort
   then (,Levi_repr,others) =
      table[first(#table,(int i)bool: let (r,,)=table[i] in r=rho2)]
in if standard_Levi=Levi_repr
   then (id_W(rd),standard_Levi)
   else let (,conj) =
      others[first(#others,(int i)bool: let (L,)=others[i] in L=standard_Levi)]
      in (conj , Levi_repr)
   fi


{ value of $2\rho$ for not necessarily standard Levi, from Levi info }
set subsystem_2rho (RootDatum rd, (int->bool) select {from posroot indices}) =
      vec: { two_rho(Levi_datum(rd,select)), but we can compute it directly: }
   sum(rd.rank #
       ##for alpha@i in rd.posroots do if select(i) then [alpha] else [] fi od)

set Levi_of (WeylElt w) = [int]: { posroot indices for simples of |w| system }
   let (rd,):Levi_info=w.Levi_info
   then Ld=Levi_datum(Levi_info), rho2_L = subsystem_2rho(Levi_info)
in for alpha_v in columns_with(is_simple_for(rho2_L),Ld.poscoroots)
   do coroot_index(rd,alpha_v) od

{ partial work: find some standard Levi conjugate to that of |w| }
set conjugate_from_standard_Levi (WeylElt w) =
       (WeylElt,[int],WeylElt): { conjugator from, standard Levi, conjugate w }
   let (chamber,unsorted_standard_Levi)
      = from_standard_Levi(w.root_datum,Levi_of(w))
   in (chamber,unsorted_standard_Levi.sort,/chamber*w*chamber)

set Levi_lookup (
      RootDatum rd,[vec,[int],[[int],WeylElt]] table) = ([int]->WeylElt,[int]):
   let lookup = standard_Levi_lookup(rd,table) in
([int] Levi) (WeylElt, [int]):
   let (chamber,unsorted_standard_Levi) = from_standard_Levi(rd,Levi)
   then (conj,Levi) = lookup(unsorted_standard_Levi)
   in (chamber*conj,Levi)

{ like |conjugate_from_standard_Levi|, using standard Levi chosen from |table| }
set conjugate_from_classified_standard_Levi (
      RootDatum rd,[vec,[int],[[int],WeylElt]] table) =
   let lookup = Levi_lookup(rd,table) in
(WeylElt w) (WeylElt,[int],WeylElt):
   let (conj,Levi) = lookup(Levi_of(w)) in (conj,Levi,/conj*w*conj)

{ A third task is to test for conjugacy in $W$.

  The above allows us to conjugate any $w$ a Weyl group element to one that is
  elliptic (up to a torus part) for a standard Levi system. However, the problem
  of deciding conjugacy of elliptic elements in a given standard Levi subgroup
  and producing a witness does not seem essentially simpler than the same
  problem in the full Weyl group.

  Therefore, we use for the moment a method for deciding conjugacy that does not
  produce any witness, and is not entirely complete. It basically compares
  characteristic polynomials, but adds a special test to discriminate between
  two classes of elliptic elements for F4 that share a characteristic polynomial
  (an outer automorphism switches them). This method does not work when the
  implied Levi subsystem is composite and contains a factor F4.
}

{ conjugacy test; not complete for composite types with a F4 factor
use is_conjugate_strong instead (see below)}
set is_conjugate (WeylElt x,WeylElt y) = bool:
   { there follows a rather complicated and/or expression: }
   let rd=x.root_datum in y.root_datum=rd { easy and necessary } and
   char_poly(matrix(x))=char_poly(matrix(y)) { easy and necessary } and
(  let L_x = x.Levi_info, L_y = y.Levi_info
in dominant(rd,subsystem_2rho(L_x))=dominant(rd,subsystem_2rho(L_y)) and
(  let Levi_x = Levi_datum(L_x) then factors = Levi_x.Lie_type.simple_factors
in none(for (code,) in factors do code="F" od) { done unless F4 factors } or
(  assert(#factors=1,"Can't handle composite Levi subgroups with F4 factor")
;  if order(x)=6 and length(x)=10 { the hard case } else true
   then let is_negated(WeylElt w,RootDatum rd) = (int->bool):
      let M = w.matrix+1 in (int i)bool: =M*root(rd,i) { root in -1 eigenspace }
      , Levi_y = Levi_datum(y)
      then alpha = root(Levi_x,first(24,is_negated(x,Levi_x)))
      ,    beta =  root(Levi_y,first(24,is_negated(y,Levi_y)))
   in dominant(rd,alpha)=dominant(rd,beta) { whether these have same length }
   fi
)))

{ some simple functions that exploit the conjugacy test }
set conjugacy_class_rep (WeylElt w, [WeylElt] classes) = WeylElt:
   for rep in classes do if is_conjugate(w,rep) then return rep fi od;
   error("missing class")

set conjugacy_class_rep (WeylElt w) = WeylElt:
  conjugacy_class_rep(w,conjugacy_class_reps(w.root_datum))
{----------------------------------------------------------------------------}
{Alternative version, using He's algorithm to compute minimal length
representatives of a conjugacy class}

set find([WeylElt] list,WeylElt w)=first(for y in list do y=w od)

{algorithm to compute minimal length representatives directly by
induction
algorithm (due to He):
one can conjugate w to a minimal length representative
 one simple, weakly length decreasing conjugation at a time
 (also: given one minimal length representative, get them
  all by conjugating without increasing the length)
So: given class=[w_1,...,w_n] all of which are conjugate and the same length
compute s_i*w_j*s_i for all simple s_i
keep a list shorter of all shorter ones
add to class if same length
if #shorter>0 start over with this
else if class has gotten longer, repeat
else return class
includes witnesses
}
set rec_fun minimal_representatives_witnesses([WeylElt] class,[WeylElt] witnesses)=([WeylElt],[WeylElt]):
let rd=class[0].root_datum then
shorter=[WeylElt]:[] then
witnesses_shorter=[WeylElt]:[] then
absent([WeylElt] elements,WeylElt x) = none(for y in elements do @: y=x od) then
new_same_length=false in
for s:rd.ss_rank do
 for w@i in class do
  let sws=s#w#s,sw=s#w in
   if length(sws)<length(w) and absent(shorter,sws) then shorter#:=sws;witnesses_shorter#:=sw*witnesses[i]
    elif length(sws)=length(w) and absent(class,sws) then new_same_length:=true; class#:=sws;witnesses#:=sw*witnesses[i]
   fi
  od
od;
if #shorter>0 then minimal_representatives_witnesses(shorter,witnesses_shorter)
elif new_same_length then minimal_representatives_witnesses(class,witnesses)
else (class,witnesses)
fi

set minimal_representatives_witnesses(WeylElt w)=([WeylElt],[WeylElt]):minimal_representatives_witnesses([w],[id_W(w.root_datum)])
set minimal_representative_witness(WeylElt w)=(WeylElt,WeylElt):
 let (class,witnesses)=minimal_representatives_witnesses(w) in (class[0],witnesses[0])

set minimal_representatives(WeylElt w)=[WeylElt]:let (reps,)=minimal_representatives_witnesses(w) in reps
set minimal_representative(WeylElt w)=WeylElt:minimal_representatives(w)[0]

set is_conjugate_strong(WeylElt x,WeylElt y)=bool:
find(minimal_representatives(x),minimal_representative(y))!=-1

{----------------------------------------------------------------------------}



{ brute force enumerate the conjugacy class of |w|, with conjugacy witnesses }
set conjugators_and_conjugacy_class (WeylElt !w0) = ([WeylElt],[WeylElt]):
   let rd=w0.root_datum, class = [w0]
   then conjugators= [id_W(rd)], current=0, ssr=semisimple_rank(rd)
   , absent (WeylElt x) = none(for y in class do @: y=x od)
in while current<#class
   do let c = conjugators[current], w=class[current] in current+:=1
   { assert(w=c*w0*/c); }
   ;  for s:ssr
      do let sws=s#w#s in
         if absent(sws) then class #:= sws; conjugators #:= s#c fi
      od
   od; (conjugators,class)

set full_conjugacy_class (WeylElt w) = [WeylElt]:
   let (,class)=conjugators_and_conjugacy_class(w) in class

set full_centraliser (WeylElt w) = [WeylElt]:
   ##for x in W(w.root_datum) do if x*w=w*x then [x] else [] fi od

set conjugator (WeylElt x, WeylElt w) = WeylElt: { find v such that x=v*w*/v }
   assert(is_conjugate(x,w),"Weyl group elements are not conjugate");
   let (conjugators,class)=conjugators_and_conjugacy_class(w) in
   conjugators[last(#class,(int i)bool: class[i]=x)]

{ The next task is to determine the order of a conjugacy class of |w| without
  enumerating it, computing using some basic group theory. Since we shall reduce
  to a minimal (non standard) Levi subsystem in whose Weyl group |w| lives, we
  can compute the order of its centralizer in that Weyl group, where it is
  elliptic. This will allow computing the order of the conjugacy class in the
  Levi Weyl group, but this needs to be multiplied by the number of Levi systems
  conjugate to the one at hand. This is the index in $W$ of the normaliser $N_L$
  of the Levi system, but we cannot find the size of $N_L$ without some amount
  of explicit enumeration. We first do a direct approach, then an improvement.

  The function |Levi_orbit| generates the orbit under $W$ of a Levi subsystem,
  represented by the indices of the positive roots forming its simple
  generators. It uses the fact that simple reflections have an easy action on
  such sets of postive roots: either the set contains the simple root for the
  applied reflection, in which case the Levi system is unchanged so no new orbit
  element is produced, or else one just reflects each of the generators for the
  Levi system, which remain positive. One does need to sort the result in order
  to have a unique representation of each simple system, for equality testing.
}

{ $W$-orbit of (non standard) Levi subsystem, represented by simple systems }
set Levi_orbit (RootDatum rd, [int] Levi { posroot indices } ) = [[int]]:
   let root_perm =
     for i:rd.semisimple_rank
     do for alpha in rd.posroots do root_index(rd,W_gen(rd,i)*alpha) od
     od { this is negative on the main diagonal, but those entries are unused }
   then act(int i,[int] roots) = (bool,[int]):
      if is_member(roots)(i)
      then (false,roots) { Levi's own simple reflection normalises system }
      else (true, let map = root_perm[i] in for j in roots do map[j] od.sort)
      fi
   , orbit = [Levi], current=0
in while current<#orbit
   do let L=orbit[current] in current+:=1
   ;  for s:rd.semisimple_rank
      do let (moved,M)=act(s,L) in
         if moved and none(#orbit,(int i):orbit[i]=M) then orbit #:= M fi
      od
   od; orbit


{ Computing just the size of this Levi orbit can be done a bit more efficiently
  than generating it, though it requires a some preliminary computation. The
  idea is to use the stabiliser subgroup $M$ in $W$ of $\rho_L$; though it does
  not contain $N_L$, the intersection $M\cap N_L$ has known index in $N_L$,
  namely the size of $W_L$ (every coset by $W_L$ meets the intersection
  uniquely). So we generate the (hopefully small) orbit under $M$ of images of
  the Levi system, then by dividing the size of $M$ by that of the orbit find
  the size of the intersection, which multiplied by that of $W_L$ gives the size
  of $N_L$, and dividing the size of $W$ by that gives our Levi orbit size.

  The orbit generation here is taylored to the specific situation, whence we do
  it using local code (the |begin|-|end| block below) rather than writing or
  using a more general orbit generation. The special circumstance is that we
  know that all elements of the acting subgroup fix $\rho_L$, so the only way
  they can map all simple generators of $L$ to roots of $L$ is by permuting them
  among each other. We can then ignore the distinction between a root and its
  opposite (working only with positive root indices) and not worry about
  choosing the simple generators for the positive part of each Levi system
  (which is why we had to single out the "do nothing" case above): the Levi
  system implied by a set of indices is the one additively generated by those
  roots and their opposites, and this results in the same system only if the
  indices are the same up to permutation. So again we can use an equality test
  for orbit membership, provided we sort our lists of indices to be increasing.
}

set Levi_normalizer_index ((RootDatum,(int->bool))(rd,select):Levi_info) = int:
   let rho2_L = subsystem_2rho(Levi_info)
   then rho_L_stabiliser = Levi_datum(rd,(int i)bool: =coroot(rd,i)*rho2_L)
   then stab_orbit = [[int]]:
      begin
      let root_perm =
         let ab (int i) = int: if i.< then -1-i else i fi { to positive index }
         in for beta in rho_L_stabiliser.simple_roots
            do for alpha in rd.posroots
               do root_index(rd,reflect(rd,beta,alpha)).ab
               od
            od
      , Levi = { indices in |rd| for simple system of Levi }
         list(rd.nr_of_posroots,(int i): select(i) and coroot(rd,i)*rho2_L=2)
      then act(int i,[int] roots) = [int] :
         let map = root_perm[i] in for j in roots do map[j] od.sort
      , orbit = [Levi]
      , current=0
      in while current<#orbit
         do let L=orbit[current] in current+:=1
         ;  for k:#root_perm
            do let M=act(k,L) in
               if none(#orbit,(int i):orbit[i]=M) then orbit #:= M fi
            od
         od
      ; { stab_orbit = } orbit
      end
   in rho_L_stabiliser.order_W \ #stab_orbit { index of $W_L$ in $N_L$ }

set Levi_orbit_size ((RootDatum,(int->bool))(rd,):Levi_info) = int:
  rd.order_W \ (Levi_info.Levi_normalizer_index * Levi_info.Levi_datum.order_W)

{ Now onward to the task of getting the size of the conjugacy class of |w| in
  for |Levi_datum(w)|, where ignoring the central torus it is elliptic. This
  root datum can have multiple simple factors, and we can decompose |w| as
  commuting product of elements of the Weyl groups of the simple factors, and
  its conjugacy class will be the Cartesian product of the conjugacy classes of
  the factors (the same goes for the centraliser). The following function
  determines this decomposition, where each |WeylElt| in the result is
  associated to a different root datum, which is simple up to a central torus.
}

set elliptic_simple_decomposition (WeylElt w) = [WeylElt,(string,int)]:
   let rd_L = Levi_datum(w)
   then (type,map)=Cartan_matrix_type(rd_L.Cartan_matrix)
   then codes = type.simple_factors, w_L=W_elt(rd_L,w.matrix) { convert }
   , offset=0 { rank within |type| already seen in loop below }
   , !r = rd_L.rank { full rank, needed when gathering roots/coroots }
in for (,rank):code in codes { traverse the simple factors }
   do let sub_map = map[offset:offset+rank] { index mapping for this factor }
      then factor_word =
	 ## for s in w_L.word
	    do let i=find(sub_map,s) in if i.>= then [i] else [] fi
	    od
      , simple_datum = root_datum
	( r # for i in sub_map do rd_L.simple_roots[i]   od
	, r # for i in sub_map do rd_L.simple_coroots[i] od
	)
   in ( W_elt(simple_datum,factor_word), code )
   next offset +:= rank
   od

set centralizer_order = (WeylElt->int):
  let elliptic_simple_order(WeylElt w,(string type, int rank)) = int:
     { here |w| is elliptic, with simple associated datum of given type,rank }
     case char_index(type,"ABCD")
     in rank+1 { type $A_n$ has unique elliptic, an $n+1$ cycle permutation }
     , order_of_centralizer_elliptic_BCD(w)
     , order_of_centralizer_elliptic_BCD(w)
     , order_of_centralizer_elliptic_BCD(w)
     else exceptional_elliptic_centr_order(type,rank,w.matrix.char_poly)
     esac
  in { centralizer_order = }
  (WeylElt w) int:
    for (w_i,type_rank) in elliptic_simple_decomposition(w)
    do elliptic_simple_order(w_i,type_rank)
    od . product * Levi_normalizer_index(w.Levi_info)

{. number of elements of a conjugacy class .}
set size_of_conjugacy_class (WeylElt w) = int:
  w.root_datum.order_W \ w.centralizer_order
set sizes_of_conjugacy_classes (RootDatum rd) = [int]:
  for w in conjugacy_class_reps(rd) do w.size_of_conjugacy_class od

{ test: sum of sizes of conjugacy class = |W| }
set test_size_of_conjugacy_classes (RootDatum rd) = (int,int):
  let c=conjugacy_classes(rd) in
  (sum(for w in c do  size_of_conjugacy_class(w)  od), order_W(rd))

{. print order, length, Levi.}
set print_conjugacy_classes ([WeylElt] C) = void:
  let data=["order","length","Levi"] { column headers }
  # for w in C
    do [ w.order.to_string
       , w.length.to_string
       , w.Levi_datum.Lie_type.semisimple.str
       ]
    od
  in tabulate(data,"rrl",2," ")

{. print order, length, Levi.}
set print_conjugacy_classes_med ([WeylElt] C) = void:
  let data=["order","length","Levi","Cyclotomic"] { column headers }
  # for w in C
    do [ w.order.to_string
       , w.length.to_string
       , w.Levi_datum.Lie_type.semisimple.str
       , product_of_cyclotomic(rat_poly:("q",char_poly(w),())).to_string
       ]
    od
  in tabulate(data,"rrrl",2," ")

set print_conjugacy_classes_long ([WeylElt] C) = void:
  let data=["order","length","Levi","size","word"] { column headers }
  # for w in C
    do [ w.order.to_string
       , w.length.to_string
       , w.Levi_datum.Lie_type.semisimple.str
       , w.size_of_conjugacy_class.to_string
       , w.word.to_string
       ]
    od
  in tabulate(data,"rrlll",2," ")

set print_conjugacy_classes (RootDatum rd) = void:
  print_conjugacy_classes(conjugacy_class_reps(rd))
{set print_conjugacy_classes_med (RootDatum rd) = void:
  rd.conjugacy_class_reps.(sort_by(order@WeylElt)).print_conjugacy_classes_med}
set print_conjugacy_classes_long (RootDatum rd) = void:
  rd.conjugacy_class_reps.(sort_by(order@WeylElt)).print_conjugacy_classes_long

{. print elliptic classes only .}
set print_elliptic_conjugacy_classes (RootDatum rd) = void:
  print_conjugacy_classes(sort_by(order@WeylElt)(elliptic(rd)))
set print_elliptic_conjugacy_classes_long (RootDatum rd) = void:
  rd.elliptic.(sort_by(order@WeylElt)).print_conjugacy_classes_long

{. w\in W is conjugate to classes[i] .}
set conjugacy_class_number (WeylElt w) = int:
  let classes=w.root_datum.conjugacy_class_reps in
  first(#classes, (int i)bool: is_conjugate(w,classes[i]))

set_type
[ WeylClassTable =
  ( (->) print_classes
  , int n_classes
  , (->[WeylElt]) class_representatives
  , (WeylElt->int) class_of
  , (->[int]) class_sizes
  , (int,int->int) class_power
  , [int] trivial
  , [int] sign
  , [int] reflection
  , ([int]->int) dimension
  , ([int]->int) norm2
  , ([int],[int]->int) inner
  , ([int],[int]->[int]) direct_sum
  , ([int],int->[int]) Cartesian_power
  , ([int],[int]->[int]) tensor
  , ([int],int->[int]) tensor_power
  , (int->[int]) sym_power_refl
  , mat characters
  )
]

set W_class_table (RootDatum rd) = WeylClassTable:
   let !reps  = [WeylElt]: conjugacy_class_reps(rd)
   then !sizes = [int]:     for w in reps do w.size_of_conjugacy_class od
   , !ncc = #reps { number of conjugacy classes }
   , class_of (WeylElt w)= int: first(#reps,(int i): is_conjugate(reps[i],w))
   , !nW = rd.order_W
   then inner ([int] x, [int] y) = int:
     assert(#x=ncc and #y=ncc,"Wrong sizes");
     let s = for size@i in sizes do size*x[i]*y[i] od.sum then (q,r)=s \% nW in
     if =r then q else error("Non integer inner product ",s/nW) fi
   , sum ([int] x, [int] y) = [int]: for xi@i in x do xi+y[i] od
   , product ([int] x, [int] y) = [int]: for xi@i in x do xi*y[i] od
   , power_map = [vec]: for w in reps do for i:w.order do class_of(w^i) od od
   , refl_char = for w in reps do w.matrix.trace od
   then reflection_sympowers =
        for :ncc do 1 od # for :rd.nr_of_posroots do [int]:[] od
   , k=0 { last symmetric power computed}
   , Adams_refl(int n) = [int]: for v in power_map do refl_char[v[n % #v]] od
in
( {print_classes} @:
   let data = for w in reps
     do [ w.order.to_string
        , w.length.to_string
        , w.Levi_datum.Lie_type.semisimple.str
        ]
     od
   in tabulate(data,"rrl",2," ")

, {n_classes} ncc
, {class_representatives} @: reps
, {class_of} class_of
, {class_sizes} @: sizes
, {class_power} (int i,int n) int: let v=power_map[i] in v[n % #v]
, {trivial}     for :ncc do 1 od
, {sign}        for w in reps do minus_1^w.length od
, {reflection}  for w in reps do w.matrix.trace od
, {dimension}   ([int] val) int: val[class_of(id_W(rd))]
, {norm2} ([int] x) int: inner(x,x)
, {inner} inner
, {direct_sum}
  (([int],[int])(x,y):pair) [int]:
  assert(#x=ncc and #y=ncc,"Wrong sizes"); sum(pair)
, {Cartesian_power}
  ([int] x,int n) [int]: assert(#x=ncc,"Wrong size"); for v in x do n*v od
, {tensor}
  (([int],[int])(x,y):pair) [int]:
  assert(#x=ncc and #y=ncc,"Wrong sizes");  product(pair)
, {tensor_power}
   ([int] x, int n) [int]: assert(#x=ncc,"Wrong size"); for xi in x do xi^n od
, {sym_power_refl}
  (int n) [int]: assert(n<=rd.nr_of_posroots,"Bounded symmetric power table");
     while k<n
     do let acc = Adams_refl(k+:=1)
     in for i:k-1 from 1
        do acc := sum(acc,product(reflection_sympowers[i],Adams_refl(k-i)))
        od
     ;  reflection_sympowers[k] := for s in acc do s\k od
     od
  ;  reflection_sympowers[n],
  [for :ncc do 1 od {trivial}, for w in reps do minus_1^w.length od {sgn}, for w in reps do w.matrix.trace od {reflection}]
)

{. root datum of WeylClassTable .}
set root_datum (WeylClassTable tab) = RootDatum:
    tab.class_representatives()[0].root_datum { at least one class exists }

{ compare characters when paired up with a |WeylClassTable| }
set =((WeylClassTable ct,[int] char_values)
     ,(WeylClassTable ct2,[int] char_values2)) = bool:
     ct.root_datum=ct2.root_datum and char_values=char_values2

{. index i for which w is conjugate to classes[i], in given WeylClassTable .}
set conjugacy_class_number (WeylClassTable ct,WeylElt w) = int: ct.class_of(w)

{. value of character at w\in W .}
set character_value (WeylClassTable ct, WeylElt w,[int] char) = int:
  char[ct.class_of(w)]

{ Adams's operation (not Jeff's): evaluate character at class of $w^n$ }
set Adams (WeylClassTable tab) = ([int]char, int n) [int]:
   for i:tab.n_classes do char[tab.class_power(i,n)] od

{ symmetric power of a character }
set sym_power (WeylClassTable tab) = ([int]char, int n) [int]:
{ with $h_k$ symmetric, $p_k$ Adams, use $kh_k=\sum_{i=0}{k-1} h_ip_{k-i}$ }
   let { define two local tables of characters, to be expanded in loop }
     p = { "power sum polynomials", results of Adams operations } [[int]]: [ ]
         { since there is no $p_0$, the $k$-the Adams operation gives the entry
           |p[k-1|, but never mind since we will always reverse-index |p| }
   , h = { "complete homogeneous polynomials", symmetric powers } [tab.trivial]
   , Adams = tab.Adams { shorthand }
in for k:n from 1
   do p #:= Adams(char,k) { expand }
   ;  let sum=p~[0]
   in for i:k-1 from 1 do sum:=tab.direct_sum(sum,tab.tensor(h[i],p~[i])) od
   ; h #:= for s in sum do s\k od { expand table by |sum\k| }
   od; h[n] { last symmetric power is the one we want }

{ exterior power of a character }
set ext_power (WeylClassTable tab) = ([int]char, int n) [int]:
{ with $e_k$ ext, $p_k$, use $ke_k=\sum_{i=0}{k-1}(-1)^{k-i-1} e_ip_{k-i}$ }
   let { define two local tables of characters, to be expanded in loop }
    sp = { "signed power sum polynomials", $(-1)^{i-1}p_i$ } [[int]]: [ ]
         { since there is no $p_0$, the $k$-the Adams operation gives the entry
           |p[k-1|, but never mind since we will always reverse-index |p| }
   , e = { "elementary symmetric polynomials", exterior powers } [tab.trivial]
   , Adams = tab.Adams { shorthand }
in for k:n from 1
   do sp #:= tab.Cartesian_power(Adams(char,k),minus_1^(k-1)) { expand }
   ;  let sum=sp~[0]
   in for i:k-1 from 1 do sum:=tab.direct_sum(sum,tab.tensor(e[i],sp~[i])) od
   ; e #:= for s in sum do s\k od { expand table by |sum\k| }
   od; e[n] { last symmetric power is the one we want }
