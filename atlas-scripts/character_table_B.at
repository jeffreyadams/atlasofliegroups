<basic.at
<character_tables.at
<classical_W_classes_and_reps.at { for type abbreviation |BC_class|, |cycles| }
<character_table_C.at

{     type B     }

{ for general type B root data, we need to look up and use the diagram order }
set conjugacy_class_B(RootDatum rd) = (BiPartition->WeylElt):
   let map = test_simple_type("B",rd) then n=#map in
   (BiPartition pair) WeylElt:
(  let size = rank(pair)
in assert(size=n,"Cycles sum to "+size+" rather than "+n)
;  W_elt(rd,for s in class_word_BC(pair) do map[s] od)
)

set class_table_B(int n) = WeylClassTable:
   let rd=SO(n+n+1), classes = [BiPartition]: partition_pairs(n)
   then lookup = (BiPartition->int): index_bipartition(classes)
in W_class_table( rd, for pair in classes do W_elt(rd,class_word_BC(pair)) od
		, (WeylElt w)int:
		    cycle_class_size(cycle_code(w).as_signed_cycles)
		, (WeylElt w) int: lookup(cycle_code(w).as_bipartition)
		, (int i,int k)int:
		    cycle_power(classes[i].to_cycles,k).to_partition_pair.lookup
		)

set class_table_B(RootDatum rd) = WeylClassTable:
   let classes = [BiPartition]: partition_pairs(rd.semisimple_rank)
   , type_code(WeylElt w) = [int]: signed_cycle_type_code(classic_permutation(w))
   , class_rep = (BiPartition->WeylElt): conjugacy_class_B(rd)
   then lookup = (BiPartition->int): index_bipartition(classes)
in W_class_table( rd, for pair in classes do class_rep(pair) od
		, (WeylElt w)int:
		    cycle_class_size(type_code(w).as_signed_cycles)
		, (WeylElt w) int: lookup(type_code(w).as_bipartition)
		, (int i,int k)int:
		    cycle_power(classes[i].to_cycles,k).to_partition_pair.lookup
		)

set character_table_B(int n) = CharacterTable:
   let class_list =  partition_pairs(n), rd=SO(n+n+1)
   then cycles = for pair in class_list do pair.to_cycles od
   , class_rep(int i) = WeylElt: W_elt(rd,class_word_BC(class_list[i]))
   then classes = [WeylElt,classical_class,string]:
      for c@i in cycles do ( class_rep(i), c.class_BC, c.cycles_string) od
   ,  irreps = [classical_irrep,string,[int]]:
      for rep in BC_irreps(n)
      do ( rep.irrep_BC, rep.irrep_string
         , for c in cycles do hyperoctahedral_character(rep,c) od
	 )
      od
   in character_table(class_table_B(n),classes,irreps)

set character_table_(RootDatum rd) = CharacterTable:
   let n=rd.semisimple_rank
   then class_list =  partition_pairs(n)
   then cycles = for pair in class_list do pair.to_cycles od
   , class_rep(int i) = WeylElt: conjugacy_class_C(rd)(class_list[i])
   then classes = [WeylElt,classical_class,string]:
      for c@i in cycles do ( class_rep(i), c.class_BC, c.cycles_string) od
   ,  irreps = [classical_irrep,string,[int]]:
      for rep in BC_irreps(n)
      do ( rep.irrep_BC, rep.irrep_string
         , for c in cycles do hyperoctahedral_character(rep,c) od
	 )
      od
   in character_table(class_table_B(rd),classes,irreps)
