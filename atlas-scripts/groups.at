<basic.at
<torus.at

set !trivial_group = RootDatum: root_datum(null(0,0),null(0,0),false)

{ complex group for |rd| (the group viewed as a real form of doubled type) }
set complex (RootDatum rd) = RealForm:
  let r = rank(rd) then id_2r=id_mat(r+r), twice (mat m) = block_matrix(m,m)
  then rd_C = root_datum(twice(rd.simple_roots)
			,twice(rd.simple_coroots)
			,rd.prefers_coroots)
  in quasisplit_form(inner_class(rd_C, id_2r[r:] ## id_2r[:r] ))

{ complexification of a real group, another name for the same }
set complexification = complex@RootDatum

{ some root systems }

{ type A root data }

set GL_roots (int n) = mat:
  if n>0 then let I=id_mat(n) in I[:1~]-I[1:]
  else error("Positive index required")
  fi

set SL_coroots (int n) = mat: { equals |GL_roots(n)| without its final row }
  if n>1 then matrix((n-1,n-1),(int i, int j) int: #(i=j)-#(i=j+1))
  elif n=1 then null(0,0)
  else error("Positive index required")
  fi

set SL_roots (int n) = mat: { like |SL_coroots(n)|, but add 1 in final column }
  matrix((n-1,n-1),(int i, int j) int: #(i=j)-#(i=j+1)+#(j=n-2))

set GL (int n) = RootDatum: let r=GL_roots(n) in root_datum(r,r,false)
set SL (int n) = RootDatum: root_datum(SL_roots(n),SL_coroots(n),false)
set PSL (int n)= RootDatum: root_datum(SL_coroots(n),SL_roots(n),true)

{ roots and coroots in nice coordinates for roots in types B,C,D }

set type_B_roots (int n) = mat: { same as SL_coroots(n+1) }
  matrix((n,n),(int i, int j) int: #(i=j)-#(i=j+1))

set type_C_roots (int n) = mat:
  matrix((n,n),(int i, int j) int:
    if i=n-1 and j=n-1 then 2 else #(i=j)-#(i=j+1) fi)

set type_D_roots (int n) = mat:
  if n<=1 then null(n,0) { type D1 has no roots, it is T1 }
  else matrix((n,n),((int,int)(i,j):p) int:
    if p=(n-2,n-1) then 1 else #(i=j)-#(i=j+1) fi)
  fi

{ type C root data }

set Sp (int n) = RootDatum:
  let (m,r) = n\%2 then ()= if r=1 then error("Odd symplectic datum") fi
  in root_datum(type_C_roots(m),type_B_roots(m),false)

set PSp (int n) = RootDatum: { same as adjoint(Sp(n)) }
  let (m,r) = n\%2 then ()= if r=1 then error("Odd symplectic datum") fi
  in root_datum(id_mat(m),^type_C_roots(m)*type_B_roots(m),false)

set GSp (int n) = RootDatum:
  let (m,r) = n\%2 then ()= if r=1 then error("Odd symplectic datum") fi
  , type = LieType:
     if m>1 then "C" elif m=1 then "A" else "T" fi+int_format(m)+".T1"
  in root_datum(type,quotient_basis(type,[[1/2,1/2]]),false)

{ type B/D root data }

{ use the standard basis for SO(n) }
set SO (int n)= RootDatum:
  let (m,r)=n\%2 in
  if r=1 then root_datum(type_B_roots(m),type_C_roots(m),false)
  else let roots=type_D_roots(m) in root_datum(roots,roots,false)
  fi

set (Spin,PSO) { two functions that share a local definition } =
  let SO_Lie_type (int n) = LieType: { same as Lie_type(SO(n)) }
    case n-1 then error("Rank too small")
    in "",  "T1", "A1", "A1.A1", "B2", "A3"
    else let (m,r)=n\%2 in if =r then "D" else "B" fi + m
    esac
  in ( { Spin = } (int n) RootDatum: SO_Lie_type(n).simply_connected
     , { PSO  = } (int n) RootDatum: SO_Lie_type(n).adjoint
     )

{ real forms }

{ type A real forms }

{ here rd should be SL(p+q) or PSL(p+q) }
set SU (int p,int q, RootDatum rd) = RealForm:
  let n=p+q then ic = inner_class(rd,if n>1 then "c" else "" fi)
  in real_form(ic,min(p,q))

set SU (int p,int q)= RealForm: SU(p,q,SL(p+q))
set PSU (int p,int q)= RealForm:SU(p,q,PSL(p+q))
set SU (int n) = RealForm: SU(n,0)
set PSU (int n) = RealForm: PSU(n,0)

{ U(p,q), no isogenies in this case }
set U (int p,int q) = RealForm:
  real_form(inner_class(GL(p+q),id_mat(p+q)),min(p,q))

set SL_R (int n)  = RealForm: quasisplit_form(inner_class(SL(n),-id_mat(n-1)))
set PSL_R (int n) = RealForm: quasisplit_form(inner_class(PSL(n),-id_mat(n-1)))
set PGL_R = (int->RealForm): PSL_R@int

set SL_C (int n)  = RealForm: complex(SL(n))
set PSL_C (int n) = RealForm: complex(PSL(n))
set PGL_C = (int->RealForm): PSL_C@int

set SL_H (int n)  = RealForm: quasicompact_form(inner_class(SL(2*n),"s"))
set PSL_H (int n) = RealForm: quasicompact_form(inner_class(PSL(2*n),"s"))
set PGL_H = (int->RealForm): PSL_H@int

set GL_R (int n) = RealForm: quasisplit_form(inner_class(GL(n),-id_mat(n)))
set GL_C (int n) = RealForm: complex(GL(n))
set GL_H (int n) = RealForm: quasicompact_form(inner_class(GL(2*n),"ss"))

{complex and quaternionic groups of type A}

{ to allow alternate syntax: for instance Sp(4,R) instead of Sp_R(4) }
set !R="R", !C="C", !H="H" { ! means they are constants }

set by_field ((int->RealForm) f_R,(int->RealForm) f_C,(int->RealForm) f_H) =
    (string->(int->RealForm)):
  (string K) (int->RealForm):
    if   K=R then f_R
    elif K=C then f_C
    elif K=H then f_H
    else error("unknown field "+K)
    fi

set SL (int n, string K) = by_field (SL_R@int,SL_C@int,SL_H@int) (K)(n)
set GL (int n, string K) = by_field (GL_R@int,GL_C@int,GL_H@int) (K)(n)
set PSL (int n, string K) = by_field (PSL_R@int,PSL_C@int,PSL_H@int) (K)(n)
set PGL (int n, string K) = PSL(n,K)

{ type C real forms }

{ split real forms; the calls to Sp(n), PSp(n), GSp(n) will catch odd n }
set Sp_R (int n) = RealForm: quasisplit_form(inner_class(Sp(n),id_mat(n\2)))
set PSp_R (int n)= RealForm: quasisplit_form(inner_class(PSp(n),-id_mat(n\2)))
set GSp_R (int n)= RealForm: quasisplit_form(inner_class(GSp(n),-id_mat(n\2+1)))

{ Sp(p,q) }

set Sp (int p,int q)=real_form(inner_class(Sp(2*(p+q)),"e"),min(p,q))
set PSp (int p,int q)=real_form(inner_class(PSp(2*(p+q)),"e"),min(p,q))

{ complex and quaternionic real forms }

set Sp_C (int n) = complex(Sp(n)) { |Sp| will test |n| even }
set Sp_H (int n) = RealForm: error("Sp(n,H) is not yet implemented")

set PSp_C (int n) = complex(PSp(n)) { |Sp| will test |n| even }
set PSp_H (int n) = RealForm: error("PSp(n,H) is not yet implemented")

set GSp_C (int n) = complex(GSp(n)) { |Sp| will test |n| even }
set GSp_H (int n) = RealForm: error("PSp(n,H) is not yet implemented")

set Sp (int n, string K) = by_field (Sp_R@int,Sp_C@int,Sp_H@int) (K)(n)
set PSp (int n, string K) = by_field (PSp_R@int,PSp_C@int,PSp_H@int) (K)(n)
set GSp (int n, string K) = by_field (GSp_R@int,GSp_C@int,GSp_H@int) (K)(n)

{ type B/D real forms }

set SO_inner_class (int p,int q) = string:
  if p+q=1 then ""
  elif p+q=4 then if p%2=0 then "ee" else "C" fi
  elif p%2=1 and q%2=1 then
      if (p+q)%4=0 and p+q>4 then "u" else "s" fi
  else "e"
  fi


set SO_real_form_number (int p,int q) = int:
let n=p+q, (p,q) = if p<q then (q,p) else (p,q) fi { make q the smallest one }
in  if n<=2 then 0        { inner classes without noncompact form, SO(2)=T1 }
    elif n%2=1 then q     { type B_{n\2} }
    elif q%2=1 then q\2   { type D_{n\2}, unequal rank }
    elif q<=n\4 then q\2  { type D_{n\2}, equal rank, more compact forms }
    elif n%4=2 then q\2+1 { type D_{n\2}odd, equal rank, more split forms }
    else q\2+2            { type D_{n\2}even, equal rank, more split forms }
    fi

set SO (int p,int q,RootDatum rd) = RealForm:
  real_form(inner_class(rd,SO_inner_class(p,q)),SO_real_form_number(p,q))

set SO_star (int n, bool second, RootDatum rd) = RealForm:
  let (rank,parity)=n\%2 in
  assert(=parity,"Starred real forms require even index");
  assert(#test_simple_type("D",rd)=rank,"Semisimple rank should be "+rank);
  if second then assert(=rank%2,"No second starred from int type D"+rank) fi;
  real_form(inner_class(rd,SO_inner_class(n,0)),n\8+1+#second)

set Spin (int p,int q) = RealForm: SO(p,q,Spin(p+q))
set SO (int p,int q)   = RealForm: SO(p,q,SO(p+q))
set PSO (int p,int q)  = RealForm: SO(p,q,PSO(p+q))

set Spin_star (int n) = RealForm: SO_star(n,false,Spin(n))
set SO_star (int n)   = RealForm: SO_star(n,false,SO(n))
set PSO_star (int n)  = RealForm: SO_star(n,false,PSO(n))

{ exceptional groups }

set G2_ic  = inner_class(simply_connected("G2"),"e")

set G2_c   = quasicompact_form(G2_ic)
set G2_s   = quasisplit_form(G2_ic)

set F4_ic  = inner_class(simply_connected("F4"),"e")
set F4_c   = quasicompact_form(F4_ic)
set F4_B4  = real_form(F4_ic,1)
set F4_s   = quasisplit_form(F4_ic)

set E6_ic_e = inner_class (simply_connected ("E6"),"e")

set E6_c = real_form(E6_ic_e,0)
set E6_h = real_form(E6_ic_e,1)
set E6_D5T = real_form(E6_ic_e,1)
set E6_q = real_form(E6_ic_e,2)

set E6_ic_s = inner_class (simply_connected ("E6"),"s")

set E6_F4 = real_form(E6_ic_s,0)
set E6_s = real_form(E6_ic_s,1)
set E6_C4 = real_form(E6_ic_s,1)

set E7_ic_e = inner_class (simply_connected ("E7"),"e")

set E7_ic = inner_class (simply_connected ("E7"),"e")
set E7_c = real_form(E7_ic_e,0)
set E7_h = real_form(E7_ic_e,1)
set E7_E6T = real_form(E7_ic_e,1)
set E7_q = real_form(E7_ic_e,2)
set E7_D6A1 = real_form(E7_ic_e,2)
set E7_s = real_form(E7_ic_e,3)
set E7_A7 = real_form(E7_ic_e,3)

set E8_ic = inner_class(simply_connected("E8"),"e")
set E8_c = real_form(E8_ic,0)
set E8_q = real_form(E8_ic,1)
set E8_s = real_form(E8_ic,2)
