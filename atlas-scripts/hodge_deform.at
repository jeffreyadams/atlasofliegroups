<basic.at
<hodgeParamPol.at
<hermitian.at
set hodge_verbose=false

{hodge version of deformation algorithm
 used to be called the "q" version, although it is really "v"
}

{difference of two vectors of polynomials of the same length}
set poly_rows_minus([i_poly] f,[i_poly] g)=[i_poly]:([f]-[g])[0]

{compute last column of the inverse of an upper unitriangular polynomial matrix}
set last_column_mat_poly_inverse(i_poly_mat A)=[i_poly]:
{check poly_1's on the diagonal}
assert(all(for i:#A do A[i][i]=poly_1 od), "A is not upper unitriangular");
let B=transpose(A) {since i_poly_mat is given by rows, not columns}
then n=#B then
remainder=zero_poly_row(n-1)#poly_1
,solution=zero_poly_row(n) in
for j:n
~do let contrib=for i:n do convolve(remainder[j],B[j][i]) od  in
remainder :=poly_rows_minus(remainder,contrib);
solution[j]:=contrib[j] od;solution

{convert mat to i_poly_mat
caution: mat is by columns, i_poly_mat is by rows
}
set mat_as_poly_mat(mat A)=i_poly_mat:
let B=^A then
(n,m)=shape(B) in
for i:m do for j:n do vec:[B[i][j]] od od

{hodge-version of compress from deform.at}
set hodge_compress ([Param] B, mat KL_mat, [i_poly] polys) =
     ([Param], i_poly_mat):
( B
, let (r,c)=shape(KL_mat) in
  for i:r do for j:c do
    minus_1^(B[j].length-B[i].length) * polys[KL_mat[i,j]]
  od od
)

{ the same, but evaluating polynomials at $q=-1$ }
set compress ([Param] B, mat KL_mat, [i_poly] polys) = ([Param],mat):
( B
, let evs = for P in polys do eval(P,minus_1) od in
  for col@j in KL_mat { by columns first for a |mat|! }
  do for entry@i in col
     do minus_1^(B[j].length-B[i].length) * evs[entry]
     od
  od
)

{Q(v^{-1}), this is a Laurent polynomial so shouldn't be needed/used,
except in the subsequent function}
set Q_v_inverse(i_poly f)=reverse(f)
{v^k*Q(v^{-1}), k should be large enough so this is a polynomial}
set v_to_the_k_times_Q_v_inverse(int N,i_poly f)=null(N-degree(f))##reverse(f)

{hodge-version of deformation_terms, using last_column_mat_poly_inverse(KL_mat)
to compute column of inverse as polynomial in v
}
set hodge_deformation_terms (Param Gamma) = hodgeParamPol:
  if hodge_verbose then prints("Computing hodge_deformation of ", Gamma) fi;
  let pb = partial_KL_block(Gamma:=normal(Gamma))
  then (B,P) = { get |P| to be the *signed* P-matrix } hodge_compress(pb)
  in
  if #B=0 or B~[0]!=Gamma  { if |Gamma| itself is not among survivors }
  then [null_module(Gamma)]
  else
     let rv=nullHodgeParamPol(Gamma.real_form)
     then (,P0)=compress(pb)
     then Q_col=last_column_mat_poly_inverse(P)  {last column of Q matrix}
  in for i:#Q_col-1  {i <-> Phi}
     do for j: #Q_col-i from i { j <-> Xi}
        do let Phi=B[i]
	   then Xi=B[j]
	   then length_diff=length(Gamma)-length(Xi)
	   then P_Phi_Xi_v=P[i][j]
	   then Q_Xi_Gamma_v=Q_col[j]
	   then v_power_Q_Xi_Gamma_v_inverse =
	          v_to_the_k_times_Q_v_inverse(length_diff,Q_Xi_Gamma_v)
	   then on=orientation_nr(Gamma)-orientation_nr(Phi)
	   then on_over_2=assert(is_even(on),"odd orientation number");on\2
	   then { sign=(-1)*(-1)^(length(Xi)-length(Phi))}
                sign=minus_1  { P is the already signed matrix }
           then contrib =
	      sign*
	      poly_product(poly_product(vee^on_over_2,P_Phi_Xi_v)
	                  ,v_power_Q_Xi_Gamma_v_inverse)
	in {debugging only}
           if hodge_verbose
	   then prints
	    (new_line,"(i,j)=(",i,",",j,")",new_line,
	     "Xi: ", Xi, new_line,
             "Gamma: ", Gamma, new_line,
             "Phi: ", Phi, new_line, "Xi: ", Xi, new_line,
             "P(v): ", P_Phi_Xi_v, new_line,
	     "v^*Q(v^(-1)):", Q_Xi_Gamma_v, new_line,
             "on(Gamma): ", orientation_nr(Gamma),new_line,
             "on(Phi): ", orientation_nr(Phi),new_line,
	     "orientation number term=v^", on_over_2, new_line,
             "length diff: ", length_diff,new_line,
	     "sign: ", sign,new_line,
	     "contribution: ", poly_format(contrib,"v"))
	   fi {end debugging}
        ;  rv+:=contrib*[Phi]
     od
  od
; rv
fi

{hodge version of recursive deform}
set hodge_recursive_deform (Param p) = hodgeParamPol:
  if hodge_verbose then prints("hodge_recursive_deform with:", p) fi;
  if not is_final(p) then error("improper parameter") fi;
  let empty=nullHodgeParamPol(real_form(p)) in
  if  hodge_verbose { choose verbose or non-verbose version of the function }
  then rec_fun hodge_full_def (i_poly sc,Param p) hodgeParamPol:
			 { |sc| will simply scale the resulting ParamPol }
    begin
{      prints("hodge_full_def with: sc=", sc, ", p=", p);}
      assert(is_standard(p)
	    ,"non standard parameter encountered in deformation");
      let acc=empty, at_nu0=hodgeParamPol: sc*[p*0] { fully deformed |p| } in
      for factor in reducibility_points(p)
      ~do
	let p_def=p*factor { next deformation of |p| } then
        def=hodge_deformation_terms(p_def) { bypass built-in |deform| here }
        in
{	  prints("adding deformation term: p=", def, new_line,"adding:", def);}
       acc+:=def
      od
    ; for (f,q) in rearrange(acc) { traverse the sum of the deformation terms spun off }
      do { apply |hodge_full_def| recursively to all those terms }
        at_nu0 +:= hodge_full_def(convolve(sc,f),q) { gather harvest from those deformations }
      od
    ; at_nu0
    end
  else rec_fun hodge_full_def (i_poly sc,Param p) hodgeParamPol:
			 { |sc| will simply scale the resulting ParamPol }
    begin
      assert(is_standard(p),"non standard parameter in deformation");
      let acc=empty, at_nu0=hodgeParamPol: sc*[p*0] { fully deformed |p| } in
      for factor in reducibility_points(p)
      ~ { direction of deformation is down, towards 0; this is not essential }
      do
      let hodge_d=hodge_deformation_terms(p*factor) in
       acc+:=hodge_d od
    ; for (f,q) in rearrange(acc) { traverse the sum of the deformation terms spun off }
      do at_nu0 +:= hodge_full_def(convolve(sc,f),q) od
    ; at_nu0
    end
  fi { apply that recursive function to the initial argument: } ([1],p)


{another identical copy of the hodge_recursive_deform *except* that
the deformation is outward, which is useful for debugging}
set hodge_recursive_deform_reverse (Param p) = hodgeParamPol:
  if hodge_verbose then prints("hodge_recursive_deform with:", p) fi;
  if not is_final(p) then error("improper parameter") fi;
  let empty=nullHodgeParamPol(real_form(p)) in
  if  hodge_verbose { choose verbose or non-verbose version of the function }
  then rec_fun hodge_full_def (i_poly sc,Param p) hodgeParamPol:
			 { |sc| will simply scale the resulting ParamPol }
    begin
{      prints("hodge_full_def with: sc=", sc, ", p=", p);}
      assert(is_standard(p)
	    ,"non standard parameter encountered in deformation");
      let acc=empty, at_nu0=hodgeParamPol: sc*[p*0] { fully deformed |p| } in
      for factor in reducibility_points(p)
      do  {ONLY change from hodge_recursive_deform is missing ~ here}
	let p_def=p*factor { next deformation of |p| } then
        def=hodge_deformation_terms(p_def) { bypass built-in |deform| here }
        in
{	  prints("adding deformation term: p=", def, new_line,"adding:", def);}
       acc+:=def
      od
    ; for (f,q) in rearrange(acc) { traverse the sum of the deformation terms spun off }
      do { apply |hodge_full_def| recursively to all those terms }
        at_nu0 +:= hodge_full_def(convolve(sc,f),q) { gather harvest from those deformations }
      od
    ; at_nu0
    end
  else rec_fun hodge_full_def (i_poly sc,Param p) hodgeParamPol:
			 { |sc| will simply scale the resulting ParamPol }
    begin
      assert(is_standard(p),"non standard parameter in deformation");
      let acc=empty, at_nu0=hodgeParamPol: sc*[p*0] { fully deformed |p| } in
      for factor in reducibility_points(p)
      do  {ONLY change from hodge_recursive_deform is missing ~ here}
      let hodge_d=hodge_deformation_terms(p*factor) in
       acc+:=hodge_d od
    ; for (f,q) in rearrange(acc) { traverse the sum of the deformation terms spun off }
      do at_nu0 +:= hodge_full_def(convolve(sc,f),q) od
    ; at_nu0
    end
  fi { apply that recursive function to the initial argument: } ([1],p)

set hodge_recursive_deform(ParamPol P)=hodgeParamPol:
let rv=nullHodgeParamPol(P.real_form) in
for c@p in P do rv+:=c*hodge_recursive_deform(p) od;rv

set hodge_recursive_deform(hodgeParamPol Q)=
  dearrange(for (c,p) in rearrange(Q)
	    do let hodge_rd_p=rearrange(hodge_recursive_deform(p)) in
	       for (d,q) in hodge_rd_p do (poly_product(c,d),q) od
	    od.##
	   ,Q.real_form)

set hodge_grading_std(Param p)=hodgeParamPol:hodge_recursive_deform(p)
set hodge_grading_std(ParamPol P)=hodgeParamPol:hodge_recursive_deform(P)

set hodge_signed_P_matrix(Param Gamma)=i_poly_mat:
let (,P) = hodge_compress(partial_KL_block(Gamma)) in P

set hodge_P_matrix(Param Gamma)=i_poly_mat:
  let (,KL_mat,polys) = partial_KL_block(Gamma) then (r,c)=shape(KL_mat) in
  for i:r do for j:c do polys[KL_mat[i,j]] od od

{write hodge(J(Gamma)) in terms of hodge(I(x,lambda,0))}
set hodge_grading_irreducible(Param p)=
   let (B,P_signed)=hodge_compress(partial_KL_block(p))
   , rv=nullHodgeParamPol(p.real_form)
   then !on_p = orientation_nr(p)
   then n=#B
in for i:n
   do let   (q,r)=(on_p-orientation_nr(B[i]))\%2
      then coeff = assert(=r,"odd orientation");
                   poly_product(vee^q,P_signed[i][n-1])
   in
{ prints(new_line,i, " ", B[i], new_line,"coeff=",coeff);
  print(evaluate_at_s(hodge_recursive_deform(B[i])));
}
      rv +:= coeff*hodge_recursive_deform(B[i])
   od; rv

{set hodge_branch_irr(Param p,int N)=KHodgeParamPol:hodge_branch_std(hodge_grading_irreducible(p),N)}

{------------------ some test functions--------------------}
{
a few issues here: come back and fix them, commented out for now

{hodge_grading_irreducible(p) evaluted at v=s should equal c_form_irreducible(p)}
set hodgeTestIrreducible(Param p)=bool:hodge_grading_irreducible(p).v_to_s=c_form_irreducible(p)
set hodgeTestIrreducible([Param] params)=(bool,[bool]):
let results=for p in params do hodgeTestIrreducible(p) od in (all(results),results)

set hodgetest(Param p,int N)=bool:
let hodgedef=hodge_recursive_deform(p) then
rv=hodge_branch_std(hodgedef,N) then
positive=all(##for i:#rv do for c@p in rv[i] do split_as_int(c)>0 od od) then
valid_evaluation_at_s=evaluate_at_s(hodgedef)=recursive_deform(p) then
valid_evaluation_at_1=evaluate_at_1(hodgedef)=p*0 in
prints(p.real_form,new_line,"N:",N,new_line,p,new_line,"hodge_deformation to 0: ");print(rv);prints(new_line,
"correct evaluation at v=1:",valid_evaluation_at_1,new_line,
"correct evaluation at v=s:",valid_evaluation_at_s,new_line,
"positive coefficients: ",positive,new_line);valid_evaluation_at_1 and valid_evaluation_at_s and positive

set hodgeTest(RealForm G,int N)=bool:hodgetest(trivial(G),N)

set hodgeTest([Param] params,int N)=(bool,[bool]):let result=for p in params do hodgetest(p,N) od in (all(result),result)

set runHodgeTests()=
let groups=
[(SL(2,C),10),
(SL(3,C),15),
(SL(4,C),20),
(SO(3,1),40),
(SO(5,1),50),
(SO(7,1),80),
(Sp(4,C),20),
(complexification(G2_s),50)]
in for (G,N) in groups do hodgeTest(G,N) od
}