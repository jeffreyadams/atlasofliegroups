<K_highest_weights.at
<tabulate.at
<convert_c_form.at {for Param@mu}

{set P_t(G)={non-zero, final, standard, tempered parameter}
 this is precisely the set of "K-types" (parameters of G)
 p_i -> LKT(p_i) is a bijection with K^ (irreducible representations of K)

We write
"K_type" to mean an element of P_t
"K_rep": an irreducible representation of K

In the K-world p\in P_t can be viewed two ways:

1) p_i -> I(p_i)|_K = all of the K_reps of I(p)
2) p_i -> LKT(I(p_i)) = a single K_rep

So \sum_i a_i(v)p_i (finite sum) can be viewed two ways:

1) \sum_i a_i(v)I(p_i)|_K    [infinite sum of K_reps with Z[v] coefficients]
2) \sum_i a_i(v)LKT(I(p_i))  [a finite sum of K_reps with Z[v] coefficients]

We could use the same data structure for both. This is similar to
using parameters for both standard or irreducible modules: you need to
know which is appropriate, by the context.

Instead we'll use an extra void to specify when something is a
K_rep. We can and should revisit this issue.
}

{Conclusion:

hodgeParamPol: \sum{i=1}^n a_i(v)p_i where a_i(v) is a polynomial and p_i\in P_t
corresponding to \sum_i a_i(v)I(p_i)|_K
data type: hodgeParamPol

KHodgeParamPol:  \sum{i=1}^n a_i(v)p_i where a_i(v) is a polynomial and p_i\in P_t
corresponding to \sum_{i=1}^n a_i(v)LKT(p_i) (finite sum of K_reps)
data type: (hodgeParamPol,void)

a hodgeParamPol is an _infinite_ sum of K_reps (with Z[v] coefficients)
truncated at an integer bound it becomes a finite sum of K_reps with Z[v]
coefficients, i.e. a KHodgeParamPol
this is hodge_branch@(hodgeParamPol,int) and variants
}

{the data type hodgeParamPol is [ParamPol]
[P_0,P_1,..,P_n] <-> P_0+P_1*v+...+P_n*v^n

[P_0,...,P_m] -> (P_0+P_1*v+...+P_m*v^m)
Write the union of monomials(P_i) as {p_0,...,p_r}.
The order of this set matters.
Write P_i=\sum a_{i,j}p_j where j\le r.
Then this corresponds to
\sum a_{i,0}v^i)p_0 +
\sum a_{i,1}v^i)p_1 +
...
\sum a_{i,r}v^i)p_r


The advantage of the non-obvious convention is that we can use the
features of ParamPol to take care of combining terms.
See the functions rearrange and dearrange.
}
set_type hodgeParamPol=[ParamPol] { list is not empty }
set_type HodgeKTypePol=[KTypePol] { list is not empty }

{ -------------- hodgeParamPol versions -------------}

{ by ensuring at least one term is recorded, we can recover RealForm }
set nullHodgeParamPol(RealForm G)=hodgeParamPol:[null_module(G)]
set hodge_param_pol(Param p)=hodgeParamPol:[p]
set real_form (hodgeParamPol P) = RealForm: P[0].real_form
set *(Split c,hodgeParamPol P)=for f in P do c*f od

set nullHodgeKTypePol (RealForm G) = HodgeKTypePol: [null_K_module(G)]
set hodge_K_type_pol (KType t)= HodgeKTypePol: [t]
set real_form (HodgeKTypePol P) = RealForm: P[0].real_form
set *(Split c,HodgeKTypePol P) = for f in P do c*f od


{rearrange:
 takes hodgeParamPol:[P_0,P_1,..,P_n] <-> P_0+P_1*v+...+P_n*v^{n-1}

write P_i=\sum_0^r a_{i,j}p_j   i\le r, j\le m

\sum a_{i,0}v^i)p_0 +
\sum a_{i,1}v^i)p_1 +
...
\sum a_{i,r}v^i)p_r
 represented by
[
( [a_{0,0},a_{1,0},...,a_{m,0}],p_0),
( [a_{0,1},a_{1,1},...,a_{m,1}],p_1),
...
( [a_{0,r},a_{1,r},...,a_{m,r}],p_r)
]
This is a more natural way to think of a hodgeParamPol, but less convenient
computationally.
}

{ Regroup by parameter or K-type }
set rearrange(hodgeParamPol pols)=[(i_poly,Param)]:
   for p in monomials(pols)
   do (i_poly:for term in pols do split_as_int(term[p]) od,p)
   od

set rearrange(HodgeKTypePol pols) = [(i_poly,KType)]:
   for p in monomials(pols)
   do (i_poly:for term in pols do split_as_int(term[p]) od,p)
   od


{go other way:
 given f_0(v)p_0 + ... + f_n(v) p_n, take it to [P_0,...,P_m]
[a_0+a_1v+...a_kv^k]*p_0 + [b_0+...+b_rv^r]*p_1 + ... [...]*p_n
 <->  by [([a_0,...,a_k],p_0),...,([...],p_n)] goes to
 P_0+P_1*v^2+...+P_m*v^m, represented by
 [P_0,P_1,..,P_n]
}
set dearrange([vec,Param] f, RealForm G) = hodgeParamPol:
   let m = for (v,) in f do #v od.max
   , sub(vec v,int i) = int: if i<#v then v[i] else 0 fi
in for i:m
   do ParamPol: G.null_module + for (v,p) in f do (sub(v,i),p) od
   od

set Hodge_K_type_pol ([vec,KType] f,RealForm G) = HodgeKTypePol:
   let sub(vec v,int i) = int: if i<#v then v[i] else 0 fi
in for i: for (v,) in f do #v od.max
   do KTypePol: G.null_K_module + for (v,p) in f do (sub(v,i),p) od
   od

set *(i_poly f,Param p) = hodgeParamPol: dearrange([(f,p)],p.real_form)
set *(i_poly f,hodgeParamPol P) = hodgeParamPol:
   dearrange(for (g,p) in rearrange(P) do (poly_product(f,g),p) od,P.real_form)
{Note: error if #P=0}



set coefficient(hodgeParamPol P,Param p)=i_poly:
for i:#P do split_as_int(P[i][p]) od

{equality is term by term}
set =(hodgeParamPol P,hodgeParamPol Q)=bool:
 (#P=#Q) and all(for i:#P do P[i]=Q[i] od)

set real_form(hodgeParamPol P)=RealForm:
if #P=0 then torus(0,0,0) else P[0].real_form fi

{polynomial  in v, or constant, times hodgeParamPol}
set *(i_poly f,hodgeParamPol P) = hodgeParamPol:
   let r=rearrange(P) in dearrange(for (g,p) in r do (convolve(f,g),p) od,P.real_form)
set *(int c,hodgeParamPol P)=hodgeParamPol:[c]*P

set +(hodgeParamPol P,hodgeParamPol Q) = hodgeParamPol:
if #P<=#Q then
 for i:#Q do if i<=#P-1 then P[i]+Q[i] else Q[i] fi od
else
 for i:#P do if i<=#Q-1 then P[i]+Q[i] else P[i] fi od
fi

set one_minus_v=[1,-1]
set -(hodgeParamPol P,hodgeParamPol Q)=hodgeParamPol:P+(-1)*Q

set evaluate_at_s (hodgeParamPol Q) = ParamPol:
   null_module(Q.real_form) + sum(Q.real_form,for term@i in Q do s^i*term od)

set evaluate_at_1(hodgeParamPol Q)=ParamPol:
   null_module(Q.real_form) + sum(Q.real_form,for term in Q do term od)

set v_to_s(hodgeParamPol Q) = ParamPol:evaluate_at_s(Q)
set v_to_1(hodgeParamPol Q)=ParamPol:evaluate_at_1(Q)

{ -------------- HodgeKTypePol versions -------------}

set *(i_poly f,KType mu) = HodgeKTypePol:
   Hodge_K_type_pol([(f,mu)],mu.real_form)
set Hodge_K_type_pol (KType mu) = HodgeKTypePol: poly_1*mu
set *(Split c,HodgeKTypePol KP) = HodgeKTypePol: for P in KP do c*P od

set *(i_poly f,HodgeKTypePol KP) = HodgeKTypePol:
   let acc = for :#KP+degree(f) do null_K_module(KP.real_form) od
in for c@i in f do for P@j in KP do acc[i+j]+:=c*P od od; acc

set coefficient(HodgeKTypePol KP,KType p) = i_poly:
   for P in KP do split_as_int(P[p]) od

{equality is term by term}
set = (HodgeKTypePol KP,HodgeKTypePol KQ) = bool:
  (#KP=#KQ) and all(for P@i in KP do P=KQ[i] od)


{rearrange:
 takes HodgeKTypePol:([P_0,P_1,..,P_n],) <-> P_0+P_1*q+...+P_n*v^{n-1}
 to
((a_0+a_1q+...a_kv^k)*p_0 + (b_0+...+b_rv^r)*p_1 + ... (...)p_m,)
 represented by ([([a_0,...,a_k],p_0),...,([...],p_m)],)
 where {p_i} are the monomials of all of the {P_j}
 the coefficients are i_pols
This is a more natural way to think of a hodgeParamPol, but less convenient
computationally.
}

set +(HodgeKTypePol KP,HodgeKTypePol KQ) = HodgeKTypePol:
  let min = min(#KP,#KQ) in
  for i:min do KP[i]+KQ[i] od ## if #KP>#KQ then KP else KQ fi [min: ]

set -(HodgeKTypePol KP,HodgeKTypePol KQ) = HodgeKTypePol:
  let min = min(#KP,#KQ) in
  for i:min do KP[i]-KQ[i] od ##
  if #KP>=#KQ then KP [min: ] else for Q in KQ[min:] do -Q od fi

set v_to_1 (HodgeKTypePol KP) = KTypePol: sum(KP.real_form,KP)
set v_to_s (HodgeKTypePol KP) = KTypePol:
  sum(KP.real_form,for P@i in KP do if i.is_even then P else s*P fi od)

{-------------------}

{multiply hodgeParamPol by v^k (k\ge 0)}
set shift(hodgeParamPol P, int k)=hodgeParamPol:
  let null=null_module(P.real_form) in (for :k do null od)##P

set shift(HodgeKTypePol KP, int k)=HodgeKTypePol:
  let null=null_K_module(KP.real_form) in (for :k do null od)##KP

{set hodge_branch_irr(Param p,int N)=hodgeParamPol:hodge_branch_std(hodge_grading_irreducible(p),N)}

{nice output}
set show(hodgeParamPol P)=void:
let header=["coeff","x","lambda"] then
values=
for (f,p) in rearrange(P) do
[poly_format(f,"v"),let (,n)=%p.x in n.to_string,p.lambda.to_string] od in
tabulate(header#values)

{nice output}
set show(HodgeKTypePol P)=void:
let header=["coeff","x","lambda"] then
values=
for (f,p) in rearrange(P) do
[poly_format(f,"v"),let (,n)=%p.x in n.to_string,p.lambda.to_string] od in
tabulate(header#values)

{alternative output version}
set show_long(hodgeParamPol P,KGBElt x_K)=void:
let header=["c","codim","x","lambda","hw","dim","height","mu"] then
values=for (c,p) in rearrange(P) do
let (,x)=%p.x in
[poly_format(c,"v"),codimension(x(p)).to_string,x.to_string,p.lambda.to_string,highest_weight(LKTs(p)[0],x_K).mu.to_string,LKTs(p)[0].dimension.to_string,
height(p).to_string,p.mu.to_string] od in tabulate(header#values)

set show_long(hodgeParamPol P)=void:
let header=["c","codim","x","lambda","hw","dim","height","mu"] then
values=for (c,p) in rearrange(P) do
let (,x)=%p.x in
[poly_format(c,"v"),codimension(x(p)).to_string,x.to_string,p.lambda.to_string,LKTs(p)[0].highest_weight.mu.to_string,LKTs(p)[0].dimension.to_string,
height(p).to_string,p.mu.to_string] od in tabulate(header#values)

set show_long(HodgeKTypePol KP) = void:
   tabulate( ["c","codim","#x","lambda","hw","dim","height","mu"] #
   for (c,p) in rearrange(KP)
   do
      [ poly_format(c,"v")
      , to_string(codimension(x(p)))
      , to_string(#p.x)
      , to_string(p.lambda)
      , to_string(LKTs(p)[0].highest_weight.mu)
      , to_string(LKTs(p)[0].dimension)
      , to_string(height(p)).to_string
      , to_string(p.mu)
      ]
   od
   )

set hodge_print = show@hodgeParamPol
set hodge_print([(vec,Param)] P,RealForm G) = void: show(dearrange(P,G))
set hodge_print([(vec,KType)] P,RealForm G)=void:show(Hodge_K_type_pol(P,G))

set hodge_print_long =show_long@hodgeParamPol
set hodge_print_long([vec,Param] P,RealForm G) = void:
   show_long(dearrange(P,G))
set hodge_print_long ([vec,KType] L,RealForm G) = void:
   show_long(Hodge_K_type_pol(L,G))


set coefficient (hodgeParamPol P,KType mu) = i_poly:
   let r=rearrange(P)
   then n=first(for (,p) in r do LKT(p)=mu od)
in if n.< then poly_0 else let (c,)=r[n] in c fi
