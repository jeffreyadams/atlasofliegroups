<K_highest_weights.at
<tabulate.at
<K_highest_weights.at

{----------------height and K-norm of K-types------------------}

{height of a K-type (x,lambda) is

a) \sum |<alpha^v,(1+theta_x)lambda/2>|  (| | is absolute value)

or equivalently

b)  <rho_check,from_dominant((1+theta_x)*lambda)> =
b') <2*rho_check,from_dominant((1+theta_x)*lambda/2)>

height can be modified by replacing rho_check with an arbitrary
ratvec v. For example: for defining height of L\cap K-types
for a Levi L, using v=rho_check(G).

By default K_norm is equal to height (using rho or some other v).
The "modified" K_norm is

K_norm(x,lambda) + 2*<rho_r(x),rho^v_r(x)>

(the precise form of the final term is not set in stone)
}

{modified K-norm}
set K_norm (RootDatum rd) = (K_Type->int): (K_Type(x,lambda)):
  let (,mu)=from_dominant(rd,(1+involution(x))*lambda)
  in rat_as_int(mu*rho_check(rd) + rho_r(x)*rho_check_r(x)*2)

{the next commands sets the K-norm back to the unmodified one}
{comment out this line to use the modified K-norm}
set K_norm (RootDatum rd) = (K_Type->int): (K_Type mu):height(parameter(mu))

set K_norm (RootDatum rd,K_Type p) = int: K_norm(rd)(p)
set K_norm (RootDatum rd,Param p) =  int: K_norm(rd)(K_type(p))
set K_norm (RootDatum rd,Split s,K_Type p)=int: K_norm(rd)(p)
set K_norm (RootDatum rd,Split s,Param p)=int:  K_norm(rd)(K_type(p))
set K_norm (K_Type p) =int: K_norm(root_datum(p))(p)
set K_norm (Param p)  =int: K_norm(K_type(p))
set K_norm (Split s,K_Type p) = int: K_norm(p)

{ K_norm of P is the max of K_norm(terms) }
set K_norms (RootDatum rd) = let norm=K_norm(rd) in (K_Type_Pol P) [int]:
  for @p in P do norm(K_type(p)) od

set K_norms (K_Type_Pol P) = [int]: K_norms(root_datum(P)) (P)

set K_norm (RootDatum rd,K_Type_Pol P) = int: let norms=K_norms(rd) in
  if =P then 0 else max(norms(P)) fi

set K_norm (K_Type_Pol P) =int: K_norm(root_datum(P),P)

set leading_terms (RootDatum rd) = let norm=K_norm(rd) in (K_Type_Pol P): K_Type_Pol:
  let max=K_norm(rd,P), result=null_module(real_form(P)) in
  for c@p in P do if norm(K_type(p))=max then result+:=c*p fi od; result

set all_K_norms (RootDatum rd) = let norm=K_norm(rd) in (K_Type_Pol P) [int]:
  sort(for c@p in P do norm(K_type(p)) od)

set all_K_norms(K_Type_Pol P) = [int]: all_K_norms(root_datum(P)) (P)

{ sort [K_Type] by K_norm(v) }
set sort_by_K_norm (RootDatum rd) = ([K_Type] -> [K_Type]): sort_by(K_norm(rd))

set sort_K_Type_Pol_by_K_norm (RootDatum rd) = let norm=K_norm(rd) in
  ([(Split,K_Type)] -> [(Split,K_Type)]): sort_by((Split s,K_Type p):norm(p))

set sort_by_K_norm = ([K_Type] -> [K_Type]): sort_by( K_norm@K_Type )
set sort_by_K_norm = ([(Split,K_Type)] -> [(Split,K_Type)]):
  sort_by( K_norm@(Split,K_Type) )

set print_by_K_norm_short (RootDatum rd) = let norm=K_norm(rd) in (K_Type_Pol P) void:
  let result=sort_K_Type_Pol_by_K_norm(rd)(for c@p in P do (c,K_type(p)) od)
  in for (c,p) in result do prints(split_as_int(c),"*(",#x(p),",",lambda(p),") ", K_norm(rd)(p)) od

set print_by_K_norm (RootDatum rd) = let norm=K_norm(rd) in (K_Type_Pol P) void:
  let result=sort_K_Type_Pol_by_K_norm(rd)(for c@p in P do (c,K_type(p)) od)
  in for (c,p) in result do let ((),x_hw,lambda_hw)=highest_weight(p) in
prints(split_as_int(c),"*(",#x(p),",",lambda(p),") ", " (", #x_hw, ",", lambda_hw, ")   ",  K_norm(rd)(p), "   [", dimension(p),"]") od

set print_by_K_norm (RootDatum rd,K_Type_Pol P) = void: print_by_K_norm(rd)(P)

set print_by_K_norm (K_Type_Pol P) = void:
  print_by_K_norm(root_datum(P),P)

set leading_terms (K_Type_Pol P) = K_Type_Pol:
  leading_terms(root_datum(P))(P)

{element of X^* restricted to identity component of the center}
set radical_character(RootDatum rd, vec lambda)=vec:lambda*radical_basis(rd)

{ all_dominant_height_less_than(RootDatum rd,ratvec v,int N):
  list gamma dominant in X^* s.t. <gamma,v> <=N
  in applications gamma=(1+theta)lambda
  algorithm:
  set [lambda_1,...,lambda_{m-1}]=fundamental weights(rd)
  set [lambda_m,...,lambda_{n-1}]=coradical_basis(rd)
  [lambda_1,...,lambda_{n-1}] is Z-basis we want
  set [rat]:c =[c_1,...,c_{n-1}] where c_i=<lambda_i,v>
  use cone to find all mu=\sum a_i lambda_i such that <v,mu>=sum a_i*c_i<=N
}

{. all gamma\in X^*, dominant, such that <gamma,v> <= N .}
set all_dominant_height_upto (RootDatum rd, ratvec v,int N) =
  mat: { columns are weights }
  let basis = [ratvec]: { rational weights }
         fundamental_weights(rd) ## { concatenate }
         for w in coradical_basis(rd) do ratvec: w od
  , rk=#v, result=[vec]: []
  in
  for cs in cone(N,for col in basis do v*col od) do
    let (v,d) = %sum(rk,for col@i in basis do col*cs[i] od) in
    if d=1 then result #:= v fi
  od; rk { number of rows of matrix returned } # result

{instead of RootDatum, given InnerClass: use only compact_coradical_basis}
set all_dominant_height_upto (InnerClass ic, ratvec cowt,int N) =
  mat: { columns are weights }
  let rd=root_datum(ic)
  then basis = [ratvec]: { rational weights }
         fundamental_weights(rd) ## { concatenate }
         for w in compact_coradical_basis(ic) do ratvec: w od
  , rk=rank(rd), result=[vec]: []
  in
  for cs in cone(N,for col in basis do cowt*col od) do
    let (v,d) = %sum(rk,for col@i in basis do col*cs[i] od) in
    if d=1 then result #:= v fi
  od; rk { number of rows of matrix returned } # result

{ run over dominant gamma\in X^* such that <gamma,v><=N,
for each one solve for lambda\in X^*-rho so that (1+theta)lambda=gamma}
set lambda_rho_from_dominant_height_upto (KGBElt x, ratvec v, int N) = mat: {wts}
  let th1=1+involution(x), rho=rho(root_datum(x)), result=[vec]:[] in
  for mu in all_dominant_height_upto(inner_class(x),v,N)
  do case solve(th1,mu-ratvec_as_vec(th1*rho))   {solution v is lambda-rho \in X^*}
     | no_vec: ()
     | solution(s): result #:= s
     esac
  od; #rho{rank} # result

{ similar construction applied to L\subset G}

{set of representatives of W/W_L, using
 w-> w.rho(u) is a bijection W/W_L -> W-orbit of rho(u)
}
set W_mod_W_L(RootDatum rd_L,RootDatum rd_G) = [WeylElt]:
   stabiliser_quotient_of_dominant(rd_G,two_rho(rd_G)-two_rho(rd_L))

{all W-conjugates of gamma which are L-dominant
 initialize empty list, for each w\in W/W_L add from_dominant(G,w.gamma)
 to the list if new
}
set L_dominant_conjugates(RootDatum rd_L, RootDatum rd_G, vec gamma)=
{let (,gamma)=from_dominant(rd_G,gamma) in}
let rv=[vec]:[] in
for w in W_mod_W_L(rd_L,rd_G) do let (,tau)=from_dominant(rd_L,inverse(w)*gamma) in
if find(rv,tau)=-1 then rv#:=tau fi  od;rv

{ run over G-dominant gamma_G\in X^*;
   run over L-dominant conjugates gamma_L of gamma
    for each one solve for lambda\in X^*-rho(L) so that (1+theta)lambda=gamma}
set lambda_rho_from_dominant_height_upto (KGBElt x_L, RootDatum rd, ratvec v, int N) = mat:
  let th1=1+involution(x_L), rho_L=rho(root_datum(x_L)), result=[vec]:[] in
  for mu_G in all_dominant_height_upto(rd,v,N) do
   for mu_L in L_dominant_conjugates(root_datum(x_L), rd, mu_G)
  do case solve(th1,mu_L-ratvec_as_vec(th1*rho_L))   {solution v is lambda-rho_L \in X^*}
     | no_vec: ()
     | solution(s): result #:= s
     esac
od od; #rho_L{rank} # result

{    computing all K-parameters up to given height or K-norm   }

{ basic usage: typically G is semisimple
  more generally: no compact central torus}
{. All K-parameters for G with given x, height up to N.}
set K_parameters_height_upto(KGBElt x, int N)=[K_Type]:
  let rd=x.root_datum in
  let lrs = lambda_rho_from_dominant_height_upto(x,rho_check(rd),N) in
  ## for lr in lrs do all_equal_dlambda_K_parameters(x,lr+rho(rd))  od

{ G allowed to be reductive }
{. All K-parameters for G with given x, height up to N.}
set K_parameters_height_upto(KGBElt x, int N, ratvec v)=[K_Type]:
  let rd=x.root_datum in
  let lrs = lambda_rho_from_dominant_height_upto(x,v,N) in
  ## for lr in lrs do all_equal_dlambda_K_parameters(x,lr+rho(rd))  od

set K_parameters_height_upto(RealForm G, int N)=[K_Type]:
##(for x in ##(for x in KGB(G) do if no_Cminus_roots(x)
then  [(x)] else [(KGBElt)]:[] fi od) do K_parameters_height_upto(x,N) od)

set K_parameters_height_upto(RealForm G, int N,ratvec v)=[K_Type]:
##(for x in ##(for x in KGB(G) do if no_Cminus_roots(x)
then  [(x)] else [(KGBElt)]:[] fi od) do K_parameters_height_upto(x,N,v) od)

{ all L\cap K-parameters, up to height N, where height is defined by pairing with v}
{algorithm:
find (x_L,lambda) so that (1+theta_x)lambda is L-dominant, and
the G-dominant conjugate lambda' of this satisfies <lambda',rho_check(G)><=N
for each such lambda find all (L\cap K)-parameters with the same differential
}
set K_parameters_height_upto (KGBElt x_L ,RootDatum rd, int N,ratvec v) = [K_Type]: {L\cap K-types}
  let lrs = lambda_rho_from_dominant_height_upto(x_L,rd,v,N),
  rho=rho(root_datum(x_L))
  in ## for lr in lrs do all_equal_dlambda_K_parameters(x_L,lr+rho)  od

{variant: same function, different input syntax}
set K_parameters_height_upto ((KGBElt,RootDatum,int)(x,rd,N):triple) = [K_Type]: {L\cap K-types}
K_parameters_height_upto(x,rd,N,rho_check(rd))

{ }
set K_parameters_height_upto(RealForm G,RootDatum rd, int N, ratvec v)=[K_Type]: {L\cap K-types}
##(for x in ##(for x in KGB(G) do if no_Cminus_roots(x)
then  [(x)] else [(KGBElt)]:[] fi od) do K_parameters_height_upto(x,rd,N,v) od)

{set K_parameters_height_upto(RealForm G,InnerClass ic, int N)=[K_Type]:K_parameters_height_upto(G,ic,N,rho_check(ic))}



{ since K_norm >= height, {mu| K_norm<=N} is a subset of {mu|height <= N}}

set K_parameters_norm_upto(RealForm G,RootDatum rd, int N, ratvec v)=[K_Type]:
##for mu in K_parameters_height_upto(G,rd,N,v)
 do if K_norm(mu)<=N then [mu] else [] fi od

set K_parameters_norm_upto(RealForm G, int N, ratvec v)=[K_Type]:
##for mu in K_parameters_height_upto(G,N,v)
 do if K_norm(mu)<=N then [mu] else [] fi od

set K_parameters_norm_upto(RealForm G, int N)=[K_Type]:
##for mu in K_parameters_height_upto(G,N)
 do if K_norm(mu)<=N then [mu] else [] fi od

set number_K_parameters_norm_upto(RealForm G, int N, ratvec v)=int:#K_parameters_norm_upto(G,N,v)
set number_K_parameters_norm_upt(RealForm G, int N)=int:#K_parameters_norm_upto(G,N)

{sort by K-norm or height for printing}
set sort_by((K_Type->int) f)=([K_Type] v) [K_Type]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od
set sort_by_height = ([K_Type] -> [K_Type]): sort_by((K_Type mu) int: height(parameter(mu)))
{set sort_by_K_norm = ([K_Type] -> [K_Type]): sort_by((K_Type mu) int: K_norm(mu))}
set sort_by_K_norm = ([K_Type] -> [K_Type]): sort_by(K_norm@K_Type)

set shorten(ratvec v)=string:
if is_integer(v) then to_string([int]:numer(v)) else
to_string([int]:numer(v))+"/"+to_string(denom(v)) fi

set print_K_parameters(KGBElt x_K_in,[K_Type] ktypes,([K_Type]->[K_Type]) f)=void:
let strings=[["x","lambda","x_K","lambda_K","dim","ht","Knorm"]] in
prints("(x,lambda):  K-type",new_line, "(x_K,lambda_K): K-highest weight");
for p in f(ktypes) do
let ((),x_K,lambda_K)=highest_weight(p,x_K_in) in
strings#:=[to_string(#x(p)),shorten(lambda(p)), to_string(#x_K), shorten(lambda_K),to_string(dimension(p)),
to_string(height(parameter(p))),to_string(K_norm(p))] od;
tabulate(strings,"l",2," ")

set print_K_parameters_by_height(KGBElt x_K_in,[K_Type] ktypes)=void:
print_K_parameters(x_K_in,ktypes,sort_by_height@[K_Type])
set print_K_parameters_by_K_norm(KGBElt x_K_in,[K_Type] ktypes)=void:
print_K_parameters(x_K_in,ktypes,sort_by_K_norm@[K_Type])

set print_K_parameters_by_height([K_Type] ktypes)=void:
print_K_parameters_by_height(KGB(ktypes[0].real_form,0),ktypes)

set print_K_parameters_by_K_norm([K_Type] ktypes)=void:
print_K_parameters_by_K_norm(KGB(ktypes[0].real_form,0),ktypes)

{default: by height}
set print_K_parameters([K_Type] ktypes)=void:print_K_parameters_by_height(ktypes)
set print_K_parameters(KGBElt x_K,[K_Type] ktypes)=void:print_K_parameters_by_height(x_K,ktypes)