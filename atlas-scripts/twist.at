{ computing the twist of an external involution on a KGB set, and on a Block }

<basic.at
<lattice.at { for restrict_action }

set check (InnerClass ic, mat delta) = bool:
  let rd = root_datum(ic)
  then pred = is_simple_for(sum(poscoroots(rd))), i=semisimple_rank(rd)-1
  , alpha = posroots(rd), theta = distinguished_involution(ic)
  in ( while i>=0 and pred(delta*alpha[i]) do i-:=1 od
     ; i<0 and delta*theta=theta*delta
     )

set KGB_twist (InnerClass ic, mat delta) = (KGBElt x) KGBElt:
  KGB_elt(ic,delta*involution(x)*delta, torus_factor(x) * delta)

set is_twist_fixed ((InnerClass, mat) icm) = (RealForm->bool):
  let twist = KGB_twist(icm) in
  (RealForm rf) bool: real_form(twist(KGB(rf,0)))=rf

{ check that for distinguished involution one gets the Atlas library 'twist' }
set test (RealForm rf) = bool:
  let mytwist=KGB_twist(rf,distinguished_involution(rf)), i=KGB_size(rf)-1 in
  while i>=0 and (let x=KGB(rf,i) in twist(x) = mytwist(x)) do i-:=1 od; i<0

set block_is_twist_fixed ((InnerClass, mat) (ic,delta):icd) = (int,int->bool):
  let f = is_twist_fixed(icd), g = is_twist_fixed(dual(ic),^delta)
  , size = block_sizes(ic) in
  (int i, int j) bool:
    size[i,j]>0 and f(real_form(ic,i)) and g(dual_real_form(ic,j))


set block_twist (InnerClass ic, mat delta) = (Block->(int->int)):
  let x_twist = KGB_twist(ic,delta), y_twist=KGB_twist(dual(ic),^delta)
  in
  (Block b) (int->int):
  let (x,y)=element(b,0)
  then ()=
    if real_form(x)!=real_form(x_twist(x))
    then error("Real form non fixed")
    elif real_form(y)!=real_form(y_twist(y))
    then error("Dual real form non fixed")
    fi
  in  (int i) int: let (x,y)=element(b,i) in index(b,x_twist(x),y_twist(y))

set show_pairs ((int->int) f, int n) = string:
  ##
  for i: n
  do let j=f(i) in
    if j=i then " "+i elif i<j then " ("+i+","+j+")" else "" fi
  od

set show_block_twists ((InnerClass, mat) (ic,delta):icd) = void:
  let bt=block_twist(icd), bs= block_sizes(ic), p=block_is_twist_fixed(icd)
  in
  for i: nr_of_real_forms(ic) do for j: nr_of_dual_real_forms(ic) do
    if p(i,j)
    then
      let b = block(real_form(ic,i),dual_real_form(ic,j)) in
        print_block(b)
      ; prints("twist:",show_pairs(bt(b), #b))
      ; prints("")
    fi
  od od

set quotient (InnerClass ic, mat delta, mat sublattice) = (InnerClass,mat):
  let rd= root_datum(root_datum(ic),sublattice)
  then ic =
    inner_class(rd, restrict_action(distinguished_involution(ic),sublattice))
  in (ic, restrict_action(delta,sublattice))

set show_kernel (RootDatum rd) = void:
  let (,invf) = adapted_basis(simple_roots(rd))
  then text= ## ##
    [ [ "{e}" ]
    , for f in invf do if f=1 then "" else ".Z/"+f fi od
    , for :rank(rd)-semisimple_rank(rd) do ".Q/Z" od
    ]
  in prints("Torsion subgroup of kernel of complex group: " ,text)

set common_denominator ([ratvec] list) = int:
  denom(ratvec: for v in list do /denom(v) od)

set kernel_sublattice (RootDatum rd, [ratvec] generators) = mat:
(  let all = adapted_basis(simple_roots(rd))
   then (C,v)=filter_units(all)
in for gen in generators
   do for vj@j in v
      do assert((vj*gen[j]).is_integer,"Generator not in center") od
   od
;  let d = common_denominator(generators)
   then M = mat: rank(rd) # for gen in generators do ratvec_as_vec(d*gen) od
in replace_gen(all,C*ann_mod(M,d))
)

set twist (Param p, mat delta) = Param:
  let (x,lam_rho,gamma)=%p in
  param(KGB_twist(real_form(x),delta)(x),delta*lam_rho,delta*gamma)

set perm_mat ([int] pi) = mat:
  let n=#pi then id = id_mat(n) in n # for c in pi do id[c] od

set invol_mat ([(int,int)] transp, int n) = mat:
  let pi=#n
  in begin for (i,j) in transp do let t=pi[i] in pi[i]:=pi[j]; pi[j]:=t od
  ; perm_mat(pi) end

set show (Block b, int i) = void:
  let (rf,) = %b then ssr = semisimple_rank(root_datum(rf))
  then statuses = string: ## ##
    [ [ "[" ]
    , for s: ssr
      do if =s then "," else "" fi + block_status_text(status(s,b,i))
      od
    , [ "]" ]
    ]
  , crosses = [int]: for s: ssr do cross(s,b,i) od
  , Cayleys = [int]: for s: ssr do Cayley(s,b,i) od
  in prints(i,": ",statuses, ",  ", crosses, ",  ", Cayleys)
