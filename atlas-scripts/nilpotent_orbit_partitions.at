<basic.at
<combinatorics.at { for |Partition| type, partition generators, dominance order }
<nilpotent_orbits.at

{ (complex) nilpotent orbits for simple classical groups,
  classical groups: SL(n), GL(n), Sp(2n), SO(n),
  orbits: partition-type parameterization
  no attempt is made to handle I/II orbits in type D,
  so these are really orbits for O(n,C) not SO(n,C)
  semisimple_element: H\in X^* from Lie triple (H,X,Y),
  standard (classical group) coordinates
  (in type A_n lambda has n+1 coordinates, i.e. for GL(n))
}

{ utility to convert type A-G of a simple root system to a number 0-6
  we allow and ignore (trailing) torus factors; a pure torus classifies as 7 }
set type_number (LieType t) = int:
  let codes = simple_factors(t) in assert(#codes<=1,"Non-simple Lie type");
  if =#codes then { pure torus } 7
  else let (c,)=codes[0] in ascii(c)-ascii("A")
  fi

{ same as previous applied to a RootDatum }
set type_number (RootDatum rd) = int: type_number(Lie_type(rd))

{ (complex) nilpotent orbits, partition-type classification,
  for simple group of type A-D
}
set nilpotent_orbit_partitions =
  let C_partitions = parity_restricted_partitions(true)  { odd restricted }
  ,  BD_partitions = parity_restricted_partitions(false) { even restricted }
  in (LieType t) [Partition]:
  let n=semisimple_rank(t) in
  case type_number(t) { this only lets simple types through }
  in  partitions(n+1), BD_partitions(2*n+1)
  , C_partitions(2*n), BD_partitions(2*n)
  else error("Exceptional type")
  esac

{ insert conversion to LieType from (type converting to RootDatum)
  (types A-D only; this only depends on complexification of real group)
}
set nilpotent_orbit_partitions(RootDatum rd) = [Partition]:
   nilpotent_orbit_partitions(Lie_type(rd))

{ nilpotent orbits of dual group (types A-D only) }
set dual_nilpotent_orbit_partitions(RootDatum rd)=[Partition]:
  nilpotent_orbit_partitions(dual(rd))
set dual_nilpotent_orbit_partitions(RealForm G)=[Partition]:
  dual_nilpotent_orbit_partitions(root_datum(G))

{ tools for computing h(O^\vee): apply to rows of Young diagram }
set tworho (int n)=vec: for k:n do (n-1)-2*k od { e.g., [2,0,-2] or [3,1,-1,-3]}
set rho (int n)=[rat]: tworho(n)/2

set String (int n) = Partition:
  for k:n\2 do (n-1)-2*k od { e.g., [4,2] or [5,3,1]  }

{ compute 1/2 h(O^\vee) for G of type |t| (types A-D only)
  O^\vee assumed to be an orbit of G^\vee, given by a partition |P|
  only Lie type (of complexification) of G plays a role }
set semisimple_element (LieType t,Partition P) = vec: { a coweight }
  if type_number(t)=0
  then ## for p in P do tworho(p) od
  else let strs = ## for k in P do String(k) od in
    strs ## for i: sum(P)\2-#strs do 0 od
  fi

{ same as previous applied to (RootDatum,vec p)
  in this case apply dominant(.,rd) to resulting coweight; this only works if
  RootDatum is a classical group with the usual classical coordinates
}
set semisimple_element (RootDatum rd,Partition p) = vec: { a dominant coweight }
  dominant(semisimple_element(Lie_type(rd),p),rd)

{ v,w are partitions of same n: sum(v)=sum(w)
  v, w written in decreasing order (actually use reverse_sort to assume this)
  v,w <-> nilpotent orbits in GL(n)
  return true if orbit(v) contained in closure of orbit(w)
  algorithm: v=(a_1,...,a_r), w=(b_1,...,b_s);
  a_1+...+a_k \le b_1+...+b_k for all k\le min(r,s)sawtrset v
}

set nilpotent_orbit_ss_elements (LieType t) = [vec]:
  for P in nilpotent_orbit_partitions(t) do semisimple_element(t,P) od
set nilpotent_orbit_ss_elements (RootDatum rd) = [vec]:
  for P in nilpotent_orbit_partitions(rd) do semisimple_element(rd,P) od

{moved lesseq_partition (and renamed it) to combinatorics.at}

{ orbits=[v_1,...,v_n]
  closures(orbits)[i] is the set of j (not including i itself) such that
  orbits[j] contained in the closures of orbits[i]
}
set closures([Partition] orbits) = [[int]]:
   for P@i in orbits := {pre-sort} for P in orbits do reverse_sort(P) od
   do
      prints("P=",P, "i=",i);
      for lambda@j in orbits
      do
         prints("j=",j);
	 if j!=i and leq_dominance_order_partitions_presorted(lambda,P)
         then
	    prints("got",i, " ", j);
	    [j]
	 else []
	 fi
      od.##
   od

{ this only works for simple classical groups, fails for exceptional groups;
  the more general version in nilpotent_orbits_exceptional handles the
  simple exceptional case also }
set nilpotent_lambdas_classical (RootDatum rd) = [ratvec]:
    for lambda in nilpotent_orbit_ss_elements(dual(rd)) do lambda/2 od

set complex_nilpotent_from_partition(RootDatum rd, Partition p)=
ComplexNilpotent:(rd,(),semisimple_element(rd,p))

set dim_nilpotent_partition(RootDatum rd,Partition p)=
dim_nilpotent(complex_nilpotent_from_partition(rd,p))
