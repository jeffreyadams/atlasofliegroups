{! Embedding of the complex group K defined by compact imaginary root system

 $T_{K_0}=(H^{\delta})_0 =$ Cartan subgroup of $K_0$
 $T_{K_0}\subset T_K=H^{\delta} \subset H$
 $T_{K_0} is a torus in $T_K$ abelian (possibly disconnected)
 $X^*(T_{K_0})= X^*/(X^*)^{-\delta}$
 $X^*(T_K)    = X^*/(1-\delta)X^* \twoheadrightarrow X^*(T_{K_0})$
 (restriction map is surjective)
  see W_K.at

  K_0=identity component of K, with Cartan subgroup T_K0
  B=basis of X_*(T_K0) (as columns) = cocharacter lattice for (K_0,T_K0)
  returns a matrix B with rank(K_0) columns, rank(ic) rows
  columns are a basis of the +1 left-eigenspace delta

  This matrix $B$ satisfies $^\delta*B=B$
  left multiplication by $^B$ is
      projection $X^*(H)  -> X^*(T_{K_0}) = X^*(H)/X^*(H)^{-\delta}$
  left multiplication by  $B$ is
      injection  $X_*(T_{K_0})-> X_*(H)$   [$^\delta*v=v$ for $v$ in image]
!}

<sort.at
<matrix.at { for left_inverse }
<Weylgroup.at { for from_no_Cminus }

set_type
[ K_Type = (KGBElt x, ratvec lambda)
, K_Type_Pol = ParamPol { re-use this type, with nu-part of the terms zero }
, KHighestWeight = (KGBElt x, vec mu)
]

{ Three ways of parametrizing K-types:

1. K_Type:(KGBElt x,ratvec lambda)
  representating a final, non-zero, standard limit module
  these are in bijection with K-hat
  lambda\in X^*+rho
  requirements:
  standard: <lambda,alpha^vee> >= 0 (alpha imaginary)
  final: <lambda+rho_r,alpha^vee> even (alpha real)
  nonzero: <lambda,alpha^vee>=0, alpha imaginary-simple => alpha is non-compact

2. KHighestWeight: (KGBElt x_K,vec mu)
  x_K in distinguised fiber defines K
  recall that T_K=H^\delta is abelian subgroup of K_#
  mu\in X^*, viewed as element of X^*/(1-delta)X^*=X^*(T_K)
    (T_K can be disconnected)  is a highest weight for K_#=T_K.K_0
  equivalence includes modding out by (1-delta)X^*, see function = below

3. K0_Param: ordinary parameter (x_K,lambda,nu=0) for
   irreducible finite dimensional representation of K_0
   its highest weight is a dominant weight of T_K0
}


{ ------------------    matrices related to T_K0\subset H  ------------------ }


set cocharacter_lattice_K (InnerClass ic) = mat:
  eigen_lattice(^distinguished_involution(ic),1) { id_mat in equal rank case }

{ condition testing that x is on the fundamental Cartan, not necessarily in the
  distinguished fiber}
set is_fundamental_Cartan (KGBElt x) =
  none(for a in posroots(root_datum(x)) do is_real(a,x) od)

{ in the following function x is required to be on the fundamental Cartan}
set cocharacter_lattice_K (KGBElt x) = mat:
  assert(is_fundamental_Cartan(x), "x is not on the fundamental Cartan");
  eigen_lattice(^involution(x),1)

{ matrix of projection X^*(H)-> X^*(T_K0)=X^*(H)/X^*(H)^{-theta_x}
  project modulo the -1 eigenspace of the distinguished involution (or theta_x)
}
set projection_to_K_matrix (InnerClass ic) = mat:^cocharacter_lattice_K(ic)
set projection_to_K_matrix (KGBElt x)      = mat: ^cocharacter_lattice_K(x)

{ projection function X^*(H) -> X^*(T_K0)
  this accepts a rational vector in X^*_\Q, provided its image is integral
  avoid transpose in projection_to_K_matrixI(ic)*v, but morally it is that
}
set project_K (InnerClass ic,vec v)= vec: v*cocharacter_lattice_K(ic)
set project_K (KGBElt x,vec v)     = vec: v*cocharacter_lattice_K(x)
set project_K (InnerClass ic,ratvec v)= vec:
  ratvec_as_vec(v*cocharacter_lattice_K(ic))
set project_K (KGBElt x,ratvec v)     = vec:
  ratvec_as_vec(v*cocharacter_lattice_K(x))


{ matrix of injection X_*(T_K0)->X_*(H); image is the saturated sublattice
  X_*(H)^theta }
set injection_from_K_matrix = (InnerClass->mat):cocharacter_lattice_K@InnerClass
set injection_from_K_matrix = (KGBElt->mat):    cocharacter_lattice_K@KGBElt

{ injection function X_*(T_K0) -> X_*(H)) }
set inject_K (InnerClass ic,ratvec v)= vec:
  ratvec_as_vec(injection_from_K_matrix(ic)*v)
set inject_K (KGBElt x,ratvec v)     = vec:
  ratvec_as_vec(injection_from_K_matrix(x)*v)

{ injection X^*(T_K0) -> X^*(H)^delta_Q   (denominator can be 2)
  B=cocharacter_lattice_K(x)
  left mult by ^B is surjection X^*(H) --> X^*(T_K0)
  restriction to X^*(H)^delta is _not_ necessarily surjective,
  for example when T(R)=complex torus
  rightinverse(^B): X^*(T_K0)-> X^*(H), not necessarily X^*(H)^delta
  v -> w=(1+delta)/2*rightinverse(B)*v is in X^*(H)^delta\otimes 1/2,
  satisfies ^B*w=v
  application: map (\frak t_K)^* \hookrightarrow \frak t^*, used in the
  Vogan algorithm, see project.at
}
set coinject_from_K (InnerClass ic,ratvec v) = ratvec:
  (1+distinguished_involution(ic))*right_inverse(^cocharacter_lattice_K(ic))*v/2
set coinject_from_K (KGBElt x,ratvec v) = ratvec:
  (1+involution(x))*right_inverse(^cocharacter_lattice_K(x))*v/2

set rank_K (InnerClass ic) = int:
  let (c,C,)=classify_involution(distinguished_involution(ic)) in c+C

{ G_K_roots_and_coroots_raw
  Input: x in distinguished fiber,
    so theta=delta permutes positive complex roots
  Output: ((G_K_roots,G_K_coroots),(injection matrix,pull_back matrix)

  G_K_roots: posroots of K as elements of X^*(H) (coordinates of G, not K)
    from all compact imaginary posroots, and one of each complex theta-orbit
  G_K_coroots: poscoroots of K as elements of X_*(H) (and delta-fixed)
     from compact imaginary poscoroots
     and for each complex theta-orbit, the coweight c.(alpha^v)(1+theta)
       c=1 if  <delta(alpha),alpha^\vee>=0
       c=2 if  otherwise (<,>=\pm 1)
  injection matrix: X_*(T_K0) ->  X_*(H)^{^delta} (isomorphism)
  pull_back matrix: X_*(H)^{^delta} -> X_*(T_K0)  (isomorphism)
}
set G_K_roots_and_coroots_raw (KGBElt x) = ((mat,mat),(mat,mat)):
  let ic = inner_class(real_form(x))
  then
    inj = cocharacter_lattice_K(ic) { isomorphism (X_*(T_K0)->X_*(H)^\delta) }
  , delta = distinguished_involution(ic), rd = root_datum(ic)
  then pull_back = left_inverse(inj) { columns are coweights in X_*(T_K0) }
  , proj = ^inj { projection X^*->X^*(T_K0) }
  , proots = posroots(rd), pcroots = poscoroots(rd), r = rank(rd)
  , is_cpt  = is_compact(x) { predicate on imaginary roots }
  , ic_inx = [int]:[], C_inx = [int]:[] { list indices into proots/pcroots }
  in begin
    assert(involution(x)=delta,"x is not in distinguished fiber")
  ; for alpha@j in proots
    do let k = root_index(rd,delta*alpha) in
       if k=j { since delta=involution(x), this means alpha is imaginary }
       then if is_cpt(alpha) then ic_inx #:= j fi
       elif k>j { first of a pair of complex posroots } then C_inx #:= j
       fi
    od
  ; (( {proj * }r#for i in ic_inx##C_inx do proots[i] od
     , {pull_back * }
       (r#for i in ic_inx do pcroots[i] od)
       ## { concatenate matrices }
       (r#for i in C_inx
          do pcroots[i]*(1+delta)*(int: 1-pcroots[i]*delta*proots[i]) od
          { the factor after int: is yet another way of expressing c above }
       )
     )
    ,(inj,pull_back)
      { used in G_K_roots_and_coroots@KGBElt,
        and provided in case the user needs them }
    )
  end

{ apply projection: X^*(H) -> X^*(T_K0) to roots (projection=^inj)
       pull_back:  X_*(T_K0) -> X_*(H) (isomorphism to X_*(H)^delta
}
set G_K_roots_and_coroots (KGBElt x) = (mat,mat):
  let ((roots,coroots),(inj,pullback)) = G_K_roots_and_coroots_raw(x)
  in (^inj*roots,pullback*coroots)

{ extract simple roots, coroots by computing pairing with rho,rho^v }
set G_K_simple_roots_and_coroots (KGBElt x) = (mat,mat):
  let pos_sys=G_K_roots_and_coroots(x) in simple_from_positive(pos_sys)

set rank_K (RealForm G) = int: compact_rank(Cartan_class(G,0))

{ here x is required to be in the distinguished fiber: }
set K_root_datum (KGBElt x) = RootDatum:
  root_datum(G_K_simple_roots_and_coroots(x))
set K_0 (KGBElt x) = RealForm:
  let rd = K_root_datum(x)
  in quasicompact_form(inner_class(rd,id_mat(rank(rd))))
set K_0 (RealForm G) = RealForm: K_0(KGB(G,0))

{ here x is required to bein the distinguished fiber: }
set rho_K (KGBElt x) = ratvec:   rho(K_0(x))   { in X^*(T_K0) }
set rho_K (RealForm G) = ratvec: rho(K_0(G))

set rho_c (KGBElt x) = ratvec:
  coinject_from_K(x,rho_K(x)) { as an element of (X^*(H)^delta_Q }
set rho_c (RealForm G) = ratvec: rho_c(KGB(G,0))

set tworho_c(KGBElt x)= ratvec:   2*rho_c(x) { not necessarily a vec }
set tworho_c(RealForm G)= ratvec: 2*rho_c(G)


{	  conversion from restriction to K format to Param		}

{ Fokko outputs a K-type as two_lambda@torus_bits#cartan_class
  this defines a final standard limit parameter p=(x,lambda) where
  torus_factor(x)=base_grading(G)+torus_bits, and involution(x) is the
  canonical involution of the Cartan_class
  currently Fokko commands Ktype_mat, branch and Ktypeform print K-types in
  format [ 2, 2,-2, 2 ]@(0,0,1,1)#4; this can be made into a Param value by
  calling the function below as convert_K_type(G,[2,2,-2,2],[0,0,1,1],4)
}
set convert_K_type (RealForm G,vec two_lambda, vec torus_bits, int cartan) =
  Param:
  let torus_factor = base_grading_vector(G)+torus_bits
  , theta=involution(Cartan_class(G,cartan))
  in parameter(KGB_elt(G,theta,torus_factor),two_lambda/2,null(rank(G)))

{ another version where the K-type specific part is grouped into a 3-tuple }
set convert_K_type (RealForm G,(vec two_lambda, vec torus_bits, int cartan)) =
  Param:
  convert_K_type(G,two_lambda,torus_bits,cartan)


set root_datum (K_Type p) = root_datum(p.x)
set real_form (K_Type p)  = real_form(p.x)
set real_form (KHighestWeight (x,))  = real_form(x)
set K_0(KHighestWeight (x,)) = RealForm: K_0(x)

set K_type (Param p) = K_Type:
  assert(=nu(p),"nu(p) is not zero"); (p.x,p.lambda)
set parameter (K_Type(x,lambda)) = Param:
  parameter(x,lambda,null(rank(root_datum(x))))

{ equality of K_Types is now taken care of by equality of Param values }
set = (K_Type p,K_Type q) = bool: parameter(p)=parameter(q)

set to_no_Cminus (K_Type(x,lambda)) = K_Type:
  let (w,x0)=from_no_Cminus(x) in (x0,w.inverse*lambda)

{ --------------length of K-types------------------ }

{ length of K-type with highest weight mu is <mu+2*rho_K,mu+2*rho_K>
  used in definition of lowest K-types
}

set length (KHighestWeight (x,mu))=rat:
  let rd=root_datum(K_0(x)) then mu_shifted=mu+rd.two_rho
  in rd.nondegenerate_invariant_form(mu_shifted,mu_shifted)

{----------------norm of K-types------------------}

{ K_norm@(ratvec,K_Type) is closely related to height@Param,
  see down a few lines
  There is no dependency on the ratvec argument, but this might be added back
}
set K_norm (ratvec _) = (K_Type->int): (K_Type(x,lambda)):
  let mu=(1+involution(x))*lambda, result=rat:0 in
  for alpha_v in poscoroots(root_datum(x)) do  result+:=abs(alpha_v*mu) od;
  rat_as_int(result/2)

set K_norm (ratvec v,K_Type p) = int: K_norm(v)(p)
set K_norm (ratvec v,Param p) =  int: K_norm(v)(K_type(p))
{ also define K_norm(v) of the (Split,Param) term of a ParamPol }
set K_norm (ratvec v,Split s,K_Type p)=int: K_norm(v)(p)
set K_norm (ratvec v,Split s,Param p)=int:  K_norm(v)(K_type(p))

{ height(Param->int) is defined, indepdent of nu,
  K_norm(Kparam->int) is essentially (height@Param)/2
  precisely: K_norm(K_Type kp)=height(parameter(kp))/2
}
set K_norm (K_Type p) =int: K_norm(rho_check(real_form(p.x)))(p)
set K_norm (Param p)  =int: K_norm(K_type(p))
set K_norm (Split s,K_Type p) = int: K_norm(p)

{
set K_norm (ratvec v) = (ParamPol->int):
  (ParamPol P): int
    let result=0 in
    for p in monomials(P)
    do let m=K_norm(v)(K_type(p)) in
      if m>result then result:=m fi
    od; result
}

{ K_norm of P is the max of K_norm(terms) }
set K_norms (ratvec v) = let norm=K_norm(v) in (K_Type_Pol P) [int]:
  for @p in P do norm(K_type(p)) od

set K_norms (K_Type_Pol P) = [int]: K_norms(rho_check(real_form(P))) (P)

set K_norm (ratvec v,K_Type_Pol P) = int: let norms=K_norms(v) in
  if =P then 0 else max(norms(P)) fi

set K_norm (K_Type_Pol P) =int: K_norm(rho_check(real_form(P)),P)

set leading_terms (ratvec v) = let norm=K_norm(v) in (K_Type_Pol P): K_Type_Pol:
  let max=K_norm(v,P), result=null_module(real_form(P)) in
  for c@p in P do if norm(K_type(p))=max then result+:=c*p fi od; result

set all_K_norms (ratvec v) = let norm=K_norm(v) in (K_Type_Pol P) [int]:
  sort(for c@p in P do norm(K_type(p)) od)

set all_K_norms(K_Type_Pol P) = [int]: all_K_norms(rho_check(real_form(P))) (P)

{ sort [K_Type] by K_norm(v) }
set sort_by_K_norm (ratvec v) = ([K_Type] -> [K_Type]): sort_by(K_norm(v))

set sort_K_Type_Pol_by_K_norm (ratvec v) = let norm=K_norm(v) in
  ([(Split,K_Type)] -> [(Split,K_Type)]): sort_by((Split s,K_Type p):norm(p))

set sort_by_K_norm = ([K_Type] -> [K_Type]): sort_by( K_norm@K_Type )
set sort_by_K_norm = ([(Split,K_Type)] -> [(Split,K_Type)]):
  sort_by( K_norm@(Split,K_Type) )

set print_by_K_norm (ratvec v) = let norm=K_norm(v) in (K_Type_Pol P) void:
  let result=sort_K_Type_Pol_by_K_norm(v)(for c@p in P do (c,K_type(p)) od)
  in for (c,p) in result do prints(split_as_int(c),"*",p," ", K_norm(v)(p)) od

set print_by_K_norm (ratvec v,K_Type_Pol P) = void: print_by_K_norm(v)(P)

set print_by_K_norm (K_Type_Pol P) = void:
  print_by_K_norm(rho_check(real_form(P)),P)

set leading_terms (K_Type_Pol P) = K_Type_Pol:
  leading_terms(rho_check(real_form(P)))(P)