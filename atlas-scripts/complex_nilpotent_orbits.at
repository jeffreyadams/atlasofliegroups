<misc.at { for dimension@RootDatum }
<lattice.at { for in_lattice@(mat,ratvec) }
<parabolics.at { for Levi@Parabolic }
<parameters.at { for parameter@(KGBElt,KGBElt,ratvec) }
<nilpotent_orbit_partitions.at {for nilpotent orbits of classical groups}

{ ComplexNilpotent: (RootDatum rd,vec H)
  where [H,X,Y] is a Lie triple, H\in X_*, and orbit=G.X
  H must satisfy <alpha,H>=0,1,2 for all simple roots,
  in particular is_dominant(dual(rd),H)=true
}
set_type ComplexNilpotent = (RootDatum root_datum_of, vec semisimple_element)
{ field name |root_datum| would conflict with |root_datum@W_word| (too close) }

set dim_nilpotent (RootDatum rd,ratvec H) = int:
if (#H>0) then let (g_0,g_1)=(rank(rd),0) in
for alpha in posroots(rd) do
 let c=alpha*H in
   if c=0 then g_0+:=2
   elif c=1 then g_1+:=1 fi od;
{prints("g_0:", g_0, "g_1:" ,g_1);}dimension(rd)-g_0-g_1 else 0 fi

set diagram (ComplexNilpotent O) = [int]:
let H=O.semisimple_element in
for v in simple_roots(root_datum_of(O)) do H*v od

set dim_nilpotent(ComplexNilpotent O)=let (rd,H)=O in dim_nilpotent(rd,H)

set dim_eigenspace(RootDatum rd, ratvec H, int k)=int:
let rv=0 in
if k=0 then rv:=rank(rd);
for alpha in posroots(rd) do {prints("alpha:", alpha, "  ", rv);}if alpha*H=0 then rv+:=2 fi od
else
for alpha in posroots(rd) do if alpha*H=k then rv+:=1 fi od
fi ;rv


set max_eigenspace(RootDatum rd, ratvec H)=int:
let rv=rat:0 in
for alpha in posroots(rd) do if alpha*H>rv then rv:=alpha*H fi od; rat_as_int(rv)

set all_eigenspaces(RootDatum rd, ratvec H)=[int]:
assert(is_dominant(dual(rd),H),"H is not dominant");
let sum=0 in
let rv=[int]:[] in
for k:max_eigenspace(rd,H)+1 do
let d=dim_eigenspace(rd,H,k) in
rv#:=d;if k=0 then sum+:=d  else sum+:=2*d fi od ;
{prints("sum=", sum, " dimension(G)=", dimension(rd));}
rv

set extract_even([int] v)=for i:(#v+1)\2 do v[2*i] od
set extract_odd([int] v)=for i:#v\2 do v[2*i+1] od

set is_decreasing([int] v)=let rv=true in
for i:#v-1 do if v[i]<v[i+1] then rv:=false fi od ;rv

set even_eigenspaces(RootDatum rd, ratvec H)=[int]:extract_even(all_eigenspaces(rd,H))
set odd_eigenspaces(RootDatum rd, ratvec H)=[int]:extract_odd(all_eigenspaces(rd,H))

{set dim_nilpotent(KGBElt x,ratvec H)=
let G=real_form(x) in
if (#H=0 or H=null(rank(G))) then 0 else
let K=K_0(KGB(G,0)) then
dim_K=dimension(K) then
L=L(x,H) then
L_K=K_0(KGB(L,0)) then
dim_L_K=dimension(L_K) then
dim_u_cap_k_1=dim_u_cap_k_1(x,H) in
rat_as_int(dim_K-dim_L_K-dim_u_cap_k_1) fi
}

set support(KGBElt x)=[int]:
  let (,w)=word(real_form(x),
                distinguished_involution(real_form(x)),involution(x))
  in sort_u(w)

set support(Param p)=[int]:support(x(p))

set blocku(RealForm G)=[Param]:
let b=block_of(trivial(G)) then
rv=[Param]:[] in
for p in b do
 if all (for k in support(x(p)) do is_descent(k,p) od) then rv#:=p fi  od;rv

set sort_by (((vec, rat)-> rat) f)=([(vec,rat)] v) [(vec,rat)]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od

set sort_by_length =([(vec,rat)]->[(vec,rat)]):
sort_by((vec v,rat c) rat: c)



{these is a superset of the possible H in a Lie triple [H,E,F]}
set all_H(RootDatum rd)=[(vec,rat)]:
let n=semisimple_rank(rd) then
v=box(3,n) then
coweights=fundamental_coweights(rd) then
simple_coroots=simple_coroots(rd)  then
rv=[(vec,rat)]:[] in
 for w in v do
let u=ratvec:null(rank(rd)) in for i:#w do u+:=w[i]*coweights[i] od;
if is_even(dim_nilpotent(rd,u)) and  in_lattice(simple_coroots,u)
and is_decreasing(even_eigenspaces(rd,u))
and is_decreasing(odd_eigenspaces(rd,u))
then rv#:=(ratvec_as_vec(u),invariant_form(dual(rd),u,u))  fi od;sort_by_length(rv)

set all_H_dimensions(RootDatum rd)=[int]:
let all=all_H(rd) in
let dims=for (v,)@i in all do let d=dim_nilpotent(rd,v) in prints(i, " ", v, ", ", v*simple_roots(rd), even_eigenspaces(rd,v), " ", odd_eigenspaces(rd,v),  " ", d);d od in
sort(dims)

set sort_by (((ratvec, [vec])-> int) f)=([(ratvec,[vec])] v) [(ratvec,[vec])]:
  for index in inv_standardisation(for x in v do f(x) od) do v[index] od

set sort_by_dimension_of_2_eigenspace =([(ratvec,[vec])]->[(ratvec,[vec])]):
sort_by((ratvec z,[vec] v) int:#v)

{
=([(ratvec,[vec])] -> [(ratvec,[vec])]):
sort_by((ratvec H,[vec] v) int:#v)


}







{find H which work for given q=q(x,H)=(L,u)}
set find_H (Parabolic P) = [(vec,[vec])]: { should be [(vec,mat)] really }
{set find_H((KGBElt x,RealForm L,[vec] u))=[(vec,[vec])]:}
begin
  let x=x(P), L=Levi(P) then rd=root_datum(x)
  , u_p=columns_with(is_noncompact(x),nilrad_roots(P))
  , result = [(vec,[vec])]: []
  in
{ prints("u_p:", u_p); }
  for (H,) in all_H(real_form(x))
  do
  { prints("H=", H, ", ", rho(L), ", ", H*rho(L)); }
    if H*involution(x)=H and H*rho(L)=0 and all(for alpha in u_p do >H*alpha od)
    then let level_two_roots = columns_with((vec alpha): H*alpha=2, u_p ) in
      result #:= (H,[vec]:level_two_roots)
    fi
  od
; result
end

set max_only([(vec,[vec])] arg)=[(vec,[vec])]:
  if #arg>0
  then
    let (H_last,vectors_last)=arg[#arg-1] then max=#vectors_last 
    then rv= [(vec,[vec])]: []
    in for (H,vectors) in arg do if #vectors=max then rv#:=(H,vectors) fi od
  ; rv
  else [(vec:null(0),[])]
  fi

{

    let done=false,i=0 in
      while not done and i<#u_p do if H*u[i]=2 then done:=true;rv#:=(H,u_p[i]) else i:=i+1 fi od fi od ;rv
}
{
set output([(Parabolic,[(vec,[vec])])] answer)=
let rv=[] in
let rv_summary=[] in
let (P,) =answer[0] in
let rd=root_datum(P) in
for (Q,pairs) in answer do
let (S,x)=Q in let ()=prints();prints("Q: x=", x);prints("L=",Levi(Q));prints("u=",u(Q)) in
{let ()=for (H,vectors) in pairs do prints("H:", H, " dimension: ", dim_nilpotent(rd,H));prints("vectors: ", vectors);rv#:=(H,vectors) od}
rv_summary#:=(Q,#pairs)  od
;prints("summary:");
{for ((x,L,u),s)@i in rv_summary do }
for ((x,L,u),pairs)@i in answer do
prints();prints("parabolic #", i);prints(x);prints(L);prints("u=", u, "  dim(u): ", #u);prints("Number of H:",#pairs);
for (H,u) in pairs do
 prints("H: ", H);prints("u\cap p:", u, "  dim u\cap p:", #u);prints("dimension: ",dim_nilpotent(rd,H)) od od;
prints();prints("number of parabolics:", #answer);
prints("number of orbits:", #rv);
prints("dimensions of orbits:");
 let orbits= for (q,pairs)  in answer do
  let (x,,)=q in
 for (H,) in pairs do  dim_nilpotent(rd,H) od od in print(orbits);
prints("all dimensions:", flatten(orbits));
prints("dimensions with multiplicity:", sort(flatten(orbits)));
prints("distinct dimensions:", sort_u(flatten(orbits))); orbits

set output_H([((KGBElt,RealForm,[vec]),[(vec,[vec])])] answer)=
let ((x,,),) =answer[0] in
let rd=root_datum(x) in
for (q,pairs) in answer do
let (x,L,u)=q in prints();prints("x=", x);prints("L=",L);prints("u=",u);
for (H,vectors) in pairs do prints("H:", H, " dimension: ", dim_nilpotent(rd,H)) od od


set run(RealForm G)=
let allq=theta_stable_parabolics(G) then answer=for q in allq do (q,find_H(q))  od in  output(answer);answer

set run_max_only(RealForm G)=
let allq=all_q(G) then
answer=for q in allq do (q,max_only(find_H(q)))  od in  output(answer);answer

set run_max_only(RealForm G,int i)=
let allq=[all_q(G)[i]] then
answer=for q in allq do (q,max_only(find_H(q)))  od in  output(answer);answer
}
{containment order}
set <= ([int] a,[int] b)=all(for i:#a do find(b,a[i])!=-1 od)
set <([int] a,[int] b)=sort(a) != sort(b) and a<=b

set  principal_block(RealForm G)=Block:block(G,dual_quasisplit_form(G))

{do:
>wcells print_W_cells(G,Gd)
in shell:
parse_even_nilpotents.pl wcells
in atlas:
<wcells_out {to define variable [[int]]:Wcells}}


{convert Block to [param]
Block: returned by block(G,Gd), is a list of pairs (x,y)
}
set convert(Block B,ratvec gamma)=
for i:#B do  let (x,y)=element(B,i) in parameter(x,y,gamma) od

{just subset of block}
set convert(Block B, [int] S,ratvec gamma)=
for i in S do  let (x,y)=element(B,i) in parameter(x,y,gamma) od

set real_form(Block B)=RealForm:let (x,)=element(B,0) in real_form(x)
set rho(Block B)=ratvec:rho(real_form(B))

{choose appropriate infinitesimal character for (x,y)}
set choose_gamma(KGBElt x,KGBElt y)=ratvec:choose_g(y,x)

{choose appropriate infinitesimal character for B}
set choose_gamma(Block B)=ratvec:choose_gamma(element(B,0))

set convert(Block B)=convert(B,choose_gamma(B))
set convert(Block B,[int] S)=convert(B,S,choose_gamma(B))

{convert list of wcells [[int]] to [[Param]]}
set convert_list_W_cells(Block B,ratvec gamma,[[int]] Wcells)=[[Param]]:
let converted_block=convert(B,gamma) in
for cell in Wcells do
 for k in cell do converted_block[cell[k]] od od

{return list of tau-invariants for B
tau_invariants(B)[i]=tau-invariant of block element i
}
set tau_invariants(Block B)=[[int]]:
let gamma=choose_gamma(B) in
for i:#B do let (x,y)=element(B,i) in tau(parameter(x,y,gamma)) od

set tau_invariants_of_cell(Block B, [int] cell)=[(int,[int])]:
let gamma=choose_gamma(B) in
for i in cell do let (x,y)=element(B,i) in (i,tau(parameter(x,y,gamma))) od

set tau_invariants_of_cell_raw(Block B, [int] cell)=[[int]]:
let gamma=choose_gamma(B) in
for i in cell do let (x,y)=element(B,i) in tau(parameter(x,y,gamma)) od

set tau_containing(Block B,[int] P)=[int]:
let t=tau_invariants(B),rv=[int]:[] in
for i:#t do if P<=t[i] then rv#:=i fi od;rv

{test if p is an Aq}
set is_Aq(Param p)=bool:
all(for i in support(p) do is_descent(i,p) od)

{test if (x,y) -> Aq parameter}
{the first version isn't necessary, just use the second}
{because element(B,i) returns (x,y), so this makes is_Aq(element(B,i)) work:}
{set is_Aq(KGBElt x,KGBElt y)=is_Aq(parameter(x,y,choose_gamma(x,y)))}
set is_Aq((KGBElt x,KGBElt y))=is_Aq(parameter(x,y,choose_gamma(x,y)))

{compute all Aq's for G as [int], (coming from principal block)}
set Blocku(RealForm G)=[int]:
let B=principal_block(G) then
rv=[int]:[] in
for i:#B do if is_Aq(element(B,i)) then rv#:=i fi od;rv

set is_Aq_cell(Block B,[int] C)=bool:
let i=first(#C,(int i)bool:is_Aq(element(B,C[i]))) in i!=-1

set is_Aq(Block B,int i)=bool:is_Aq(element(B,i))

set Aq_cells(Block B,[[int]] cells)=
  let rv=[[int]]:[] in
  for C in cells do if is_Aq_cell(B,C) then rv#:=C fi od; rv

set Aq_reps(Block B,[int] cell)=
let rv=[int]:[] in for i in cell do if is_Aq(B,i) then rv#:=i fi od ;rv

set Aq_cells(RealForm G,[[int]] cells)=Aq_cells(principal_block(G),cells)

set complex_nilpotent_orbits(RootDatum rd)=
for P in nilpotent_orbit_ss_elements(rd) do (rd,P) od

set complex_nilpotent_orbit_closures(RootDatum rd)=closures(nilpotent_orbit_ss_elements(rd))

set orbits_closures(RootDatum rd)=(complex_nilpotent_orbits(rd), complex_nilpotent_orbit_closures(rd))
