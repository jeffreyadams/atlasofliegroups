<L_packet.at
<hodgeParamLaurentPol.at
<stable.at
<extParamPol.at

set te_verbose=true

{very preliminary version of twisted endoscopic lifting
given: (G,delta^v)
G=(split) real group
delta^v=distinguished involution of G^v
H^v=identity component of (G^v)^delta
H = dual group of H.split_form
  = endoscopic group for G
[Of course G shouldn't have to be split, and then H
will be the appropriate quasisplit form of H]

endoscopic(G,delta^v) returns (H,M)
H is complex (you should take its split_form)
and M is a matrix relating T_H and T_G

At the moment this has been designed for G=GL(n,R)
it probably doesn't work in other cases: the embed_KGB
function is clumsy

also inverse_lift_std is now done by a brute force search,
until we figure out the right way
}
{<mezo.at}

{from mezo.at:}
set delta_l_int_long(Param p,mat delta)=(int,int,int,rat):
if not is_fixed(delta,p) then (-1,-1,-1,-1) else
let rd=p.root_datum then
G=p.real_form then
ic=inner_class(rd,delta) then
rd_H_check=K_0(ic.quasicompact_form).root_datum then
rd_H=dual(rd_H_check) then
H=rd_H.split_form then
x_G=KGB(G,0) then
{proj_H=cocharacter_lattice_K(ic) then}
proj_H=projection_to_K_matrix(x_G) then
G=p.real_form then
gamma=p.infinitesimal_character then
gamma_H=proj_H*gamma then
theta=p.x.involution then
theta_H=proj_H*theta*right_inverse(proj_H) then
compact_rank_H=#kernel(theta_H-1) then
constant=split_rank(H.fundamental_Cartan) then
roots=##for alpha in rd_H.posroots do
 if is_positive_root(rd_H,theta_H*alpha) then [alpha] else [] fi od
in (#roots,compact_rank_H,constant, (#roots+compact_rank_H-constant)/2)
fi

set delta_l_int(Param p,mat delta)=int:
let (,,,x)=delta_l_int_long(p,delta) in rat_as_int(x)

{this should be a built-in, or at least in some other file}
{set partial_extended_block(Param p,mat delta)=[Param]:
let (B,,)=partial_extended_KL_block(p,delta) in B}

set is_stable(ParamPol P)=bool:
let (M,)=stable(monomials(P)) then
v=[int]: for (c,p) in %P do c.split_as_int od in
in_lattice(^M,v)
{
set partial_KL_P_polynomials (Param p, mat delta) = i_poly_mat:
   let (,P,polys) = partial_extended_KL_block(p,delta)
in for row in rows(P) { mat to i_pol_mat convention flip }
   do for index in row do if index.< then -polys[-index] else polys[index] fi od
   od
   }
{
set partial_fixed_block_of(mat delta,Param p)=
##for a in partial_block(p) do if is_fixed(delta,a) then [a] else [] fi od
}

set big_KL_P_polynomials(Param p,mat delta) = i_poly_mat:
{  let B=partial_fixed_block_of(delta,p) in}
  let (B,,)=partial_extended_KL_block(p,delta) in

  let (I_delta,g,complete_indices,delta_action)=tabulate_indices(B,delta)
  then B_delta = for i in I_delta do B[i] od
  , P=KL_P_polynomials(p)
  then P_delta=KL_P_polynomials(p,delta)
  in
  if =#P_delta
  then prints("Note: block not delta-fixed")
  ; KL_P_polynomials(B) {block is not fixed by delta}
  else let n=#complete_indices then rv=zero_poly_matrix(n) in
     for a:n
     do let (i,epsilon_i)=complete_indices[a] in
        for b:n-a from a
        do let (j,epsilon_j)=complete_indices[b] in
{ prints("a=",a," b=",b," i=",i," e_i=",epsilon_i," j=",j," e_j=",epsilon_j); }
           if a=b
           then  rv:=update_matrix_entry(rv,a,b,one) {diagonal entries}
           elif (epsilon_i*epsilon_j=1) { entries have same sign: P+P^delta}
           then let x=g[i], y=g[j] in
{ prints("P[i][j]=",P[i][j]," x=",x," y=",y," , Pdelta[x][y]=",P_delta[x][y]); }
	     rv:=update_matrix_entry(rv,a,b,poly_add(P[i][j],P_delta[x][y])\2)
	   elif epsilon_i*epsilon_j=minus_1
	   then {(+,-) or (-,+): P-P^delta} let x=g[i], y=g[j] in
	     rv:=update_matrix_entry(rv,a,b,poly_sub(P[i][j],P_delta[x][y])\2)
	   elif abs(epsilon_i)=1 and epsilon_j=0 {(\pm,ind): P}
	   then rv:=update_matrix_entry(rv,a,b,P[i][j])
	   elif epsilon_i=0 and abs(epsilon_j)=1  {(ind,\pm): P}
	   then rv:=update_matrix_entry(rv,a,b,P[i][j])
	   elif epsilon_i=0 and epsilon_j=0
	   then {(ind,ind): P(gamma,mu)+P(gamma,mu^delta)}
	     rv:=update_matrix_entry
		 (rv,a,b,poly_add(P[i][j],P[i][delta_action[j]]))
           fi
        od
     od
  ; rv
  fi

set big_KL_P_signed_polynomials (Param p,mat delta) = i_poly_mat:
{  let B=partial_fixed_block_of(delta,p) in}
  let (B,,)=partial_extended_KL_block(p,delta) in
  let (I_delta,g,complete_indices,delta_action)=tabulate_indices(B,delta) in
  if =#I_delta then KL_P_signed_polynomials(B)
  else
     let P=big_KL_P_signed_polynomials(B,delta)
     , lengths = for i:#g do length(B[i]) od
     , n=#complete_indices
     in
     for a:n do for b:n
     do let (i,)=complete_indices[a], (j,)=complete_indices[b] in
        P:=update_matrix_entry(P,a,b,P[a][b]*minus_1^(lengths[i]+lengths[j]))
     od od
  ; P
  fi

set twisted_root_datum(RootDatum G,mat T)=TwistedRootDatum:(G,T)

set pre_folded(TwistedRootDatum (rd,delta))=(mat,mat):
assert(is_distinguished(rd,delta),"delta is not distinguished");
let T=SubTorus:eigen_lattice(^delta,1) then   {T=(H^\delta)^0; columns are a basis of X_*(T)}
{T is nxr where n=rd.rank and r=dimension(T)}
{ T: matrix of map X_*(T)->X_*(H) \simeq Z^r -> Z^n: this is T.inject
 ^T: matrix of map X^*(H)->X^*(T) \simeq Z^n->Z^r:   this is T.project=T.restrict
}
roots_nonreduced=sort_u(for alpha in rd.posroots do T.restrict(alpha) od) then
roots=mat:##(for alpha in roots_nonreduced do if find(roots_nonreduced,2*alpha)=-1 then [alpha] else [] fi od) then
coroots=[] in
for alpha in roots do
 let pullback_alpha=let j=first(for beta in rd.roots do T.restrict(beta)=alpha od) in rd.roots[j] then
 v=sum(##(for beta in rd.roots do if T.restrict(beta)=alpha then  [coroot(rd,beta)]
   else []
  fi od)) then
 w=2*v/(v*pullback_alpha) {element of X_*(H) which lives in X_*(T)} then
 corestrict_w=solve(T,w).requisition {coordinates of w in the given basis of X_*(T)} in
 coroots#:=ratvec_as_vec(corestrict_w)
od;(roots,coroots)

set Folded(TwistedRootDatum (rd,delta))=(RootDatum,mat):
{assert(rd.is_semisimple or delta=id_mat(#delta),"root datum is not semisimple and delta !=1");}
assert(is_distinguished(rd,delta),"delta is not distinguished");
let T=SubTorus:eigen_lattice(^delta,1) then   {T=(H^\delta)^0; columns are a basis of X_*(T)}
{T is nxr where n=rd.rank and r=dimension(T)}
{ T: matrix of map X_*(T)->X_*(H) \simeq Z^r -> Z^n: this is T.inject
 ^T: matrix of map X^*(H)->X^*(T) \simeq Z^n->Z^r:   this is T.project=T.restrict
}
roots_nonreduced=sort_u(for alpha in rd.posroots do T.restrict(alpha) od) then
{roots=mat:##(for alpha in roots_nonreduced do if find(roots_nonreduced,2*alpha)=-1 then [alpha] else [] fi od) then}
roots=mat:##(for alpha in roots_nonreduced do if find(2*roots_nonreduced,alpha)=-1 then [alpha] else [] fi od) then
coroots=[] in
for alpha in roots do
 let pullback_alpha=let j=first(for beta in rd.roots do T.restrict(beta)=alpha od) in rd.roots[j] then
 v=sum(##(for beta in rd.roots do if T.restrict(beta)=alpha then  [coroot(rd,beta)]
   else []
  fi od)) then
 w=2*v/(v*pullback_alpha) {element of X_*(H) which lives in X_*(T)} then
 corestrict_w=solve(T,w).requisition {coordinates of w in the given basis of X_*(T)} in
 coroots#:=ratvec_as_vec(corestrict_w)
od;
(root_datum_from_positive((roots,coroots),rd.prefers_coroots),T)

{this returns: (RootDatum H,mat M) where
 Gd=G.dual, T_Gd=Cartan of Gd
 Hd=identity component of Gd^{delta^t}
 T_Hd=Cartan of Gd= identity component of (T_Gd)^{delta^t}
 H=Hd.dual = (twisted) endoscopic group of G

M:  X^*(T_H) -> X^*(T_G)  OR X_*(T_{Hd}) -> X_*(T_{Gd})
^M: X_*(T_G) -> X_*(T_H)  OR X^*(T_{Gd}) -> X^*(T_{Hd})

 left multiplication by M: H.simple_roots -> root_lattice of G
 left multiplication by ^M: G.simple_coroots -> coroot_lattice of H
 }
set endoscopic(RootDatum G,mat delta)=(RootDatum,mat):
let Gd=G.dual then
trd=twisted_root_datum(Gd,^delta) then
(Hd,M)=Folded(Gd,^delta) then
H=Hd.dual in
(H,M)


{atlas> set G=GL(5,R)
Variable G: RealForm (overriding previous instance, which had type RealForm)
atlas> set delta=G.distinguished_involution
Variable delta: mat (overriding previous instance, which had type mat)
atlas> set (H,M)=endoscopic (G,delta)
Variable H: RootDatum (overriding previous instance, which had type RootDatum)
Variable M: mat
atlas> H
Value: adjoint root datum of Lie type 'B2'
atlas> M*H.simple_coroots
Value:
|  1,  0 |
| -1,  2 |
|  0,  0 |
|  1, -2 |
| -1,  0 |

atlas> M*H.simple_roots
Value:
|  1,  0 |
| -1,  1 |
|  0,  0 |
|  1, -1 |
| -1,  0 |
{THIS SAYS:  M: X_*(T_Hd) -> X_*(T_Gd);  Hd.simple_coroots -> (sums of) Gd.simple_coroots}

atlas> ^M*G.simple_coroots
Value:
| -1,  0,  0, -1 |
|  1, -1, -1,  1 |
}

set restrict_action_weak (mat A, mat M) =  { shapes A: n by n, M: n by m }
   case solve(M,A*M) | B.solution: B
   | else null(0,0)
   esac

set lift(mat m, RootDatum G,mat M)=WeylElt:
let W=G.W then
i=first(for w in W do any(solve(M,w.matrix*M)) and restrict_action(w.matrix,M)=m od)
in W[i]

set lift(mat theta_H,mat M,RealForm G)=mat:
let i=first(for x in KGB(G) do any(solve(M,x.involution*M)) and restrict_action(x.involution,M)=theta_H od) in
KGB(G,i).involution

set lift(KGBElt_gen x_H_gen,mat M, RealForm G)=KGBElt_gen:
let tf_H_raw=x_H_gen.unnormalized_torus_factor then
theta_G=lift(x_H_gen.involution,M,G) then
()=if te_verbose then prints("tf_H_raw=",tf_H_raw) fi then
tf_G_raw=M*tf_H_raw then
()=if te_verbose then prints("tf_G_raw=", tf_G_raw) fi then
tf_G=(2*tf_G_raw-G.rho_check)*(1+theta_G)/2 in
KGB_elt_gen(G.inner_class,theta_G,tf_G)

set lift(KGBElt x_H,mat M, RealForm G)=KGBElt_gen:
lift(KGB_elt_gen(x_H),M,G)

set lift_std(Param p_H,mat M,RealForm G, mat delta)=
let E_H=E(p_H.real_form.distinguished_involution,p_H) then
x=lift(p_H.x,M,G) then
gamma_G=M*p_H.infinitesimal_character then
lambda_rho_G=(M*(p_H.lambda)-G.rho)\1 {vec}  then
theta_G=lift(p_H.involution,G,M).matrix*delta then
{g_G=^M*E_H.g then
l_G=^M*E_H.l then
t_G=^M*E_H.t then
tau_G=M*E_H.tau in}
{g_G=solve(left_inverse(M),E_H.g).requisition then
l_G=solve(left_inverse(M),E_H.l).requisition then
tau_G=solve(left_inverse(M),E_H.tau).requisition then
t_G=solve(left_inverse(M),E_H.t).requisition in}


{g_G=M*E_H.g then
l_G=M*E_H.l then}
g_G=G.rho_check then 
l_G=null(#g_G) then
tau_G=solve(^M,E_H.tau).requisition then
t_G=solve(^M,E_H.t).requisition in

ExtParam:(
G.inner_class,
G.distinguished_involution,
gamma_G,
lambda_rho_G,
theta_G,
g_G,
l_G,
-^theta_G,
tau_G,
t_G)


set extended_character_formula (Param p,mat delta) =
let (B,,)=partial_extended_KL_block(p,delta) in
let (I_delta,g,complete_indices,delta_action)=tabulate_indices(B,delta),
{P=big_KL_P_signed_polynomials(p,delta) then}
P=big_KL_P_polynomials(p,delta) then
()=if te_verbose then printPolyMatrix(P) fi  then
index=find(complete_indices,(find(B,p),1)) in
{let ()=prints("index=", index) in}
null_module(p.real_form) +
for i:#complete_indices
do let f=eval(P[i][index],s) in
{let ()=prints(new_line,"i= ", i, " f=",f) in}
 let (j,c)=complete_indices[i] in
 {let ()=prints("j=",j, " f=",f, " c=",c, " ", "f*c=", f*c, "  ",B[j]) in} f*c*B[j]
od

set sign_difference(Param p_G, mat delta)=int:
(-1)^(length(p_G)-delta_l_int(p_G,delta))

{M  mxn integral matrix
 N  mxr integral matrix
 v= rational vector size m
 solve: M*w=v mod N
  i.e. Mw=v modulo the lattice spanned by the columns of N
  algorithm:  M##N is an mx(n+r) matrix
  solve M##N*w=v
  #w=r+n
  w=(w1,w2) #w1=r,#w2=n
  M##Nw=Mw1+Nw2=v
  Mw1=v-Nw2
  }
set solve(mat M,mat N,ratvec v)=maybe_a_ratvec:
  let sol=solve(M##N,v) in
  let ()=if te_verbose then prints("solving: ", v) fi in
   if any(sol) then
    let    ()=if te_verbose then prints("solution: ", sol.requisition) fi in
    let w=sol.requisition in w[:n_columns(M)].solution
   else
    ().no_ratvec
   fi


{gamma_H is the known infinitesimal character for H}
set inverse_lift_std(Param p_G,RealForm H,mat M, mat delta,ratvec gamma_H)=ParamPol:
let y_G=y_gen(p_G) then
action_H=restrict_action(y_G.involution,M) then
tf_u_G=y_G.unnormalized_torus_factor {unnormalized torus factor for G} then  
theta=p_G.x.involution then
N=(1+theta)##id_mat(n_rows(theta)) then
()=if te_verbose then prints(M##N) fi then
tf_u_H_maybe=solve(M,N,tf_u_G) {solution to: M*tf_u_H=tf_u_G mod (X^*_Q)^[-theta]+X_*}  then
tf_u_H=if not any(tf_u_H_maybe) then error("no solution") else
        2*tf_u_H_maybe.requisition  {factor of 2}
fi  then
tf_H=(1+action_H)*(2*tf_u_H-H.rho)/2 {convert to normalized torus factor} then
()=if te_verbose then prints("tf_u_G: ", tf_u_G, new_line, "tf_u_H: ", tf_u_H, new_line, "tf_H: ", tf_H) fi then
y_H_gen=KGB_elt_gen(dual(inner_class(H)),action_H,tf_H) then
()=if te_verbose then prints("y_H_gen=", y_H_gen) fi in
if is_valid(y_H_gen,gamma_H) then
 let ()=if te_verbose then prints("is valid") fi in
 let  lp=L_packet(H,left_inverse(M)*p_G.infinitesimal_character,y_H_gen) then
 ()= if te_verbose then prints("lp="); for a in lp do prints(a) od fi in
 sign_difference(p_G,delta)*param_pol(lp)
else
 let ()=prints("not valid, consider using inverse_lift_std_by_search instead") in 
 error("not valid")
fi

set inverse_lift_std_by_search(Param p_G,RealForm H,mat M,mat delta,ratvec gamma_H)=ParamPol:
let all=all_parameters_gamma(H,gamma_H) then
index=int: first(for p@i in all do  Finalize(lift_std(p,M,p_G.real_form,delta).parameter)=p_G od) in
if index=-1 then prints("inverse_lift_std_by_search failed for p_G=",p_G);null_module(H) else
sign_difference(p_G,delta)*param_pol(L_packet(all[index])) fi

set inverse_lift_std_mixed(Param p_G,RealForm H,mat M, mat delta,ratvec gamma_H)=ParamPol:
let y_G=y_gen(p_G) then
action_H=restrict_action(y_G.involution,M) then
tf_u_G=y_G.unnormalized_torus_factor then
{tf_u_H=left_inverse(M)*tf_u_G then}
theta=p_G.x.involution then
N=(1+theta)##id_mat(n_rows(theta)) then
()=if te_verbose then prints(M##N) fi then
tf_u_H_maybe=solve(M,N,tf_u_G) then
tf_u_H=if not any(tf_u_H_maybe) then error("no solution") else
        2*tf_u_H_maybe.requisition 
fi  then
{tf_u_H=left_inverse(M)*tf_u_G then lift}
tf_H=(1+action_H)*(2*tf_u_H-H.rho)/2 then
()=if te_verbose then prints("tf_u_G: ", tf_u_G, new_line, "tf_u_H: ", tf_u_H, new_line, "tf_H: ", tf_H) fi then
y_H_gen=KGB_elt_gen(dual(inner_class(H)),action_H,tf_H) then
()=if te_verbose then prints("y_H_gen=", y_H_gen) fi in
if is_valid(y_H_gen,gamma_H) then 
 let ()=if te_verbose then prints("is valid") fi in
 let  lp=L_packet(H,gamma_H,y_H_gen) then
 ()= if te_verbose then prints("lp="); for a in lp do prints(a) od fi in
 sign_difference(p_G,delta)*param_pol(lp)
else
 let ()=prints("not valid, using inverse_lift_std_by_search instead") in 
 inverse_lift_std_by_search(p_G,H,M,delta,gamma_H)
fi

{
set inverse_lift_std_mixed(Param p_G,RealForm H,mat M, mat delta)=ParamPol:
let P=inverse_lift_std(p_G,H,M,delta) in
 if =P then prints("inverse lift failed, use search");inverse_lift_std_by_search(p_G,H,M,delta)
 else P fi
}
{returns a sum of standards}
set inverse_lift_irr_mixed(Param p_G,RealForm H,mat M,mat delta,ratvec gamma_H)=
let P=extended_character_formula(p_G,delta) then
()=if te_verbose then prints("P=",P) fi then
PH=null_module(H) + for (c,p) in %P do c*inverse_lift_std_mixed(p,H,M,delta,gamma_H) od then
()=if te_verbose then prints("inverse lift as sum of standards: ", PH) fi in
{composition_series(PH)}
PH

{returns a sum of standards}
set inverse_lift_irr(Param p_G,RealForm H,mat M,mat delta,ratvec gamma_H)=
let P=extended_character_formula(p_G,delta) then
()=if te_verbose then prints("P=",P) fi then
PH=null_module(H) + for (c,p) in %P do c*inverse_lift_std(p,H,M,delta,gamma_H) od then
()=if te_verbose then prints("inverse lift as sum of standards: ", PH) fi in
PH

{to use: set G=GL(n,R), delta=G.distinguished_involution,
(H,M)=endoscopic(G,delta) to define H,M,G,delta}
set abv_mixed(Param p_H,mat M,RealForm G,mat delta)=
let lift_std_ext=lift_std(p_H,M,G,delta) then
lift_std=parameter(lift_std_ext) then
inverse_lift=inverse_lift_irr_mixed(lift_std,p_H.real_form,M,delta,p_H.infinitesimal_character) {sum of standards} then
()=if te_verbose then prints("inverse_lift: (sum of stds): ", inverse_lift) fi in 
(p_H,lift_std,inverse_lift,composition_series(inverse_lift))

{to use: set G=GL(n,R), delta=G.distinguished_involution,
(H,M)=endoscopic(G,delta) to define H,M,G,delta}
set abv(Param p_H,mat M,RealForm G,mat delta)=
let lift_std_ext=lift_std(p_H,M,G,delta) then
lift_std=parameter(lift_std_ext) then
inverse_lift=inverse_lift_irr(lift_std,p_H.real_form,M,delta,p_H.infinitesimal_character) then
()=if te_verbose then prints("lift_std=", lift_std) fi in
(p_H,lift_std,inverse_lift,composition_series(inverse_lift))



set print([(Param,Param,ParamPol)] data)=void:
let (p_H,p_G,)=data[0] then
()=prints("H=", p_H.real_form,new_line, "G=", p_G.real_form) in
for (p_H,p_G,abv)@i in data do
prints(new_line,"i: ", i, new_line, "p_H: ", p_H,new_line,"inf char(p_H): ", p_H.infinitesimal_character,
new_line, "p_G=lift(p_H): ", p_G, new_line,"inf_ char(p_G): ", p_G.infinitesimal_character	, new_line,"Packet(p_H): ", abv) od 