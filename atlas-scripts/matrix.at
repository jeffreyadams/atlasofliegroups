<basic.at

set upper_unitriangular_inverse (mat U) = mat:
   let n=#U then Q=id_mat(n) { is made to satisfy $Q*U=I_n$ below }
in for Uj@j in U
   do Q[j] := for i:j do -sum(for k:j-i from i do Q[i,k]*Uj[k] od) od
     ## Q[j][j:] { retain the final $n-j$ rows of column $j$ of $Q$ }
   od; Q

{ make result of |echelon| upper triangular, possibly with trailing null rows,
  using row operations; return that triangular matrix and row operations matrix
}
set ech_up (mat M, [int] pivot) = (mat,mat):
   let (r,c)=shape(M)
   then R=id_mat(r) { record row operations, held in transposed form }
in for j:c { loop over columns of M as it is being modified in the loop }
   do let col=M[j] then (d,C)=Bezout(col[j:pivot[j]+1]), tM=^M
   then tM_C=tM[j:pivot[j]+1] * C, R_C = R[j:pivot[j]+1] *C
   in M := c^ for i:r do if i<j or i>pivot[j] then tM[i] else tM_C[i-j] fi od
   ;  R := r# for i:r do if i<j or i>pivot[j] then  R[i] else  R_C[i-j] fi od
   ; assert(M[j,j]=d)
   od; (M,^R)

set left_inverse(mat A) = mat: { for injective map to saturated sublattice }
(  let (M,C,pivots,)=echelon(A), c=#A
in if #M<c then error("not injective (rank is ",#M,"<",c,")") fi
;  let (Tri,R)= ech_up(M,pivots)
in if product(Tri.main_diagonal)=1
   then C*upper_unitriangular_inverse(Tri[:c,:])*R[:c,:]
   else error("image is not saturated")
   fi
)

set right_inverse(mat A) = mat: { section of a surjective lattice map A }
(  let (M,C,pivots,)=echelon(^A), c=A.n_rows
in if M.n_rows<c then error("row rank ",M.n_rows," not full (",c,")") fi
;  let (Tri,R)= ech_up(M,pivots)
in if product(Tri.main_diagonal)=1
   then ^(C*upper_unitriangular_inverse(Tri[:c,:])*R[:c,:])
   else error("matrix is not surjective")
   fi
)

set weak_left_inverse(mat A) = (mat,int): { left inverse after saturation }
(  let (M,C,pivots,)=echelon(A), c=#A
in if #M<c then error("not injective (rank is ",#M,"<",c,")") fi
;  let (Tri,R)= ech_up(M,pivots) then (T1,d)=invert(Tri[:c,:])
in ( C*T1*R[:c,:] , d)
)

set factor_scalar (mat M) = { factor out common divisor } (int,mat):
  let d=gcd(for col in M do gcd(col) od) in (d,if =d then M else M\d fi)

set principal_submatrix(mat M, [int] S)=mat: { choice |S| of rows, columns }
   let m=#S in matrix((m,m), (int i,int j)int: M[S[i],S[j]] )

set main_diagonal_square_block(mat M, int size, int offset) = mat:
  M[ offset:offset+size, offset:offset+size ]
set top_left_square_block(mat M,int size) = mat: M[ :size, :size]
set leading_principal_minor(mat M,int size)=mat:top_left_square_block(M,size)

{select/first_rows/columns are defined in lattice.at}

{row echelon form, just the mat itself, see builtin |echelon|}
set row_echelon(mat M)=mat:let (E,,,)=echelon(^M) in ^E

set cokernel(mat M)=^kernel(^M)
set rank(mat A)=let (B,,pivots,)=A.echelon in #pivots

{concatenate matrices with same number of rows}
set merge_matrices([mat] matrices)=mat:
if #matrices=0 then id_mat(0) else
let rv=null(n_columns(matrices[0]),0) in
for M in matrices do rv##:=M od;rv  fi

set string_compact(mat M)=
let A=^M then
size=max(##for col in M do for x:#col do #(col[x].to_string) od od) in 
##for row in A do 
 let row_string=new_line 
  in  for x in row do row_string+:=pad(x.to_string,size+1) od;row_string od

set print_matrix_compact(mat M)=prints(string_compact(M))

{update one entry of a matrix}
set update_matrix_entry(mat M, int i, int j, int value)= mat:
  let row=M[i] in row[j]:=value; M[i]:=row; M

{add an integer to one entry of a matrix}
set add_to_matrix_entry(mat M, int i, int j, int value)= mat:
update_matrix_entry(M,i,j,M[i][j]+value)

{A: (m,n) matrix, m rows, n columns
 B: (p,q) matrix  p rows, q columns
recall:
 in atlas A[i] is the i^th column
 A[i][j]: j^th row, i^th column
 A[i,j]:  i^th row, j^th column (the usual)

So
A=A[i,j] 0<=i<=p-1, 0<=j<=q-1
B=B[k,l] 0<=k<=m-1, 0<=l<=n-1
let
K=A\otimes B of size (mp,nq)
so
K=K[x,y] with 0<= x <= mp-1, 0<= y <= nq-1

K[pr+v,qs+w]=A[r,s]*B[v,w]
where r<=m-1, v<=p-1 => pr+v<=p(m-1)+(p-1)=pm-1
where s<=n-1, w<=q-1 => qs+w<=q(n-1)+(q-1)=qn-1
inverting:
K[x,y]=A[r,s]*B[v,w] where
x=pr+v,r<=m-1, v<=p-1 => r=x\p, v=x%p
y=qs+w,s<=n-1, w<=q-1 => r=y\q, w=y%q

Conclusion:

K[x,y]=A[x\p,y\q]*B[x%p,y%q]  (x<=mp-1, y<=nq-1)

}

set kronecker_product(mat A,mat B)=mat:
let (m,n)=shape(A), {m rows, n columns}
(p,q)=shape(B) in   {p rows, q columns}
for y:n*q do
 for x:m*p do
{  prints("x:",x, " y:",y," x\p:",x\p, " y\q:",y\q, " x%p:",x%p, " y%q:",y%q);}
  A[x\p,y\q]*B[x%p,y%q] od od  {mp rows, nq columns}

set Kronecker_product(mat A,mat B)=mat:kronecker_product(A,B)

{tools to keep track of the indices}
{Given (m,n) and (p,q)
 X={(x,y) | x<=mp-1, y<=nq-1}
 Y={(r,s,v,w) | r<=m-1, s<=n-1 v<=p-1, w<=q-1}
 (all indices are >=0)
 kronecker_f: X -> Y
 kronecker_g: Y -> X
are inverse bijections}

set kronecker_f(int m, int n, int p, int q)=((int, int)->(int,int,int,int)):
(int x,int y):
assert(0 <= x and x<= m*p-1 and 0<= y and y<= n*q-1,"index out of range");
(x\p,y\q,x%p,y%q)

set kronecker_g(int m, int n, int p, int q)=((int,int, int, int)->(int,int)):
(int r, int s, int v, int w):
assert(0 <= r and r<= p-1 and 0<= s and s<= q-1,"index out of range");
(p*r+v,q*s+w)





