<Weylgroup.at { dominant }

{ finite dimensional representations of G(C)}

{.constructs parameter for the algebraic finite-dimensional of
extremal weight lambda.}
set finite_dimensional(RealForm G, vec lambda) = Param:
let lambdadomrho = dominant(G,lambda)+G.rho  in
parameter(x_open(G),lambdadomrho,lambdadomrho)

{.whether p is finite dimensional.}
set is_finite_dimensional (Param p) = bool:
  let ssr = semisimple_rank(real_form(p))
  in semisimple_rank(integrality_datum(p))=ssr and #tau(p)=ssr

{.for protecting functions intended for finite dimensional parameters only.}
set fd_only (Param p) = Param:
  assert(is_finite_dimensional(p),"representation is infinite dimensional"); p

{.dimension of finite dimensional representation from its highest weight.}
set dimension (RootDatum rd, ratvec lambda) = int:
( let lambda_dom=dominant(rd,lambda) in
  if lambda != lambda_dom
  then prints("Warning: changed ", lambda, ", to ", lambda_dom
             , " to make it dominant")
  ;  lambda := lambda_dom
  fi
; let rho=rho(rd) in { now apply Weyl's dimension formula }
  product(for a in poscoroots(rd) do (lambda+rho)*a/(rho*a) od).rat_as_int
)

set Weyl_dim (RootDatum rd, vec lambda) = int:
( lambda:=dominant(rd,lambda)
; let rho=rho(rd) in { now apply Weyl's dimension formula }
  for a in poscoroots(rd) do (lambda+rho)*a/(rho*a) od.product.rat_as_int
)

{ If split torus in the center not necessarily a vec, this could fail.
  Leave it for now because otherwise weyl_character_formula.at fails to load }
{.highest weight of finite dimensional in X^* coordinates.}
set highest_weight_finite_dimensional (Param p) = vec:
  (p.fd_only.dominant.infinitesimal_character - p.root_datum.rho).ratvec_as_vec

{allow ratvec if G has split central torus}
set highest_weight_finite_dimensional_ratvec (Param p) = ratvec:
   (p.fd_only.dominant.infinitesimal_character - p.root_datum.rho)

set on_fundamental_weights (ratvec v,RootDatum rd) = vec:
   (v*simple_coroots(rd)).ratvec_as_vec

{.fundamental weight coordinates of finite dimensional parameter.}
set fundamental_weight_coordinates (Param p) = vec:
   on_fundamental_weights(highest_weight_finite_dimensional(p),root_datum(p))

{use highest_weight_finite_dimensional_ratvec to all split central torus}
{.dimension of finite dimensional parameter.}
set dimension(Param p) = int:
   dimension(root_datum(p),highest_weight_finite_dimensional_ratvec(p))


{ this function depends on a complex root datum, with half-swapping involution }
set complex_LKT (Param p) = vec:
  let dom = dominant(root_datum(p), ((1+p.x.involution)*p.lambda).ratvec_as_vec)
  in lower(#dom\2,dom) { first half }

{
  some functions related to Frobenius-Schur indicator, real/quaternionic indicator,
  and sign of Hermitian form on finite dimensional representation are
  MOVED TO finite_dimensional_signature.at
}

set ht(RealForm G, vec lambda) = int:
rat_as_int(dominant(G,lambda)*G.rho_check*2)

{.tensor product of algebraic reps of complex group of extremal wts gamma1
  and gamma2, returned as KTypePol of corresponding GC K-types }
set tensor_product(RootDatum rd, vec gamma1, vec gamma2) = KTypePol:
   let GC = rd.complexification
   then repn = finite_dimensional(GC,gamma1##gamma2)
   then gamma_rho = ratvec_as_vec(repn.infinitesimal_character - rho(GC))
   then module = minus_1^length(x_open(GC))*
     (GC.null_K_module +
      for x in KGB(GC) do (minus_1^length(x),K_type(x,gamma_rho)) od)
in branch(module, ht(GC,gamma1##gamma2))

{.tensor product of algebraic reps of complex group of extremal wts gamma1
  and gamma2, returned as list of (multiplicity,highest weight)}
set tensor_product_weights(RootDatum rd, vec gamma1, vec gamma2) = [(int,vec)]:
   let r=rd.rank, rho2=two_rho(rd)
in for c@p in tensor_product(rd,gamma1,gamma2)
   do let lambda_rho = p.lambda_minus_rho
   in (split_as_int(c), lower(r,lambda_rho)+upper(r,lambda_rho)+rho2 )
   od

{Finite dimensional algebraic representation with highest weight v as K-type
  of the complexification of G}
set complex_KT (RealForm G, vec v)=KType:
   let GC=complexification(G), n=rank(G)
   in K_type(KGB(GC,0),(v-two_rho(G))##null(n))

{Multiplicity of the weight wt in the finite dimensional algebraic rep'n with
  highest weight FD}
set wt_mult (RealForm G, vec FD, vec wt)=int:
   let KT=complex_KT(G,FD),GC=complexification(G)
   then I_wt=parameter(x_open(GC),wt##null(rank(G)),null(rank(GC)))
   in split_as_int(branch_std(I_wt,height(KT))[KT])

set list_of_weights (vec hwt,[vec] roots, int n)=[vec]:
   let result=[hwt] then list=result, c=0
   in while c<n do
      for wt in list do
       for a in roots do if find(result,wt-a)=-1 then result#:=wt-a fi od od;
       list:=result; c+:=1 od;
       result

{set wts_in_finite_dimensional (RealForm G, vec FD,int n)=[(vec,int)]:
   let sr=simple_roots(G)
   then list=list_of_weights(FD,sr,n)
   in ##for wt in list
        do let k=wt_mult (G,FD,wt)
	   in if k>0 then [(wt,k)] else [] fi
	od}

set wts_in_finite_dimensional (RealForm G, vec FD)=[(vec,int)]:
   let sr=simple_roots(G), GC=complexification(G), n=two_rho_check(G)*FD
   then KT=complex_KT(G,FD)
   then list=list_of_weights(FD,sr,n),ht=height(KT)
   in ##for wt in list
        do if height(complex_KT(G,wt))>ht then []
	else let I_wt=parameter(x_open(GC),wt##null(rank(G)),null(rank(GC)))
	then k=split_as_int(branch_std(I_wt,ht)[KT])
	   in if k>0 then [(wt,k)] else [] fi fi
	od