<basic.at
<nilpotent_orbits.at
<K_norm.at
<print_K_types.at

set kn_verbose=false

{given basis [Param] convert ParamPol to a vector in this basis
 assuming ParamPol has integer coefficients
 returns a vector if all entries in the ParamPol occur in the basis
 otherwise returns no_vec
}
set vector([Param] basis,ParamPol P) = maybe_a_vec:
   let v = vec: for p in basis do P[p].int_part od
   then diff=P + for c@i in v do (-c,basis[i]) od
in if =diff then v.solution else ().no_vec fi

set vector([KType] basis,KTypePol P) = maybe_a_vec:
   let v = vec: for p in basis do P[p].int_part od
   then diff=P + for c@i in v do (-c,basis[i]) od
in if =diff then v.solution else ().no_vec fi

{versions that will fail is P not in span of basis}
set Vector([KType] basis,KTypePol P)=vec:requisition(vector(basis,P))
set Vector([Param] basis,ParamPol P)=vec:requisition(vector(basis,P))

{principal data structure for KNilpotent calculation}
set_type
[ KNilpotentData =
  ( RealForm real_form
  , int N              {K_norm bound}
  , ratvec v   {for use in K_norm in reductive case, default is rho_check(G)}
  , [ComplexNilpotent] complex_orbits
     {complex nilpotent orbits, sorted by increasing dimension}
  {,bool precompute_real_orbits
    {flag to use the Vogan algorithm to compute real orbits}
    DISABLED}
  , bool  include_Q_and_P_X_matrices
  , [RealNilpotent] real_orbits {real forms of each complex orbit}
  , [[(KType,KTypePol)]] pairs
    {one pair for each real orbit O
    O-> an array [(mu_L,P)] of pairs L\cap K-type mu_L and KTypePol:Phi(mu_L)
    where P=Phi(mu_L)}
  , [([KType],[KType],mat) ] T_matrices
    {one matrix for each real orbit O
     O->(K_basis,L_cap_K_basis,T)
     K_basis: K_types (for G) coming from O (#=m)
     L_cap_K_basis: K_type for L coming from O (#=n)
     T=mxn matrix given the operator Phi in these bases}
  , [([KType],[KType],mat)] Y_matrices
    {one matrix for each complex orbit OC
     OC->(K_basis,L_cap_K_basis,Y)
     K_basis,L_cap_K_basis: coming from all
      (real forms of complex) orbits of smaller dimension
     Y is the matrix giving the image of Phi in these bases}
  , [([KType],[KType],mat,mat)] Q_and_P_X_matrices
    {one pair of matrices for each complex orbit OC
     (K_basis,L_cap_K_basis,Q,P_X):
     K_basis and L_cap_K_basis: closure of OC,
      i.e. all real forms of OC and all orbits of smaller dimension
     Q=matrix of T/T\cap Y
     P_X=projector_mod_image(Y)=projection to X=W/Y}
  )
]

set root_datum(KNilpotentData d)=RootDatum: d.real_form.root_datum
set Q_matrices(KNilpotentData d)=[mat]:for (,,Q,) in d.Q_and_P_X_matrices do Q od
set P_X_matrices(KNilpotentData d)=[mat]:for (,,,P_X) in d.Q_and_P_X_matrices do P_X od

{----- real and complex nilpotent orbits in setting of KNilpotentData -------}

{complex_orbit@RealNilpotent->ComplexNilpotent: see nilpotent_orbits.at}

set complex_orbit_number(KNilpotentData d,ComplexNilpotent OC)=int:find(d.complex_orbits,OC)
set real_orbit_number(KNilpotentData d,RealNilpotent O)=int:find(d.real_orbits,O)
set complex_orbit_number(KNilpotentData d,RealNilpotent O) =int:complex_orbit_number(d,complex_orbit(O))
set complex_orbit_number(KNilpotentData d,int real_orbit) =int:complex_orbit_number(d,d.real_orbits[real_orbit])

{all real forms of given complex orbit}
set real_forms_of(KNilpotentData d,int complex_orbit)=[int]:
##for O@i in d.real_orbits do if
complex_orbit(O)=d.complex_orbits[complex_orbit] then [i] else [] fi od

{given a real orbit O, all of the other real forms of complexification OC of O}
set other_real_forms(KNilpotentData d,int real_orbit)=[int]:real_forms_of(d,complex_orbit_number(d,real_orbit))

{"closure" means: smaller dimension}
{complex nilpotent -> orbit itself and all complex nilpotents of smaller dimension}
set closure(KNilpotentData d,int complex_nilpotent)=[int]:
let dim=dim_nilpotent(d.complex_orbits[complex_nilpotent]) in
##for  OC@i in d.complex_orbits do if dim_nilpotent(OC)<dim then [i] else [] fi od##[complex_nilpotent]

{all real forms of given complex orbit, and all real
forms of smaller orbits}
set closure_real(KNilpotentData d,int complex_orbit)=[int]:
##for a in closure(d,complex_orbit) do real_forms_of(d,a) od

{real orbit and all real orbits of smaller dimension}
set closure_of_real_orbit(KNilpotentData d,int real_nilpotent)=[int]:
let complex_nilpotent=complex_orbit_number(d,real_nilpotent) then
dim=dim_nilpotent(d.complex_orbits[complex_nilpotent]) in
##for  OC@i in d.complex_orbits do if dim_nilpotent(OC)<dim then real_forms_of(d,i) else [] fi od##[real_nilpotent]

{real orbit -> all orbits of strictly smaller dimension}
set smaller_orbits(KNilpotentData d,int real_orbit)=[int]:
let O=d.real_orbits[real_orbit] then
dim_O=dimension(O) in
##for o@i in d.real_orbits do if dimension(o)<dim_O then [i] else [] fi od

{---------------bases of K-types and L_cap_K-types----------}

{these sets of K-types serve as basis of matrix operations}

{K-types occuring in given KTypePol}
set K_basis = monomials@KTypePol

{K-types occuring in given KTypePols}
set K_basis = monomials@[KTypePol]

{all K-types coming from given KNilpotentData}
set K_basis (KNilpotentData data, int real_orbit) = [KType]:
if #data.pairs=0 or #data.pairs[real_orbit]=0 then [] else
K_basis(for (,P) in data.pairs[real_orbit] do P od) fi

{K-Types coming from given orbits}
set K_basis(KNilpotentData data, [int] real_orbits)=[KType]:
if #data.pairs=0 or #real_orbits=0 then [] else
K_basis(##for i in real_orbits do
for (,P) in data.pairs[i] do P od od)
fi

{K-types coming from all real forms of complex orbit,
 and all real forms of smaller orbits}
set K_basis_closure(KNilpotentData data,int complex_orbit)=[KType]:
K_basis(data,closure_real(data,complex_orbit))

{K-types coming from real orbit, and all real orbits of smaller dimension}
set K_basis_closure_of_real_orbit(KNilpotentData data,int real_orbit)=[KType]:
K_basis(data,closure_of_real_orbit(data,real_orbit))

{K-types from all orbits
this should be the same as K_parameter_norm_upto(G,data.N)
}
set K_basis(KNilpotentData data)=[KType]:
K_basis(data, #(#data.real_orbits))

{given a matrix in K_basis, convert to K_basis_new
 requirement: K_basis is a subset of K_basis_new (unless n_columns(M)=0)}
set change_basis([KType] K_basis, [KType] K_basis_new,mat M)=mat:
if n_columns(M)=0 then null(#K_basis_new,0) else
for col in M do let v=vector(K_basis_new, expand(col,K_basis,K_basis[0].real_form)) in
assert(any(v),"change_basis failed");
requisition(v) od fi

{L\cap K-types coming from given orbit}
set L_cap_K_basis(KNilpotentData d,int real_orbit)=[KType]:
for (mu_L,) in d.pairs[real_orbit] do mu_L od

{L\cap K-types coming from given orbits}
set L_cap_K_basis(KNilpotentData d,[int] real_orbits)=[KType]:
if #d.pairs=0 or #real_orbits=0 then [] else
##for i in real_orbits do L_cap_K_basis(d,i) od  fi

set L_cap_K_basis(KNilpotentData d)=[KType]:L_cap_K_basis(d,#(#d.real_orbits))
set L_cap_K_basis_opp(KNilpotentData d)=[KType]:L_cap_K_basis(d,reverse(#(#d.real_orbits)))

{matrix constructed from list of pairs [(KType,KTypePol)]
 defining a map from L\cap K-types to K-types
 each KTypes if for L\cap K, each KTypePol is for G
rows <-> K-types (for G)
columns <-> L\cap K-types
each column gives Phi(L\cap K-type) as a sum of K-types
}
set T_matrix([ (KType,KTypePol) ] pairs)=([KType],[KType],mat):
if #pairs=0 then ([KType]:[],[KType]:[], null(0,0)) else
let K_basis=K_basis(for (,P) in pairs do P od) then
L_cap_K_basis=for (mu_L,) in pairs do mu_L od then
rv=null(#K_basis,#L_cap_K_basis) in
for (mu_L,P) in pairs do
   let col=vector(K_basis,P) in
   assert(any(col),"could not construct column of matrix");
   rv[find(L_cap_K_basis,mu_L)]:=requisition(col) od ;
(K_basis,L_cap_K_basis,rv) fi

set merge_matrices([ ([KType],[KType],mat) ] matrices)=([KType],[KType],mat):
if #matrices=0 then ([],[],null(0,0)) else
let K_basis=sort_u(##for (mu,,) in matrices do mu od) then
L_cap_K_basis=##for (,mu_L,) in matrices do mu_L od in
(K_basis,L_cap_K_basis,merge_matrices(for (kbasis,,T) in matrices do  change_basis(kbasis,K_basis,T) od)) fi

set merge_T_matrices(KNilpotentData d,[int] real_orbits)=([KType],[KType],mat):
merge_matrices(for i in real_orbits do d.T_matrices[i] od)

set merge_P_X_matrices(KNilpotentData d,[int] real_orbits)=([KType],[KType],mat):
merge_matrices(for i in real_orbits do
let (K_basis,L_cap_K_basis,)=d.T_matrices[i] in (K_basis,L_cap_K_basis, d.P_X_matrices[i]) od)

{(K_basis,L_cap_K_basis,Y) all for smaller orbits,not including P_X}
set compute_Y_matrix(KNilpotentData d,int complex_orbit)=([KType],[KType],mat):
let OC=d.complex_orbits[complex_orbit] then
dim_OC=dim_nilpotent(OC) then
smaller_orbits=##for O@i in d.real_orbits do
  if dimension(O)<dim_OC then [i] else [] fi od in
merge_T_matrices(d,smaller_orbits)

{K_basis_closure=K_basis_closure(d,complex_orbit) then
L_cap_K_basis_closure=L_cap_K_basis_closure(d,complex_orbit) then
Y=change_basis(K_basis,K_basis_closure,Y0) in
(K_basis_closure,L_cap_K_basis_closure,Y,projector_mod_image(Y)) }

{--------- utilities involving nilradicals --------------}

{given a theta_x-stable set of roots R, return subset of R
consisting of each imaginary root alpha\in R, and one of each pair
alpha,theta(alpha)
if R isn't theta-stable this will fail with an error}
set theta_orbit_reps(KGBElt x, [vec] roots)=[vec]:
let theta=involution(x) then
rv=[] in
while #roots>0 do
 let alpha=roots[0] in
 rv#:=alpha;
 roots:=delete(roots,0);
  if theta*alpha != alpha then
   let  index=find(roots,theta*alpha) in if (index=-1) then error("set of roots is not theta-stable") else
      roots:=delete(roots, find(roots,theta*alpha))  fi fi od;rv

{versions of commands in induction.at, but here involving the 1-eigenspace
\mathfrak s[1] of \mathfrak s
}

{roots of H in s[1]
 s = -1 eigenspace of theta_x
 s[1] = 1 H-eigenspace of H on s
}
set s_one_roots(RealNilpotent O,KGBElt x)=[vec]:
assert(O.H*x.involution = O.H,"H is not theta-fixed");
##for alpha in nilrad_roots(parabolic_by_cwt(O.H,O.x)) do
if alpha*O.H=1 and (is_noncompact_imaginary(x)(alpha) or is_complex(x)(alpha))
then [alpha] else [] fi od

{restriction of s_one_roots to H^{theta_x}
 each pair (alpha,theta(alpha)) contributes
 a single root restriction(alpha)=restriction(theta(alpha)),
 corresponding to the single vector X_\alpha-\theta(X_\alpha) in s[1]
 characters of H^theta are elements of X^*/(1-theta)X^*
}
set s_one_roots_restricted(RealNilpotent O,KGBElt x)=[vec]:
let roots=s_one_roots(O,x) in roots:=theta_orbit_reps(x,roots)

{only want the non-compact imaginary roots after restriction
these are the nci roots, and one of each pair of complex roots
}
set s_one_nc_cx_restricted_roots(RealNilpotent O,KGBElt x)=[vec]:
let rv=[] then
(H,,)=O then
roots=s_one_roots(O,x) in
for alpha in roots do
 if is_noncompact_imaginary(alpha,x) then rv#:=alpha
 elif is_complex(alpha,x) then
  if find(rv,involution(x)*alpha)=-1 then rv#:=alpha fi fi od;rv

{all non-empty subsets of the set of restrictions of roots of s[1] to H^{theta_x}
 see KNilpotent paper, Corollary 7.3(6)}
set subsets_of_s_one_nc_cx_restricted_roots(RealNilpotent O,KGBElt x)=[[vec]]:
let roots=s_one_nc_cx_restricted_roots(O,x) in
delete(generate_all_subsets(roots),0) {don't want empty subset}

{H is in \mathfrak h, not \mathfrak h^*}
set rho_shifts(RealNilpotent O,KGBElt x_G)=[(vec,int)]:
{only use dominant version of O}
let O_dom=dominant(O) then
S=subsets_of_s_one_nc_cx_restricted_roots(O_dom,x_G) in
[(vec:null(rank(O.root_datum)),0)]##
for A in S do (sum(A),#A) od

{given Q theta-stable, and the K-type formula P for a K-type mu_L of L=Levi(Q),
 return the K-type formula for mu_L twisted by -2rho(u\cap s)
 algorithm: apply  twist_by_minus_2rho_u_cap_s to P (see induction.at)
 term by term,  each individual term in the result may
 be a non-standard parameter for L, apply standardize to each term,
 to give a sum of STFL parameters for L:
 this is the K-type formula for a single L\cap K-type
 STFL: standard final limit parameter
}
set twist_by_minus_2rho_u_cap_s(Parabolic P,KTypePol K_type_formula)=KTypePol:
let K_type_formula_twisted=null_K_module(K_type_formula) then
 L=real_form(K_type_formula) in
 for c@p in K_type_formula
 do K_type_formula_twisted +:=
   c*standardize(twist_by_minus_2rho_u_cap_s(P,p.param)).K_type_pol
 od;
{debugging}
{ let b=branch_std(K_type_formula,100) then
 b_twisted=branch_std(K_type_formula_twisted,100) then
 b=branch_std(K_type_formula,100) in
 assert(#b=1,"More than one K-type");
 assert(#b_twisted=1,"More than one K-type after twist");
 if kn_verbose then
 if #b >1 then prints("WARNING: more than one K-type (before twist)");
 for p in monomials(b) do prints(highest_weight(LKT(p),KGB(L,0))) od fi;
{ prints(new_line,"K_type_formula:", new_line, "highest weight is:", highest_weight(LKT(first_param(b)),KGB(L,0)));}
 if #b_twisted >1 then prints("WARNING: more than one K-type after twist");
 for p in monomials(b_twisted) do prints(highest_weight(LKT(p),KGB(L,0))) od fi
 {prints(new_line,"K_type_formula after twist:", new_line, "highest weight is:", highest_weight(LKT(first_param(b_twisted)),KGB(L,0)))} fi;
assert(#branch_std(K_type_formula_twisted,20)<=1,"error in twist_by_minus_2rho_u_cap_s");
}
{end debugging}
K_type_formula_twisted

{ replace K-type mu with mu\otimes (-2\rho(u\cap s))}
set twist_by_minus_2rho_u_cap_s(Parabolic P,KType mu)=KType:
  LKT(first_K_type(twist_by_minus_2rho_u_cap_s(P,K_type_formula(mu))))

{---------------------- Extension Algorithm ----------------------}

{this implements the algorithm of Proposition 7.3(6) of Vogan's notes
Phi(orbit,kgb_number_L,lambda_L):
O is a RealNilpotent for G
L=Levi(O)
mu_L=(KGB(L,kgb_number_L),lambda_L) is an L\cap K-type
 Phi is the function \tilde\mathcal E of the Proposition
}

set Phi (RealNilpotent O,int kgb_number_L, ratvec lambda_L) = KTypePol:
let G=real_form(O.x) then
P=parabolic_of_orbit(O) {Note: not the parabolic defined by -O.H} then
L=Levi(P) then
  p_L_0=K_type_lambda(KGB(L,kgb_number_L),lambda_L) in
   {debugging}
   {
    prints(new_line,"Computing Phi:", new_line, "O=", O, new_line,
   " L=", L,new_line, "x_L=", kgb_number_L, " lambda_L=", lambda_L, new_line,"p_L_0:", p_L_0);
   }
   {/debugging}
assert(not is_zero(p_L_0),"p_L_0 is zero");
assert(is_standard(p_L_0),"p_L_0 is not standard");
let
K_type_formula=K_type_formula(p_L_0) then
K_type_formula_twisted=twist_by_minus_2rho_u_cap_s(P,K_type_formula) then
  {debugging}
  {
  b=branch_std(K_type_formula,100) then
  ()=assert(#b<=1,"More than one K-type (before twist)") then
  ()=if kn_verbose then let b=branch_std(K_type_formula,100) in
  prints(new_line,"testing K_type_formula:", new_line, "highest weight is:", highest_weight(LKT(first_param(b)),KGB(L,0)));
  if #b >1 then prints("WARNING: more than one K-type");
  for p in monomials(b) do prints(highest_weight(LKT(p),KGB(L,0))) od fi fi then
  ()=if kn_verbose then let b=branch_std(K_type_formula_twisted,100) in
  prints(new_line,"testing twisted K_type_formula:", new_line, "highest weight is:", highest_weight(LKT(first_param(b)),KGB(L,0)));
  if #b >1 then prints("WARNING: more than one K-type");
  for p in monomials(b) do prints(highest_weight(LKT(p),KGB(L,0))) od fi fi then
  }
  {/debugging}
result=null_K_module(G) in
  {debugging}
  {
    prints(
    new_line,"p_L_0:",p_L_0,
    new_line,"K_type_formula on L:", K_type_formula,
    new_line, "K_type_formula on L twisted:",K_type_formula_twisted)
  }
  {/debugging}
for c@p_L in K_type_formula_twisted do
if kn_verbose then prints(new_line,"term in (twisted) K-type formula:",new_line, p_L) fi;
  let rhoshifts=rho_shifts(O,embed_KGB(x(p_L),G)) in
  for (shift,j)@k in rhoshifts do
   let q=K_type(x(p_L),lambda_rho(p_L)+shift) {shifted K-type on L}{NOTE: +shift not -shift} then
   r_2=theta_induce_standard(param(q),G).K_type_pol
       {theta-induce up to G,restrict to K}
in  if kn_verbose then prints(new_line, "shift: ", shift, new_line,"inducing: ", q, new_line,"induced term: ", r_2, " c=", c , " j=", j," constant=", (-1)^j*c) fi;
   result+:=minus_1^j*c*r_2
  od {for (shift,j)}
od {for c@p_L};
   if kn_verbose then prints(new_line,"Result:"){;kshow(result)} fi;
result {return value}

{variants of Phi}
set Phi(RealNilpotent O,Param p_L)=KTypePol:Phi(O,#x(p_L),lambda(p_L))
set Phi(RealNilpotent O,KType mu_L)=KTypePol:Phi(O,#x(mu_L),lambda(mu_L))

set Phi(RealNilpotent O,KTypePol mu_L)=KTypePol:
   sum(O.real_form, for c@p in mu_L do c*Phi(O,p) od)

{ functions on real orbit as K-representation }
set functions_on_real_orbit(RealNilpotent O_in)=KTypePol:
let O=dominant(O_in) {seems to matter} then
p_L=K_type_pol(trivial(O.Levi_of_orbit)) {in SU(2,1) trivial(G)*0 is not final}  in
Phi(O,p_L)

{given KTypePols list=[Q_1,...,Q_n] and KTypePol:P test if
P=\sum a_i Q_i with a_i\in Z
return true/false, and [KTypePol] R,[int] a so that
P=sum a[i]*R[i]
}
set in_span([KTypePol] list,KTypePol P)=([KType],mat,vec,bool):
if #list=0 then ([],null(0,0),null(0),false) else
let basis=monomials(list) {list of distinct Params} then
M=mat:for Q in list do let v=vector(basis,Q) in
assert(any(v),"failure in in_span");requisition(v)  od then
T=vector(basis,P) in
{assert(any(T),"can't find vector at all");}
if not any(T) then (basis,M,null(0),false) else
let T=requisition(T) then
inlattice=in_lattice(M,T) in (basis,M,T,inlattice) fi fi

{convenient to define in_span([[KTypePol]] list,KTypePol P)=
in_span( flatten the list,P)
}
set in_span([[KTypePol]] list_of_lists,KTypePol P)=([KType],mat,vec,bool):
let list=[KTypePol]:[] in
let ()=for new_list in list_of_lists do list##:=new_list od in
in_span(list,P)

{returns all (?) [(mu_L,extension)], such that all terms in extension have K_norm <= N }
set Phi_upto(RealNilpotent O,int N, ratvec v)=[(KType,KTypePol)]:
let N_L=2*N {heuristic: 2 seems to be big enough } then
L=O.Levi_of_orbit then
L_cap_K_types=K_parameters_norm_upto(L,O.real_form,N_L,v) in
##for mu_L in L_cap_K_types do
 let extension=Phi(O,mu_L) in
 if #extension>0 and K_norm(extension)<=N then [(mu_L,extension)] else [] fi od

set Phi_upto(KGBElt x_K,[RealNilpotent] orbits, int N, ratvec v)=[(RealNilpotent,[(KType,KTypePol)])]:
for O in orbits do (O,Phi_upto(O,N,v)) od

{initialize KNilpotentData for G, with given bound, optional ratvec, optional
"compute" flag to compute nilpotent orbits using Vogan's algorithm}
set initialize_KNilpotent(RealForm G, int N,ratvec v, bool include_Q_and_P_X_matrices)=KNilpotentData:
let complex_orbits= sort_by_dimension
(
##for O in nilpotent_orbits(G.root_datum)
{only keep a complex orbit if H*delta=H}
  do if O.H{_of_triple}*G.distinguished_involution=O.H{_of_triple} then [O] else [] fi od
) then
real_orbits=real_nilpotent_orbits(G) then
default_Q_and_P_X_matrices=for i:#complex_orbits do ([KType]:[],[KType]:[],null(0,0),null(0,0)) od then
default_T_matrices=for i:#real_orbits do ([KType]:[],[KType]:[],null(0,0)) od then
default_Y_matrices=for i:#complex_orbits do ([KType]:[],[KType]:[],null(0,0)) od then
default_pairs=for i:#real_orbits do [(KType,KTypePol)]:[] od in
(G,
 N,  {int}
 v,   {ratvec, default=rho_check(G)}
 complex_orbits,   {[ComplexNilpotent]}
{ compute_real_orbits,  {bool} disabled}
 include_Q_and_P_X_matrices, {bool}
 real_orbits,
 default_pairs,      {initialized: [[]]}
 default_T_matrices, {initialized: [([],[],null(0,0))]}
 default_Y_matrices, {initialized: [([],[],null(0,0))]}
 default_Q_and_P_X_matrices {initialized: [([],[],null(0,0),null(0,0))]}
)

set initialize_KNilpotent(RealForm G, int N,bool compute)=KNilpotentData:initialize_KNilpotent(G,N,rho_check(G),compute)
set initialize_KNilpotent(RealForm G, int N)=KNilpotentData:initialize_KNilpotent(G,N,rho_check(G),true)
set initialize_KNilpotent(RealForm G, ratvec v, int N)=KNilpotentData:initialize_KNilpotent(G,N,v,true)

{crude guess of possible real orbits, given complex orbits
 the actual real orbits are a subset of these
 this command is not needed if using Vogan algorithm to compute real orbits
}
{
set potential_real_nilpotent_orbits(RealForm G,[ComplexNilpotent] complex_orbits)=[RealNilpotent]:
let delta=distinguished_involution(G) in
##for (rd,H)@i in complex_orbits
 do
  if H*delta=H {H must be ^delta-fixed to give a real orbit} then
   let roots_of_Levi=simple_roots_from_coweight(rd,H) then
   P_complex= (rd,roots_of_Levi) then
   theta_stable_parabolics=theta_stable_parabolics(G,P_complex) in
   for P in theta_stable_parabolics do RealNilpotent:(H,x_min(P),[]) od
   else []
  fi
 od

set potential_real_nilpotent_orbits(RealForm G)=[RealNilpotent]:
potential_real_nilpotent_orbits(G,complex_nilpotent_orbits(G))
}
{are these necessary? there must be a more elegant way to do this}
set update_pairs([[(KType,KTypePol)]] pairs,int j,[(KType,KTypePol)] new_pairs)=[[(KType,KTypePol)]]:
for i:#pairs do if i=j then new_pairs else pairs[i] fi od

set update_T_matrices([([KType],[KType],mat) ] T_matrices,int j, ([KType],[KType],mat) new_matrices)=[([KType],[KType],mat) ]:
for i:#T_matrices do if i=j then new_matrices else T_matrices[i] fi od

set update_Y_matrices([([KType],[KType],mat) ] Y_matrices,int j, ([KType],[KType],mat) new_matrices)=[([KType],[KType],mat) ]:
for i:#Y_matrices do if i=j then new_matrices else Y_matrices[i] fi od

set update_Q_and_P_X_matrices([([KType],[KType],mat,mat) ] Q_and_P_X__matrices,int j, ([KType],[KType],mat,mat) new_matrices)=[([KType],[KType],mat,mat) ]:
for i:#Q_and_P_X__matrices do if i=j then new_matrices else Q_and_P_X__matrices[i] fi od

{assume things computed up to complex orbit i-1
(not including Q and P_X)
fill data up to complex orbit i
}
set fill_one_step(KNilpotentData d, int complex_orbit)={KNilpotentData:}
let G=d.real_form then
OC=d.complex_orbits[complex_orbit] then
Y_matrix=compute_Y_matrix(d,complex_orbit) then
(K_basis,L_cap_K_basis,Y)=Y_matrix then
real_forms_of_OC=real_nilpotent_orbits(d.real_orbits,OC) in
d.Y_matrices:=(update_Y_matrices(d.Y_matrices,complex_orbit,Y_matrix));
if kn_verbose then for O in real_forms_of_OC do prints("doing orbit ",O) od fi;
for O in real_forms_of_OC do let
   pairs=Phi_upto(O,d.N,d.v) then
   T_matrix=T_matrix(pairs) then
   (K_basis_T,L_cap_K_basis_T,T)=T_matrix then
   real_orbit_number=find(d.real_orbits,O) in
   d.pairs:=update_pairs(d.pairs,real_orbit_number,pairs);
   d.T_matrices:=update_T_matrices(d.T_matrices,real_orbit_number,T_matrix)
od {for O in real_forms_of_OC};
{now fill in Q and P_X}
if d.include_Q_and_P_X_matrices=true then
 prints(new_line,"Computing Q and P_X");
 let (K_basis_T,L_cap_K_basis_T,T0)=merge_T_matrices(d,closure_real(d,complex_orbit)) then
 K_basis=K_basis_closure(d,complex_orbit) then
{()=show(d) then}
 {K_basis: from closure of complex orbit}
 (K_basis_Y,L_cap_K_basis_Y,Y0)=d.Y_matrices[complex_orbit] then
 {K_basis_Y: from orbits of smaller dimension}
 Y=change_basis(K_basis_Y,K_basis,Y0) then
 T=change_basis(K_basis_T,K_basis,T0) then
 T_cap_Y=intersection(T,Y) then
 P_X=mod_image_projector(T_cap_Y) then
 Q=P_X*T in
 d.Q_and_P_X_matrices:=update_Q_and_P_X_matrices(d.Q_and_P_X_matrices,complex_orbit,(K_basis_T,L_cap_K_basis_T,Q,P_X))
fi;
d

{fill orbits 0,1,...,n-1}
set fill(KNilpotentData d,int n)=KNilpotentData:
for i:n+1 do
  prints("filling data for complex orbit #",i);
  d:=fill_one_step(d,i) od;d

{completely fill KNilpotentData, inductively starting at orbit 0}
set fill(KNilpotentData d)=KNilpotentData:
fill(d,#d.complex_orbits-1)

{default failed values}
{could use unions instead}
set failed=       ([KType]:[],[KType]:[],         null(0,0),null(0),null(0),false)
set failed_av_ann=([KType]:[],[KType]:[],-1,      null(0,0),null(0),null(0),false)
set failed_av=    ([KType]:[],[KType]:[],[int]:[],null(0,0),null(0),null(0),false)

{find P in terms coming from given list of real orbits}
{returns (failed or):
 K_basis from list of orbits
 vector w in basis of K-types (expressing given P in this basis)
 L_cap_K basis from list of orbits
 matrix T of map from L\cap K-types to K-types
 vector v in basis of L\cap K-types
 satisfying Tv=w
 bool indicating success
}
set search(KNilpotentData d,[int] real_orbits,KTypePol P)=([KType],[KType],mat,vec,vec,bool):
let (K_basis,LK_basis,T)=merge_T_matrices(d,real_orbits) then
w0=vector(K_basis,P) then
()=if not any(w0) then  return(failed) fi then
w=requisition(w0) then
v0=solve(T,w) then
()=if not any(v0) then return(failed) fi then
v=requisition(v0) in
(K_basis,LK_basis,T,v,w,true)

{same as previous, where P=Phi(O,mu_L)}
set search(KNilpotentData d,int real_orbit,[int] real_orbits,KType mu_L)=([KType],[KType],mat,vec,vec,bool):
let O=d.real_orbits[real_orbit] in
search(d,real_orbits,Phi(O,parameter(mu_L)))

{associated variety of annihlator of P, this is a single complex orbit}
{computed using all smaller orbits, not
 algorithm:
 run over complex orbits OC, write P in K-type basis from OC (if possible)
 solve Tv=w; if success return OC
return values as in search (above), plus int i (orbit number)
}

{-------------------Associated variety  ------------------}

{computing associated varieties inductively by
taking filtration/associated graded at each step

given a real orbit O and a KTypePol P,
 where P does not come from smaller orbits
Q: matrix of Phi modulo image from smaller orbits
so solve Qv=w where w=P in appropriate basis
}

{given complex orbit OC,
 w=vector of ParamPol P in basis of K-types from OC
 solve Qv=w if possible
return values as in search (above)
returns (failed or):
 [KType]: K_basis from list of orbits
 [KType]: L_cap_K basis from list of orbits
 mat: matrix Q of map from L\cap K-types to K-types
 vec: vector v in basis of L\cap K-types
 vec: vector w expressing P in basis of K-types
 v is solution to: Qv=w (should be unique if it exists)
 bool: success
}
set search(KNilpotentData d,int complex_orbit,KTypePol P)=([KType],[KType],mat,vec,vec,bool):
{let K_basis=K_basis(d,real_forms_of(d,complex_orbit)) then}
let K_basis=K_basis_closure(d,complex_orbit) then
L_cap_K_basis=L_cap_K_basis(d,real_forms_of(d,complex_orbit)) then
Y=d.Y_matrices[complex_orbit] then
Q=d.Q_matrices[complex_orbit] in
if Q=null(0,0) then
prints("Q matrix is 0. Need to fill data further?");return(failed)
else let
P_X=
d.P_X_matrices[complex_orbit] then
w0=vector(K_basis,P) in
 if not any(w0) then return(failed) fi;
let w=requisition(w0) then v0=solve(Q,P_X*w) in
 if not any(v0) then return(failed) fi;
let v=requisition(v0) in (K_basis,L_cap_K_basis,Q,v,w,true) fi

{same as previous where the complex orbit OC isn't specified, return values
include an int giving OC}
set av_ann(KNilpotentData d,KTypePol P)=([KType],[KType],int,mat,vec,vec,bool):
for OC@i in d.complex_orbits do
 let (K_basis,L_cap_K_basis,T,v,w,success)=search(d,i,P)  in
 if success then
   if kn_verbose then prints("AV(Ann(p)):");prints("Complex orbit #",i,": H=", OC.H{_of_triple}) fi;
      return(K_basis,L_cap_K_basis,i,T,v,w,success)
 fi
od;
failed_av_ann

{associated variety of annihlator of Param p
apply the previous to K-types of p, i.e. character_formula(p)*0}
set av_ann(KNilpotentData d,Param p)=([KType],[KType],int,mat,vec,vec,bool):
av_ann(d,character_formula(p).K_type_pol)

{given v=[a_1,a_2,...,a_n]
return diag[0^{a+1},...,1^{a_i},...0^{a_n}]
}
set projector(vec v, int i)=
diagonal(##for j:i do null(v[j]) od ##
ones(v[i])##
##for j:#v-i-1 from i+1 do null(v[j]) od)

{compute the associated variety given av_ann
 algorithm: given O (complex) with real forms O_0,...,O_n
 Q,P_X for O
 solve Qv=P_X(w)
 Q has a large kernel, but anything in the kernel has to do with smaller orbits
 write v=[v_0,v_1,..,v_k,v_{k+1},..,v_{k+n}]
 where [v_0,...,v_{k-1}] from smaller orbits
 [v_k,...,v_{k+n}] on given orbit
 the associated variety is those O_i such that v_{k_i}\ne 0
}
set av_from_av_ann(KNilpotentData d,int complex_orbit,KTypePol P)=vec:
let K_basis=K_basis_closure(d,complex_orbit) then
w0=vector(K_basis,P) in
if not any(w0) then return(null(0))  else
let w=requisition(w0) then
(,,Q,P_X)=d.Q_and_P_X_matrices[complex_orbit] in
if Q=null(0,0) then
 prints("Q matrix is 0. Need to fill data further?"); return(null(0)) else let
v=requisition(solve(Q,P_X*w)) then
real_orbits=real_forms_of(d,complex_orbit) then
dim_subspaces=for i in closure_real(d,complex_orbit) do let (,,T)=d.T_matrices[i] in n_columns(T) od then
rv=##for i in real_orbits {only look at real forms of given orbit} do
 let proj=projector(dim_subspaces,i) in if !=(proj*v) then [i] else [] fi od in
if kn_verbose then prints("AV(p): ", rv) fi; rv fi fi

set av_from_av_ann(KNilpotentData d,int complex_orbit,Param p)=
av_from_av_ann(d,complex_orbit,character_formula(p).K_type_pol)

set av(KNilpotentData d, KTypePol P)=vec:
let (,,j,,,,)=av_ann(d,P) in
if j=-1 then null(0) else av_from_av_ann(d,j,P) fi

{compute associated variety of irreducible J(p)}
set av(KNilpotentData d, Param p)=
av(d,character_formula(p).K_type_pol)

set av(KNilpotentData d,[Param] params)=[(Param,vec)]:
for p@i in params do let av=av(d,p) in (p,av) od

{-----------elementary (non Q) versions --------------------}

{this section of commands should not be needed, but is included
for testing purposes
solving Tv=w directly (not using quotients)}

set av_ann_elem_long(KNilpotentData d,KTypePol P)=([KType],[KType],int,mat,vec,vec,bool):
for OC@i in d.complex_orbits do
 let real_orbits=closure_real(d,i) then
 (K_basis,L_cap_K_basis,T,v,w,success)=search(d,real_orbits,P) in
 if success then
  if kn_verbose then prints("AV(Ann(p)):");prints("Complex orbit #",i,": H=", OC.H{_of_triple}) fi;
  return(K_basis,L_cap_K_basis,i,T,v,w,success)
 fi
od;
failed_av_ann  {if not found}

set av_ann_elem_long(KNilpotentData d,Param p)=([KType],[KType],int,mat,vec,vec,bool):
av_ann_elem_long(d,character_formula(p).K_type_pol)

{associated variety of P, assuming associatevariety OC of ann(P) is known}
{algorithm: run over subsets of real forms of OC
 and try to solve Tv=w
}
set av_from_av_ann_elem_long(KNilpotentData d,int complex_orbit,KTypePol P)=([KType],[KType],[int],mat,vec,vec,bool):
let OC=d.complex_orbits[complex_orbit] then
real_orbits=real_forms_of(d,complex_orbit) then
S=delete(generate_all_subsets(real_orbits),0) {ignore empty subset}  then
smaller_orbits=smaller_orbits(d,real_orbits[0]) in
for A in S do let
 (K_basis,L_cap_K_basis,T,v,w,success)=search(d,A##smaller_orbits,P) in
 if success then
{ let  ()=prints("AV(p)");for i in A do prints("real orbit #",i,": ",d.real_orbits[i]) od in }return(K_basis,L_cap_K_basis,[int]:A,T,v,w,success) fi  od;
return(failed_av)

{associated variety of p, assuming OC=associated variety of ann(p) is known}
set av_from_av_ann_elem_long(KNilpotentData d,int complex_orbit,Param p)=([KType],[KType],[int],mat,vec,vec,bool):
av_from_av_ann_elem_long(d,complex_orbit,character_formula(p).K_type_pol)

{same as previous but computed av_ann_elem(P)}
set av_elem_long(KNilpotentData d,KTypePol P)=([KType],[KType],[int],mat,vec,vec,bool):
let (,,complex_orbit,,,,)=av_ann_elem_long(d,P) in
if complex_orbit=-1 then return([],[],[],null(0,0),null(0),null(0),false) else
av_from_av_ann_elem_long(d,complex_orbit,P) fi

{associated variety of p from scratch, by computing
OC=av_ann_elem(p) first}
set av_elem_long(KNilpotentData d,Param p)=([KType],[KType],[int],mat,vec,vec,bool):
av_elem_long(d,character_formula(p).K_type_pol)

{shorter versions}
set av_ann_elem(KNilpotentData d,KTypePol P)=int:let (,,av,,,,)=av_ann_elem_long(d,P) in av
set av_ann_elem(KNilpotentData d,Param p)=int:let (,,av,,,,)=av_ann_elem_long(d,p) in av
set av_from_av_ann_elem(KNilpotentData d,int complex_orbit,KTypePol P)=[int]:let (,,av,,,,)=av_from_av_ann_elem_long(d,complex_orbit,P) in av
set av_from_av_ann_elem(KNilpotentData d,int complex_orbit,Param p)=[int]:let (,,av,,,,)=av_from_av_ann_elem_long(d,complex_orbit,p) in av
set av_elem(KNilpotentData d,KTypePol P)=[int]:let (,,av,,,,)=av_elem_long(d,P) in av
set av_elem(KNilpotentData d,Param p)=[int]:let (,,av,,,,)=av_elem_long(d,p) in av

{real orbits as computed by KNilpotent algorithm
 should agree with result of Vogan's algorithm}
{disabled
set KNilpotent_real_orbits(RealForm G,int N, ratvec v)=
let d0=initialize_KNilpotent(G,N,v,false) then d=fill(d0) in d.real_orbits

set KNilpotent_real_orbits(RealForm G,int N)=KNilpotent_real_orbits(G,N,rho_check(G))
set KNilpotent_real_orbits(RealForm G)=KNilpotent_real_orbits(G,K_norm(trivial(G).K_type_pol)+3)  {in SU(2,1) need +3}
}

{----------some display functions--------------}

{useful for including "(a,b)" in a sequence of strings to be printed}
set stringify((int a,int b))="(" + a.to_string + "," + b.to_string + ")"

set display_string(RealNilpotent O)=string:
let (H,x,)=O then
(,k)=%x in "("+H.to_string+",x="+k.to_string+")"

{highly customized function for displaying KNilpotentData}
set show(KNilpotentData d)=void:
prints("G=",d.real_form,new_line,"N=",d.N,new_line,"v=",d.v);
prints("complex orbits:");
let header=["#","H", "dim"] then
values=
for OC@i in d.complex_orbits do
[i.to_string, OC.H{_of_triple}.to_string,dim_nilpotent(OC).to_string] od in
tabulate(header#values,"lll",2," ");
prints("matrices attached to complex orbits:");
let header=["#","Y","Q","P_X"] then
values=
{for i:#d.complex_orbits do}
for i:#(d.Y_matrices) do
let
(,,Y)=d.Y_matrices[i],
Q=d.Q_matrices[i],
P_X=d.P_X_matrices[i] in
[i.to_string,shape(Y).stringify,shape(Q).stringify,shape(P_X).stringify] od in
tabulate(header#values,"llll",1," ");
prints("real orbits:");
let header=["#","H","x","dim"] then
values=
for O@i in d.real_orbits do
[i.to_string,O.H.to_string,let (,n)=%O.x in n.to_string,dimension(O).to_string] od in
tabulate(header#values,"llll",1," ");
prints("matrices attached to real orbits:");
let header=["#","#pairs","T"] then
values=
for i:#d.real_orbits do
let shapeT= let (,,T)=d.T_matrices[i] in shape(T) then
pairs=#d.pairs[i] in
[i.to_string,pairs.to_string, shapeT.stringify] od in
tabulate(header#values,"lll",1," "){;
prints("Sum of ranks of Q matrices: ", sum(for Q in d.Q_matrices do rank(Q) od));
prints("#K_basis: ", #K_basis(d))}

{display K-types as highest weights for K_0}
set test_minimal_orbits(RealForm G, int N)=void:
prints("functions on minimal orbits in ",G);
for O in minimal_real_nilpotent_orbits(G) do
prints(new_line,"O=",O);
prints("K-types given as highest weights for K_0");
let f=functions_on_real_orbit(O) then
b=branch_std(f,N) in
assert(all(for c@p in b do split_as_int(c)>0 od),"negative coefficient");
print_branch_std_long(f,N) od

{print K-types as KHighestWeights}
set test_minimal_orbits(RealForm G, int N, void flag)=void:
prints("functions on minimal orbits in ",G);
for O in minimal_real_nilpotent_orbits(G) do
prints(new_line,"O=",O);
prints("K-types given as KHighestWeights");
let f=functions_on_real_orbit(O) then
b=branch_std(f,N) in
assert(all(for c@p in b do split_as_int(c)>0 od),"negative coefficient");
print_branch_std_long(f,N) od

{display K-types as highest weights for K_0}
set test_all_orbits(RealForm G, int N)=void:
prints("functions on all orbits in ",G);
for O in real_nilpotent_orbits(G) do
prints(new_line,"O=",O);
prints("K-types given as highest weights for K_0");
let f=functions_on_real_orbit(O) then
b=branch_std(f,N) in
assert(all(for c@p in b do split_as_int(c)>0 od),"negative coefficient");
print_branch_std_long(f,N) od

{print K-types as KHighestWeights}
set test_all_orbits(RealForm G, int N, void flag)=void:
prints("functions on all orbits in ",G);
for O in real_nilpotent_orbits(G) do
prints(new_line,"O=",O);
prints("K-types given as KHighestWeights");
let f=functions_on_real_orbit(O) then
b=branch_std(f,N) in
assert(all(for c@p in b do split_as_int(c)>0 od),"negative coefficient");
print_branch_std_long(f,N) od
