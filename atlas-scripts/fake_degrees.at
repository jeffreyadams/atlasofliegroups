<basic.at
<character_tables.at { for type |CharacterTable| }
<cells.at { for |cell_character@CharacterTable| }
<character_table_reps.at
<K_highest_weights.at {for all_parameters_gamma}
<springer_tables.at
<isomorphism_W.at {for permute_character}
{<springer_tables.at}{moved stuff requiring springer tables to cells_springer.at}
{this file does not require springer_tables.at}



{------------------- fake degrees ----------------}


set fake_degrees(CharacterTable ct,[WCell] cells)=[int]:
let rv=ct.fake_degrees in
if =#rv then rv:=for i:ct.n_classes do -1 od fi;
for cell in cells do
 let cell_char=ct.decompose(ct.cell_character(cell)) then
 special_char=special_character(ct,cell) then
 special_fake_degree=ct.degree(special_char) in
 for i:ct.n_classes do
  if cell_char[i]!=0 then
   if rv[i] !=-1 then assert(rv[i]=special_fake_degree,"new and old fake degrees don't agree") fi;
   rv[i]:=special_fake_degree
  fi
 od
od;rv

set fake_degrees(CharacterTable ct,[Param] parameters)=[int]:
let cells=##for b in blocks(parameters) do W_cells_of(b[0]) od
in fake_degrees(ct,cells) 

set update_fake_degrees(CharacterTable ct,[WCell] cells)=CharacterTable:
ct.fake_degrees:=fake_degrees(ct,cells);ct

set update_fake_degrees(RealForm G,CharacterTable ct)=CharacterTable:
ct.fake_degrees:=fake_degrees(ct,all_parameters_gamma(G,rho(G)));ct

set update_fake_degrees(RealForm G,SpringerTable st)=SpringerTable:
st.ct:=update_fake_degrees(G,st.ct);st

set update_fake_degrees(RealForm G,SpringerTable st,[WCell] cells)=SpringerTable:
st.ct:=update_fake_degrees(st.ct,cells);st

set update_fake_degrees(CharacterTable ct)=(RealForm->CharacterTable):(RealForm G): update_fake_degrees(G,ct)
set update_fake_degrees(SpringerTable st)=(RealForm->SpringerTable):(RealForm G): update_fake_degrees(G,st)

set show_degrees(CharacterTable ct)=void:
let fake_degree(int i)=if #ct.fake_degrees=0 then -1 else ct.fake_degrees[i] fi in
prints("a(i)=fake degree(character #i)",new_line,"b(i)=degree(character #i)",new_line,"*: special",new_line);
tabulate(
["i","dim","a(i)","b(i)"]#
for i:ct.n_classes do
{don't know special_representation_star without springer table}
[i.to_string,ct.dimension(i).to_string{+ct.special_representation_star(i)},ct.fake_degrees[i].to_string,ct.degree(i).to_string] od)
