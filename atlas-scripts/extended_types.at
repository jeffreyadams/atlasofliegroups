<basic.at
<extended_misc.at { for the type |ExtParam| }

{
  types of extended parameters:
  1C+,1C-,1i1,1i2f,1i2s,1ic,1r1f,1r1s,1r2,1rn
  2C+,2C-,2Ci,2Cr,2i11,2i12,2i22,2r22,2r21,2r11,2rn,2rc
  3C+,3C-,3Ci,3Cr,3i,3r,3rn,3ic

  In this module no effort is done to handle cases more efficiently by numeric
  encoding, so types are simply short strings. Similarly we use |status_text|
  from basic.at rather than the numeric codes from built-in |status|, for
  readability.
}

{ ext_length(rd,delta,j)=1,2,3 }
set ext_length (RootDatum rd,mat delta, int j) = int:
  let alpha=root(rd,j) then beta=delta*alpha in
  if alpha=beta then 1 elif coroot(rd,j)*beta=0 then 2 else 3 fi

{ E=extended parameter, ext_length(j,E) = ext_length(ic(E),delta(E),j) }
set ext_length(int j, ExtParam E) = int:
  ext_length(integrality_datum(E),delta(E),j)

{ ext_type has many cases, split cases by length }
{ ext_type_1(delta,j,p)=1C+,1C-,1i1,1i2f,1i2s,1ic,1r1f,1r1s,1r2,1rn }
{ j=index of root in integral-simple roots (not all simple roots)}
set ext_type_1(mat delta,int j,Param p)=string:
  let type = status_text(j,p) in
  if type="i2" or type ="r1"
  then to_string(1,type,if is_fixed(delta,Cayley(j,p)) then "f" else "s" fi)
  else to_string(1,type)
  fi

{ ext_type_2(delta,j,p)=2C+,2C-,2Ci,2Cr,2i11,2i12,2i22,2r22,2r21,2r11,2rn,2rc
  j=index of root in integral-simple roots (not in all simple roots)
}
set ext_type_2 (mat delta,int j,Param p) = string:
  let x=x(p), id=integrality_datum(p) then alpha=root(id,j)
  then theta=involution(x), beta=delta*alpha, type=status_text(j,p)
  { need to use is_complex(x)(alpha) not is_complex(j,x) }
  in
  if is_complex(x)(alpha)
  then
    if theta*alpha=beta then "2Ci"
    elif theta*alpha=-beta then "2Cr"
    else 2+type
    fi
  elif is_imaginary(x)(alpha) then
    if type="ic" then "2ic"
    elif type="i2" then "2i22"
    else let k = root_index(id,beta) in
      if status_text(k,Cayley(j,p))="i1" then "2i11" else "2i12" fi
    fi
  elif type="rn" then "2rn"
  elif type="r1" then "2r11"
  else let k = root_index(id,beta) in
    if status_text(k,Cayley(j,p))="r1" then "2r21" else "2r22" fi
  fi

{ ext_type_e(delta,j,p)=3C+3C-,3Ci,3Cr,3i,3r,3rn,3ic }
{ j=index of root in integral-simple roots (not all simple roots)}
set ext_type_3 (mat delta,int j,Param p) = string:
  let x=x(p), alpha=root(integrality_datum(p),j)
  then theta=involution(x), beta=delta*alpha
  { need to use is_complex(x)(alpha), not is_complex(j,x) }
  in
  if is_complex(x)(alpha)
  then
    if theta*alpha=beta then "3Ci"
    elif theta*alpha=-beta then "3Cr"
    else 3+status_text(j,p)
    fi
  elif is_imaginary(x)(alpha)
  then  if is_compact(x)(alpha) then "3ic" else "3i" fi
  elif status_text(j,p)="rn" then "3rn"
  else "3r"
  fi

{ ext_type(delta,j,p)=ext_type_i(delta,j,p) where i=ext_length(G,delta,j)
  j=index of root in integral-simple roots (not in all simple roots)
}
set ext_type (mat delta,int j,Param p) = string:
  if is_fixed(delta,p)
  then
    case ext_length(integrality_datum(p),delta,j)-1 { case statement from 0 }
    in ext_type_1(delta,j,p)
    ,  ext_type_2(delta,j,p)
    ,  ext_type_3(delta,j,p)
    else error("wrong ext_length")
    esac
  else "" { fail quietly }
  fi

{ E=extended parameter, ext_type(j,E)=ext_type(delta,j,parameter(E))
  j=index of root in integral-simple roots (not in all simple roots)
}
set ext_type(int j,ExtParam E) = string:
  ext_type(delta(E),j,parameter(E))

{ E=extended parameter, ext_types=[ext_type(j,E)] }
set ext_types(ExtParam (ic,delta,,,,,,,,):E) = [string]:
  let p=parameter(E) in
  for j:semisimple_rank(integrality_datum(p)) do ext_type(delta,j,p) od
