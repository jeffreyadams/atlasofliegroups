<basic.at
<polynomial.at
<dual.at { for |dual_block@[Param]| }
<translate.at { for |Psi@(Param,[int])| }
<modules.at { for |has_infinitesimal_character@ParamPol| }
<combinatorics.at { for |pemutation_inverse@[int]| }
<weak_packets.at


{stable virtual characters}
{some elementary operations needed, these should be moved elsewhere}

set indices ([Param] B,[Param] subset) = [int]: for p in subset do find(B,p) od
set evaluate_at_1 ([i_poly] v)= vec: for w in v do evaluate_at_1(w)  od
set evaluate_at_1 (i_poly_mat M) = mat: ^for v in M do evaluate_at_1(v) od
set number = #@KGBElt { defined as |#| in basic.at }
set left_kernel = cokernel@mat { defined as |cokernel| in basic.at }

set column (i_poly_mat M,int j) = [i_poly]: for row in M do row[j] od
set null_poly_mat (int r,int c) = i_poly_mat:
  let row = [i_poly]: for i:c do poly_0 od in for j:r do row od
set mat_as_poly_mat (mat A) = i_poly_mat:
  for row in ^A do for entry in row do constant_poly(entry) od od

set * (mat A,i_poly_mat B) = i_poly_mat: mat_as_poly_mat(A)*B

set has_infinitesimal_character ([Param] params) = bool:
  >#params { no parameters, no infinitesimal_character } and
  (params[0].real_form.null_module+params).has_infinitesimal_character

set make_regular (Param p) = Param:
  let gamma=infinitesimal_character(p) in
  if is_regular(root_datum(p),gamma) then p
  else T(p,make_regular(root_datum(p),gamma))
  fi

set make_param_pol (RealForm G,[int] coefficients,[Param] params) = ParamPol:
  assert(#coefficients=#params,"mismatch");
  G.null_module + for c@i in coefficients do (c,params[i]) od

{permutations}
{S=[a_0,a_1,...] <-> permutation sigma(i)=a_i}

{inverse permutation}
set inverse_permutation ([int] sigma) = [int]:
  let result =for:#sigma do 0 od in
  for a@i in sigma do result[a]:=i od; result

set permutation_matrix_sort([int] S) = mat:
  let n=#S, sorted=sort(S) in matrix((n,n),(int i,int j)int: #(sorted[i]=S[j]) )

set in_tau (int s,Param p) = bool:  { whether s is in tau(p) }
   let (,b)= tau_bitset(p) in b(s)
set in_tau ([int] S,Param p) = bool:  { whether $S\subset\tau(p)$ }
   all(#S, (int i)bool: in_tau(S[i],p))
set in_tau([*] S,Param p) = bool: true { whether $\emptyset\subset\tau(p)$ }

set in_tau_complement (int s,Param p) = bool: { whether s not in tau(p) }
   not in_tau(s,p)
set in_tau_complement ([int] S,Param p) = bool: { whether $S\cap\tau(p)$ empty }
   all(#S, (int i)bool: in_tau_complement(S[i],p))
set in_tau_complement([*] S,Param p) = bool: true

{ translate irreducibles to singular infinitesimal character,
  only keep those for which tau(p)\subset S-complement }
set Psi ([Param] params,[int] S) = [Param]:
   ## for p in params do if in_tau_complement(S,p) then [Psi(p,S)] else [] fi od

{from now on [int] S is a set of simple roots,
 [Param] B is a block of parameters with regular infinitesimal character
   <not a Block in the sense of atlas, i.e. (x,y) pairs>
 [Param] params is a list of parameters
}

{ select indices of parameters whose |tau| contains |S| }
set parameters_tau_containing ([int] S,[Param] params) = [int]:
  ## for p@i in params do if in_tau(S,p) then [i] else [] fi od
set parameters_tau_containing([*] S,[Param] params) = [int]: # #params

{ select indices of parameters whose |tau| is disjoint from |S| }
set parameters_tau_contained_in_complement ([int] S,[Param] params) = [int]:
  ## for p@i in params do if in_tau_complement(S,p) then [i] else [] fi od
set parameters_tau_contained_in_complement ([*] S,[Param] params) = [int]:
  # #params

{recover permutation related to Vogan duality for given block}
set duality_permutation ([Param] B) = [int]: let (,perm)=dual_block(B) in perm

{subset of parameters p^\vee on dual side satisfying: S^\vee\subset tau(p^\vee)}
set dual_parameters ([int] S,[Param] B) = [int]:
  let (B_dual,perm)=dual_block(B) in parameters_tau_containing(S,B_dual)
set dual_parameters ([*] S,[Param] B)=[int]: dual_parameters([int]:S,B)

{parameters dual to the previous ones, i.e. satisfying
 tau(p)\subset S-complement in the order so that:
 parameters=[a1,a2,...]
 dual_parameters=[b1,b2,...]
 then duality permutation takes a_i to b_j
}
set parameters ([int] S,[Param] B) = [int]:
  let dual_params=dual_parameters(S,B)
  then P=duality_permutation(B)
  then Q=permutation_inverse(P)
  in for j in dual_params do Q[j] od

set parameters ([*] S,[Param] B) = [int]: parameters([int]:S,B)

set parameters_singular ([int] S,[Param] B) = [Param]:
  for i in parameters(S,B) do Psi(B[i],S) od
set parameters_singular ([*] S,[Param] B)=[Param]:
  parameters_singular([int]: S,B)

{vector of (-1)^{length(p)}, and corresponding diagonal matrix}
set lengths_signs ([Param] params) = [int]:
  for p in params  do minus_1^length(p) od
set lengths_signs_matrix ([Param] params) = mat:
  diagonal(lengths_signs(params))
set lengths_signs ([int] S,[Param] B) = [int]:
  lengths_signs(for i in parameters(S,B) do B[i] od)
set lengths_signs ([*] S,[Param] B) = [int]: lengths_signs([int]:S,B)
set lengths_signs_matrix ([int] S,[Param] B) = mat:
  lengths_signs_matrix(for i in parameters(S,B) do B[i] od)
set lengths_signs_matrix ([*] S,[Param] B) = mat:
  lengths_signs_matrix([int]:S,B)

set dual_parameters_matrix ([int] S,[Param] B) = mat:
  let dual_parameters = dual_parameters(S,B), perm=duality_permutation(B) in
  matrix( (#dual_parameters,#B), (int i,int j)int: #(perm[i]=j) )
set dual_parameters_matrix([*] S,[Param] B) = mat:
  dual_parameters_matrix([int]:S,B)

set dual_parameters_matrix ([Param] B) = mat: dual_parameters_matrix([int]:[],B)

{T is a subset of 1,...,n, keep only rows and columns in T}
set dual_parameters_matrix ([Param] B, [int] T) = mat:
  principal_submatrix(dual_parameters_matrix(B),T)

{nxn matrix, rows give formula for irreducible as sum of standards}
set dual_parameters_standard_basis_poly_mat ([Param] B) = i_poly_mat:
  let (B_dual,)=dual_block(B) in transpose(KL_P_polynomials(B_dual))
set dual_parameters_standard_basis ([Param] B) = mat:
  evaluate_at_1(dual_parameters_standard_basis_poly_mat(B))

{r x n matrix, subset of rows of the previous, corresponding to rows in dual_parameter(S,B)}
set dual_parameters_standard_basis ([int] S,[Param] B) = mat:
  let M=dual_parameters_standard_basis(B) in
  ^(for i in dual_parameters(S,B) do row(M,i) od)
set dual_parameters_standard_basis ([*] S,[Param] B) = mat:
  dual_parameters_standard_basis([int]:S,B)

set subspace_injection_matrix ([Param] B,[Param] subset) = mat:
  let rv=null(#subset,#B), indices=indices(B,subset) in
  for i:#indices do rv[i,indices[i]]:=1 od;rv

set get_y ([Param] B) = [int]:
  let dual_inner_class=dual_inner_class(B[0]) in
  for p in B do number(dual_KGB(p,dual_inner_class)) od.sort_u

{B is a block}
set stable_at_regular ([Param] B) = mat:
  let dual_KGB_elements=get_y(B)
  then dual_inner_class=dual_inner_class(B[0])
  then rv=null(#B,#dual_KGB_elements)
  in
  for p@i in B do rv[i,number(dual_KGB(p,dual_inner_class))]:=1 od ;
  {prints("dimension of stable at regular:", n_columns(rv));}
  rv

{r\times m matrix, r=#parameters, m=number of stable sums at regular}
set vanishing ([int] S,[Param] B) = mat:
  dual_parameters_standard_basis(S,B)*
  ^dual_parameters_matrix(B)*stable_at_regular(B)
{^(^dual_parameters_standard_basis(S,B)*^dual_parameters_matrix(B)*stable_at_regular(B))}
set vanishing ([*] S,[Param] B) = mat: vanishing([int]:S,B)

{r\times\ell  matrix, r=#parameters, \ell=dimension of (left) kernel of vanishing}
set kernel_vanishing ([int] S,[Param] B) = mat: kernel(^vanishing(S,B))
set kernel_vanishing ([*] S,[Param] B)   = mat: kernel_vanishing([int]:S,B)

{t\times r matrix, t=dimension of kernel of kernel_vanishing}
{unsorted version, shouldn't be used except for testing}
{B is a block (or union of blocks) of parameters at regular infinitesimal character}
set stable_at_singular_unsorted ([int] S,[Param] B) = (mat,[Param]):
  let Y=left_kernel(kernel_vanishing(S,B))
  then signs=lengths_signs_matrix(S,B)
  in prints("signs:", signs); (Y*signs,parameters_singular(S,B))
{(^kernel(^kernel_vanishing(S,B))*lengths_signs_matrix(S,B),parameters_singular(S,B))}

{handle empty case where first argument is of type [*]}
set stable_at_singular_unsorted ([*] S,[Param] B) = (mat,[Param]):
 stable_at_singular_unsorted([int]:S,B)

{same as stable_at_singular_unsorted, except that it is sorted}
{B is a set of parameters at regular infinitesimal character}
set stable_at_singular ([int] S,[Param] B) = (mat,[Param]):
  let params=parameters(S,B)
  then (M,)=stable_at_singular_unsorted(S,B)
  then P=permutation_matrix_sort(params)
  in (M*^P,for i in sort(params) do Psi(B[i],S) od)

{handle empty case where first argument is of type [*]}
set stable_at_singular ([*] S,[Param] B) = (mat,[Param]):
  stable_at_singular([int]:S,B)

{given block (or union of blocks) of parameters B at regular infinitesimal character,
and a subset\subset B
S=set of simple roots
find stable sums in subset pushed to the S-wall}
set stable_at_singular ([int] S,[Param] B,[Param] subset_in) = (mat,[Param]):
  {first replace subset with those so that tau(p)\in S-complement}
  let parameters = for i in parameters(S,B) do B[i] od in
  prints("S=",S);
  prints("number of parameters in block:", #B);
  prints("number of given parameters:", #subset_in);
  let subset=[Param]:[] in
  for p@j in subset_in do  if find(parameters,p)>=0 then subset#:=p fi od;
  prints("number of parameters at singular inf char:", #subset);
  let B_singular=for i in parameters(S,B) do B[i] od
  then subset_singular=[Param]:[]
  in for p in subset do if find(B_singular,p)>=0 then subset_singular#:=p fi od;
  let A=^(^kernel_vanishing(S,B)*^subspace_injection_matrix(B_singular,subset))
  then Y=left_kernel(subspace_injection_matrix(B_singular,subset)*
                     kernel_vanishing(S,B))
  then signs=lengths_signs_matrix(subset_singular)
  in (Y*signs,subset_singular)

{handle empty case where first argument is of type [*]}
set stable_at_singular ([*] S,[Param] B,[Param] subset) = (mat,[Param]):
  stable_at_singular([int]:S,B,subset)

set stable_sums([Param] singular_parameters)=[(mat,[Param])]:
let G=singular_parameters[0].real_form then
gamma_singular=singular_parameters[0].infinitesimal_character then
gamma_regular=gamma_singular+2*rho(G) then
all_regular_parameters=all_parameters_gamma(G,gamma_regular) then
{need to pass list of regular parameters,obtained by
translating singular_parameters out to gamma_regular}
my_regular_parameters={for p in singular_parameters do T(p,gamma_regular) od}
 ##for p in all_regular_parameters do if find(singular_parameters,T(p,gamma_singular))>=0 then [p] else [] fi od
then
()=prints("# regular parameters:", #my_regular_parameters) then
blocks=blocks(all_regular_parameters) then
rd_int=integrality_datum(G,gamma_singular) then
S=singular_simple_indices(rd_int,gamma_singular) in
for B in blocks do
stable_at_singular(S,B,my_regular_parameters) od

set stable_sums_partial([Param] singular_parameters)=
let G=singular_parameters[0].real_form then
gamma_singular=singular_parameters[0].infinitesimal_character then
gamma_regular=gamma_singular+2*rho(G) then
all_regular_parameters=all_parameters_gamma(G,gamma_regular) then
{need to pass list of regular parameters,obtained by
translating singular_parameters out to gamma_regular}
my_regular_parameters={for p in singular_parameters do T(p,gamma_regular) od}
 ##for p in all_regular_parameters do if find(singular_parameters,T(p,gamma_singular))>=0 then [p] else [] fi od
then
()=prints("# regular parameters:", #my_regular_parameters) then
blocks=blocks(all_regular_parameters) then
rd_int=integrality_datum(G,gamma_singular) then
S=singular_simple_indices(rd_int,gamma_singular) in
for B in blocks do (S,B,my_regular_parameters) od

set print_stable_at_singular_unsorted ([int] S,[Param] B) = void:
  let (M,)=stable_at_singular_unsorted(S,B)
  then params=parameters(S,B)
  in prints("dimension of block:", n_rows(M), new_line,
            "parameters=", params, new_line,
            "dimension space of stable characters:", n_rows(M), new_line,M)

set print_stable_at_singular_unsorted ([*] S,[Param] B) = void:
  print_stable_at_singular_unsorted([int]:S,B)

set print_stable_at_singular ([int] S,[Param] B) = void:
  let (M,)=stable_at_singular(S,B)
  then params=sort(parameters(S,B))
  in prints("dimension of block:", n_rows(M), new_line,
            "parameters=", params, new_line,
            "dimension space of stable characters:", n_rows(M), new_line,M)

set print_stable_at_singular ([*] S,[Param] B) = void:
  print_stable_at_singular([int]:S,B)

{#subset x #B matrix}

set nice_string(Split s)=string:
let (a,b)=%s in
if b=0 then a.to_string
elif a=0 then
 if b>1 then b.to_string + "s"
 elif b=1 then "+s"
 elif b=-1  then "-s" 
 else a.to_string + "-" + abs(b).to_string + "s"
 fi
else
 if b>1 then a.to_string +  "+" + b.to_string + "s"
 elif b=1 then a.to_string +  "+s"
 elif b=-1 then a.to_string + "-s" 
 else a.to_string + "-" + abs(b).to_string + "s"
fi
fi

set printParamPol(ParamPol P)=void:
let pairs=%P in 
tabulate(for (c,p) in pairs do [nice_string(c), " ", p.to_string] od)

set printParamPol([ParamPol] list)=void:
for P in list do printParamPol(P) od

set print_stable_at_singular ([int] S,[Param] B,[Param] subset) = void:
  let (rv,params)=stable_at_singular(S,B,subset) in
  prints("input parameters:",indices(B,subset));
  prints("surviving parameters:",indices(B,params));
  prints("dimension space of stable characters: ", n_rows(rv), new_line,rv)

set print_stable_at_singular ([*] S,[Param] B,[Param] subset) = void:
  print_stable_at_singular([int]:S,B,subset)

set stable ([Param] params) = (mat,[Param]):
  assert(has_infinitesimal_character(params)
        ,"terms do not all have same infinitesimal character");
  let G=real_form(params[0])
  then p=params[0]
  then gamma=infinitesimal_character(p)
  then gamma_reg=make_regular(root_datum(p),gamma)
  then S=singular_simple_indices(G,infinitesimal_character(p))
  then params_reg=for p in params do T(p,gamma_reg) od
  then B=block_of(params_reg[0])
  in stable_at_singular(S,B,params_reg)

set print_stable([Param] params) = void:
  if >#params
  then let G=params[0].real_form, (M,params)=stable(params) in
    prints("dimension space of stable sums:", n_rows(M));
    for i:n_rows(M) do prints(make_param_pol(G,row(M,i),params)) od
  fi

set stable_test_Aq_packet (RealForm G,ComplexParabolic P) = void:
  let A=Aq_packet(G,P) in print_stable(A)

set stable_test_Aq_packet (RealForm G,[int] complex_parabolic) = void:
  stable_test_Aq_packet(G,ComplexParabolic:(G,complex_parabolic))
set stable_test_Aq_packet (RealForm G,[*] complex_parabolic) = void:
  stable_test_Aq_packet(G,[int]:complex_parabolic)


set *(vec v,[Param] params)=
if #params=0 then null_module(compact_torus(0)) else
let  rv=null_module(params[0].real_form) in
 for i:#v do rv+:=v[i]*params[i]
od;rv fi

set *(mat M,[Param] params)=for v in M do v*params od

set print ([(mat,[Param])] list)=void:
prints("Number of blocks: ", #list);
for (M,params)@i in list do
 prints(new_line,"block #:", i);
 prints("matrix: ",M);
 for P@i in ^M*params  do prints("Stable sum #",i);printParamPol(P) od
{ printParamPol(M*params)}
od

set print_stable_sums([(int,int,Param)] list)=void:
print(stable_sums(parameters(list)))

set print_stable_sums([[(int,int,Param)]] lists)=void:
prints("Stable sums for ",#lists," packets:");
for list@i in lists do prints("-----------------------------------",new_line,"Packet #",i);print(stable_sums(parameters(list))) od

