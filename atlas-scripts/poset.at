<tabulate.at
<sort.at

{Partially ordered sets}

{Poset P=[[int]]: encodes a partial order
 the underlying set is {0,1,...,#P}
 relations: P[i]=[a_1,a_2,...] means i<a_j
 i<i is assumed (P[i] should not contain i)
}
set_type Poset=[[int]]

{add relations implied by reflexivity and transitivity}
set transitive_fill_one(Poset P) = Poset:
{add i to row i to guaranteed reflexive; loop reversal ensures |P[j]| is final }
  for Pi@i in P
 ~do P[i] := sort_u
    (i#Pi ##
     for j in Pi do P[j] od.## { all entries up from |i| by one transitivity }
    )
 ~od

set equal ([[int]]A,[[int]]B) = bool: { cannot overload this onto '=' }
  #A=#B and for ai@i in A do B[i]=ai od.all

{ repeatedly add all relations implied by transitivity; not needed anymore }
set transitive_fill(Poset P) = Poset:
  while let Q=transitive_fill_one(P) in not equal(P,Q) do P:=Q od; P

{ the fastest way to compute this is using bitsets; avoids needing |sort_u| }
set trans_close (Poset P) = Poset:
  let above = [int]: for Pi in P do Pi.to_bitset od in
  for above_i@i in above
 ~do let abi = int: { all values above |i| will be computed as here bitset }
     	 OR([i].to_bitset,above_i) { start with reflexive closure of |P[i]| }
     , work=above_i { we need a working copy for traversing the set bits }
  in
     while >work
     do let pow=AND_NOT(work,work-1) { smallest power |2^j| not dividing |work| }
     in abi:=OR(abi,above[bit_length(pow)-1]) { add bits transitively above |j| }
     ;  work:=AND_NOT(work,pow) { clear bit at position |j| in |work| }
     od
  ;  set_bit_positions(above[i]:=abi) { store in ||abi| in |above| and convert }
 ~od

set closure = (Poset->Poset): trans_close@Poset {cut out the middle}

set posets_equal(Poset P,Poset Q)=bool:
#P=#Q and
(let Pf=closure(P) then
 Qf=closure(Q) in
 all(for i:#P do Pf[i]=Qf[i] od))

set poset_inverse(Poset P)=Poset:
let P=closure(P) in
for i:#P do
 ##for j:#P do let k=first(#(P[j]),(int m)bool:i=P[j][m]) in
  if k !=-1 then [j] else [] fi od
  od

{boolean: i<j in poset P}
set less(Poset P,int i,int j)=bool:
let Q=closure(P) in if find(P[i],j)>=0 then true else false fi

set greater(Poset P,int i,int j)=bool:less(P,j,i)

{nodes which point to nothing (only themselves)}
set minimal_nodes(Poset P)=[int]:
##for i:#P do if =#P[i] or P[i]=[i] then [i] else [] fi od

{nodes i satisfying:
 P[i] is empty (or P[i]=[i])
 i\in P[j] some j (j\ne i)
in terms of orbit closures:
 orbit is closed, and
 orbit is contained in the closure of a strictly bigger orbit
}
set basic_nodes(Poset P)=[int]:
let Pinv=poset_inverse(P) in
##for j in minimal_nodes(P) do
 if !=Pinv[j] or Pinv[j]=[j] then [j] else [] fi od

{delete all edges pointing to node i, but
keep node i itself, so P does not get renumbered
caution: delete@(Poset,int) is defined,
 by overloading from delete@([vec],int) in basic.at
 and this is different
}
set delete_node(int i,Poset P)=Poset:
let rv=[[int]]:[] in
for j:#P do delete(P[j], find(P[j],i))
od

set delete_nodes([int] S,Poset P)=Poset:
for i in S do P:=delete_node(i,P) od;P

{Poset P, |P|=n
 f is a permutation of P
 f=[a_1,...,a_n] means f(i)=a_i
 f is monotone if less(P,i,j) => less(P,f(i),f(j))
}
set is_monotone(Poset P,[int] f)=bool:
assert(#P=#f,"f is not a permutation of P");
all (##for i:#P do for j in P[i] do less(P,f[i],f[j]) od od)

set subPoset(Poset P,[int] S)=
let Q=closure(P) in
for j in S do
 let row=Q[j] in
 ##for k in row do let index=find(S,k) in if index>=0 then [index] else [] fi od
od

{return a string which, when output to
a file, can be processed by graphviz to produce a
graph
suggested usage:
set g=graph(P)
>file.dot prints(g)
(command line):
%tred file.dot | dot -Tpdf -o file.pdf
tred: command line tool to reduce the graph
by eliminating redundant edges
default: each node is a black oval, labeled
by an integer
}
set graph(Poset P)=string:
let text=
"strict digraph  { " +
new_line + "size=""30.0,30.0!""; " +
new_line + "center=true;  " +
new_line + "node [color=black,fontcolor=black] " +
new_line + " edge [arrowhead=none,color=black]; "
in
for i:#P do
 let str=new_line+i.to_string + "[label=""" + i.to_string + """];" in
  for j in P[i] do str+:=i.to_string + "->" + j.to_string + ";" od;
 text+:=str od;text+new_line+"}"

{labels: function giving string to use in place of integers
colors:  function giving color of border of node j
for more options edit the .dot file directly
}
set graph(Poset P, (int->string) labels, (int->string) colors)=string:
let text=
"strict digraph  { " +
new_line + "size=""30.0,30.0!""; " +
new_line + "center=true;  " +
new_line + "node [color=black,fontcolor=black] " +
new_line + " edge [arrowhead=none,color=black]; "
in
for i:#P do
 let str=new_line+i.to_string + "[label=""" + labels(i) + """,color="+ colors(i) + "];" in
  for j in P[i] do str+:=i.to_string + "->" + j.to_string + ";" od;
 text+:=str od;text+new_line+"}"

{black borders}
set graph(Poset P, (int->string) labels)=string:
let black=(int->string):(int i):"black" in
graph(P,labels,black)

{black borders, give labels as an array of strings instead of a function}
set graph(Poset P,[string] labels)=string:
graph(P,(int->string):(int i):labels[i])

{simple text output of poset}
set show(Poset P)=void:
let values=
for row@i in P do [i.to_string,row.to_string] od in tabulate(values)
