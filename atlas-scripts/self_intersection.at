
set self_intersections_of_cells(Param p)=([[WCell]],[[[WeylElt]]]):
let G=p.real_form then
block=block_of(p) then
cells=W_cells_of(p) then
left_cells=for cell in cells do left_cells(G,cell) od then
left_cells_w=for i:#left_cells do
 for cell in left_cells[i] do cell_as_w(block,cell) od od
in
(left_cells,for i:#left_cells_w do
 for cell in left_cells_w[i] do self_intersect(cell) od  od)

set show(([[WCell]] left_cells,[[[WeylElt]]] self_intersections))=void:
prints("each row is a single two-sided cell",new_line,
"size: size of two-sided cell", new_line,
"#left: number of left cells in given two-sided cell",new_line,
"sizes(left):  sizes of left cells", new_line,
"self-int: , size of (left_cell) intersect (left_cell)^{-1}");
tabulate(
["i","size","#left","sizes(left)","self-int"]#
for a@i in left_cells do let v=for b in a do #b od in
[i.to_string,  sum(v).to_string,(#v).to_string,v.to_string,
(for a in self_intersections[i] do #a od).to_string
] od)

set show_self_intersections_of_cells(Param p)=([[WCell]],[[[WeylElt]]]):
let d=self_intersections_of_cells(p) in
prints("G=", p.real_form, new_line , "p=", p);show(d);d
