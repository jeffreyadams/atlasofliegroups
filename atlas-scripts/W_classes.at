<basic.at
<Levi_subgroups.at
<elliptic.at { for |elliptics_for_standard_Levi@(RootDatum,[int])| }
<cyclotomic.at {for |product_of_cyclotomic|}
<Weylgroup.at { for |is_relatively_elliptic| }
<tabulate.at { for |tabulate| }

{ The purpose of this file is with Weyl group conjugacy classes and characters.

  A large initial part is dedicated to deciding conjugacy in the Weyl group, and
  finding an explicit witness of conjugacy from a class representative.
}


{ A first major task is to list the $W$ conjugacy classes.

  Every Weyl group element $w$ has an associated Levi subgroup (not necessarily
  standard), whose roots are those whose reflections fix all weights fixed by
  $w$ (its eigenspace for $1$ in the reflection representation). The function
  |Levi_info@WeylElt| defined in Levi_subgroups.at computes the |Levi_info| for
  this Levi subgroup. Then $w$ is in the Weyl group of this Levi subgroup, and
  by construction it is a relatively elliptic element there.

  The Weyl subgroup of any Levi subgroup is conjugate in $W$ to that of a
  standard Levi subgroup, so for the purpose of finding the conjugacy classes of
  $W$ it suffices to consider only standard Levi subgroups. These have been
  classified (under conjugacy by $W$) in Levi_subgroups.at. The function
  |standard_Levi_conjugacy_representatives| defined there lists standard Levi
  conjugacy class representatives, and the function |classify_standard_Levis|
  provides for a root datum more complete information in the form of a
  |Std_Levi_table|, which also lists Levi conjugacy orbits for easy looking up.
}

{ A subsidiary task is to enumerate elliptic conjugacy classes for each standard
  Levi subsystem. The function |elliptics_for_standard_Levi@(RootDatum,[int])|
  defined in elliptic.at accomplishes this, partly by explicit listing.
}


{. list of conjugacy class representatives of W(rd) .}
set conjugacy_class_reps (RootDatum rd) = [WeylElt]:
  for subset in standard_Levi_conjugacy_representatives(rd)
  do elliptics_for_standard_Levi(rd,subset)
  od.##

set Levi_of (WeylElt w) = [int]: { posroot indices for simples of |w| system }
   let (rd,):Levi_info=w.Levi_info
   then Ld=Levi_datum(Levi_info), rho2_L = two_rho(Levi_info)
in for alpha_v in columns_with(is_simple_for(rho2_L),Ld.poscoroots)
   do coroot_index(rd,alpha_v) od

{ some standard Levi conjugate to that of |w|, conjugator from it, $w'$ in it }
set conjugate_from_standard_Levi (WeylElt w) =
       (WeylElt,[int],WeylElt): { conjugator from, standard Levi, conjugate w }
   let (chamber,unsorted_standard_Levi)
      = from_standard_Levi(w.root_datum,Levi_of(w))
   in (chamber,unsorted_standard_Levi.sort,/chamber*w*chamber)

{ like |conjugate_from_standard_Levi|, using standard Levi chosen from |table| }
set conjugate_from_classified_standard_Levi (RootDatum rd,Std_Levi_table table) =
      (WeylElt->WeylElt,[int],WeylElt): { conjugator from, elected Levi, c(w) }
   let lookup = Levi_lookup(rd,table) in
(WeylElt w) (WeylElt,[int],WeylElt): { conjugator from, Levi_repr, w_repr) }
   let (conj,Levi_repr) = lookup(Levi_of(w)) in (conj,Levi_repr,/conj*w*conj)

{----------------------------------------------------------------------------}
{ compute minimal length representatives of an elliptic conjugacy class }

{ This algorithm (due to He) gives *some* minimal length representatives of |w|
  but it gives *all* such if |w| is elliptic. In that case one can conjugate |w|
  to a minimal length representative doing one simple, weakly length decreasing
  conjugation at a time (also: given one minimal length representative, all
  other minimal length representatives can be obtained by conjugating without
  increasing the length)

  NOTE: in A2 the two simple generators are conjugate, but (obviously) not by
        either one of them, so any conjugation path increases length in this
	case the algorithm does give a minimal length representative but not
	all of them; since these simple generators are not elliptic, this does
	not contradict what is said here.
  So:
  given a list of Weyl group elements, all conjugate and of the same length,
  compute all their conjugates by simple generators that are not longer, keeping
  a list |shorter| of all that are strictly shorter while extending the list by
  any new elements of the same length. If |shorter| is non empty, replace the
  list by |shorter| and repeat, else if any new elements were added repeat, and
  if neither is the case terminate returning the list.

  The function below implements this, while also returning conjugations witnesses
}
set apply_He (WeylElt w) = [WeylElt,WeylElt]: { $(w', g)$ with $g*w*/g = w'$ }
(  let !rd = w.root_datum
   then stack = [[],[(w,id_W(rd))]], lw=length(w)
   , absent([WeylElt,WeylElt] pairs, WeylElt w) = bool:
        for (x,) in pairs do if x=w then return false fi od; true
in while { loop with embedded |do| instances near end }
      let shorter=false
      then new_level = [WeylElt,WeylElt]:
	 for s in W_gens(rd)
	 do for (w,witness) in stack~[0]
	    do let sws=s*w*s in
	       case length(sws)-lw
	       then { less }
		  stack:=[[],[(sws,s*witness)]]; shorter:=true; break 1
	       in { equal }
		 if absent(stack~[1]##stack~[0],sws) then [(sws,s*witness)]
		 else []
		 fi
	       else { greater } []
	       esac
	    od.##
	 od.##
      in
      if shorter then do lw:=lw-2 { and |stack| was reset }
      else >#new_level
      do let filtered = new_level[:1] in { we still need to remove duplicates }
         for (w,):p in new_level[1:]
	 do if absent(filtered,w) then filtered#:=p fi
	 od
      ;  stack#:=filtered
      fi
   od { while }
;  ##stack
)

{ split result of |apply_He| into parallel lists (conjugates,witnesses) }
set minimal_representatives_with_witnesses (WeylElt w) = ([WeylElt],[WeylElt]):
   let list = apply_He(w) in
   (for (w,) in list do w od, for (,witness) in list do witness od)

{ one selected minimal length class representative, witness conjugating to it }
set minimal_representative_with_witness (WeylElt w) = (WeylElt,WeylElt):
   apply_He(w)[0]

{ often one does not need a witness, so the following can be used instead }
set minimal_representatives (WeylElt w) = [WeylElt]:
   for (rep,) in apply_He(w) do rep od
set minimal_representative (WeylElt w) = WeylElt:
   let (rep,) = apply_He(w)[0] in rep


{ Conjugacy test, using reduction to elliptic

  We use the fact that x,y are conjugate iff L_x=x.Levi_datum is
  conjugate to L_y=y.Levi_datum, and, after conjugating L_y to L_x,
  x_ell is L_x conjugate to y_ell, where x_ell, y_ell are the elliptic
  classes in L_x, L_y corresponding to x,y
  Note that there is a choice of how to conjugate L_y to L_x, however the
  result is independent of that choice, essentially because the only elliptic
  class in type A is the Coxeter element, and the elliptic classes in a
  simple group are fixed by all outer automorphisms.
}

{ We may want to reduce |w| to an elliptic element of a sub-datum, which can be
  done using |elliptic_reduction|; the sub-datum can be recoverd from it. }
set elliptic_reduction (WeylElt w) = WeylElt: convert_to(Levi_datum(w),w)

{ to test for conugacy class membership, we use reduction to the elliptic case
  and a provided membership test for elliptic classes.
}
set is_conjugate_to ( WeylElt x
		    , (WeylElt->(WeylElt->bool)) elliptic_conjugacy_test
		    ) = (WeylElt->bool):
(  let rd=x.root_datum, ord_x = order(x), chi=char_poly(x)
   then rho2 = dominant(rd,two_rho(Levi_info(x)))
   , (w_x,sLevi) = from_standard_Levi(rd,Levi_of(x))
   then x_ell = elliptic_reduction(x := /w_x * x * w_x)
      next { check that assigment successfully moved |s| to our standard Levi }
      assert(Levi_of(x)=sLevi.sort,"failed to move x to standard Levi")
   then orbit = [int,WeylElt]: rho_stabiliser_orbit(rd,sLevi)
   , elliptic_test = elliptic_conjugacy_test(x_ell) { class membership in sLevi }
in
   (WeylElt y) bool: { the actual test |is_conjugate_to(x)| }
   y.root_datum=rd and order(y)=ord_x and char_poly(y)=chi and
   dominant(rd,two_rho(Levi_info(y)))=rho2 and
   ( let (w0,rho2_y) = from_dominant(rd,two_rho(Levi_info(y)))
     in rho2_y=rho2 and
        ( let L = int: right_act(Levi_of(y),w0)
	  then pos = first(#orbit,(int i)bool: let (rts,)=orbit[i] in rts=L)
          then (,w) =
	      assert(pos.>=,"conjugate with dominant rho not found in orbit");
	      orbit[pos]
	  then conjugator = w0 * w  { Levi_of(y) <-L <- sLevi=orbit.Levi_repr }
        in elliptic_test(convert_to(x_ell.root_datum,/conjugator*y*conjugator))
	)
   )
)

{ conjugacy test, using a |Std_Levi_table table| and an elliptic case test }

set_type [ WeylElt_or_none = (WeylElt conjugator | void not_conjugate) ]

set conjugacy_witness \
  ( WeylElt x
  , Std_Levi_table table
  , (WeylElt->(WeylElt->WeylElt_or_none)) elliptic_conjugacy_test
  ) = (WeylElt-> WeylElt_or_none):
   let rd=x.root_datum, ord_x = order(x), chi=char_poly(x)
   then classify = (WeylElt->WeylElt,[int],WeylElt):
                   conjugate_from_classified_standard_Levi(rd,table)
   then (w_x,Levi,x_L) = classify(x)
   then x_ell = elliptic_reduction(x_L)
   then elliptic_test = elliptic_conjugacy_test(x_ell)
in { end of preparations for |x|, now define the function of |y| }
   (WeylElt y) WeylElt_or_none:
   { start with easy necessary conditions on |y|: }
   if y.root_datum=rd and order(y)=ord_x and char_poly(y)=chi
   then
      let (w_y,Levi_y,y_ell) = classify(y) in
      if Levi_y!=Levi then not_conjugate()
      else
         case elliptic_test(convert_to(x_ell.root_datum,y_ell))
	 | conjugator(w_Levi): conjugator(w_x * convert_to(rd,w_Levi) * /w_y)
	 | not_conjugate(): not_conjugate()
	 esac
      fi
   else not_conjugate()
   fi

set is_conjugate_to ( WeylElt x
		    , Std_Levi_table table
		    , (WeylElt->(WeylElt->bool)) elliptic_conjugacy_test
		    ) = (WeylElt->bool):
   let rd=x.root_datum, ord_x = order(x), chi=char_poly(x)
   then classify = (WeylElt->WeylElt,[int],WeylElt):
                   conjugate_from_classified_standard_Levi(rd,table)
   then (,Levi,x_L) = classify(x)
   then x_ell = elliptic_reduction(x_L)
   then rd_L = sub_datum(rd,Levi)
   then elliptic_test = elliptic_conjugacy_test(convert_to(rd_L,x_L))
in { end of preparations for |x|, now define the function of |y| }
   (WeylElt y) bool:
   { start with easy necessary conditions on |y|: }
   y.root_datum=rd and order(y)=ord_x and char_poly(y)=chi and
   (let (,Levi_y,y_ell) = classify(y)
    in Levi_y=Levi and elliptic_test(convert_to(x_ell.root_datum,y_ell))
   )

{------------------------------------------------------------------- }

set present([WeylElt] list,WeylElt w) = bool: any(#list,(int i)bool: list[i]=w)

{ Given elliptic |x|, produce test for conjugacy of elliptic |y| to it.
  uses |minimal_representatives| function that invokes He's algorithm
}
set is_conjugate_to_He (WeylElt x) = (WeylElt->bool):
   assert(is_relatively_elliptic(x),"Class is not (relatively) elliptic");
   let reps = minimal_representatives(x) in
   (WeylElt y)bool: present(reps,minimal_representative(y))

set conjugacy_witness_He (WeylElt x) =
      (WeylElt->WeylElt_or_none):
   assert(is_relatively_elliptic(x),"Class is not (relatively) elliptic");
   let reps = [WeylElt,WeylElt]: apply_He(x) in
   (WeylElt y) WeylElt_or_none:
      let (min,w_y) = minimal_representative_with_witness(y) { min=w_y*y*/w_y }
      then i = last(#reps,(int i)bool: let (w,)=reps[i] in w=min)
   in if i.< then not_conjugate()
      else let (,w_x)=reps[i] { min = w_x*x*/w_x }
           in conjugator(/w_x * w_y) { from y to x: x= /w_x*w_y*y*/w_y*w_x }
      fi

{ uncurried version of the previous function (only |x| needs to be elliptic) }
set is_conjugate_He (WeylElt x,WeylElt y) = bool:
   assert(is_relatively_elliptic(x),"Class is not (relatively) elliptic");
   is_relatively_elliptic(y) and
   present(minimal_representatives(x),minimal_representative(y))

{ class membership for |x|: call |is_conjugate_to@(WeylElt,(WeylElt->bool))| }
set is_conjugate_to(WeylElt x) = (WeylElt->bool):
   is_conjugate_to(x,is_conjugate_to_He@(WeylElt))

{ use |is_conjugate_elliptic_He| to make a general |is_conjugate_to| function }
set is_conjugate_to_He(Std_Levi_table table) = (WeylElt x) (WeylElt->bool):
   is_conjugate_to(x,table,is_conjugate_to_He@(WeylElt))

{ similarly use |is_conjugate_elliptic_with_witness_He| }
set conjugacy_witness(Std_Levi_table table) =
   (WeylElt x) (WeylElt->WeylElt_or_none):
      conjugacy_witness(x,table,conjugacy_witness_He@(WeylElt))

{ the following inefficient function is unused, but motivates the one after it }

{ $W$-orbit of (non standard) Levi subsystem, represented by simple systems }
set Levi_orbit (RootDatum rd, [int] Levi { posroot indices } ) = [[int]]:
   let root_perm = [[int]]: { root permutations for all simple reflections }
     for i:rd.semisimple_rank
     do for alpha in rd.posroots do root_index(rd,W_gen(rd,i)*alpha) od
     od { this is negative on the main diagonal, but those entries are unused }
   then act_on([int] roots) = (int->bool,[int]):
      let test = is_member_sorted(roots) in
      (int i) (bool,[int]):
      if test(i)
      then (false,roots) { Levi's own simple reflection normalises system }
      else (true, let map = root_perm[i] in for j in roots do map[j] od.sort)
      fi
   , orbit = [Levi], current=0
in while current<#orbit
   do let L=orbit[current] next current+:=1 then apply = act_on(L)
   in for s:rd.semisimple_rank
      do let (moved,M)=apply(s) in
         if moved and none(#orbit,(int i):orbit[i]=M) then orbit #:= M fi
      od
   od; orbit


{ Computing just the size of this Levi orbit can be done a bit more efficiently
  than generating it, though it requires a some preliminary computation. The
  idea is to use the stabiliser subgroup $M$ in $W$ of $\rho_L$; though it does
  not contain $N_L$, the intersection $M\cap N_L$ has known index in $N_L$,
  namely the size of $W_L$ (every coset by $W_L$ meets the intersection
  uniquely). So we generate the (hopefully small) orbit under $M$ of images of
  the Levi system, then by dividing the size of $M$ by that of the orbit find
  the size of the intersection, which multiplied by that of $W_L$ gives the size
  of $N_L$, and dividing the size of $W$ by that gives our Levi orbit size.

  The orbit generation here is taylored to the specific situation, whence we do
  it using local code (the |begin|-|end| block below) rather than writing or
  using a more general orbit generation. The special circumstance is that we
  know that all elements of the acting subgroup fix $\rho_L$, so the only way
  they can map all simple generators of $L$ to roots of $L$ is by permuting them
  among each other. We can then ignore the distinction between a root and its
  opposite (working only with positive root indices) and not worry about
  choosing the simple generators for the positive part of each Levi system
  (which is why we had to single out the "do nothing" case above): the Levi
  system implied by a set of indices is the one additively generated by those
  roots and their opposites, and this results in the same system only if the
  indices are the same up to permutation. So again we can use an equality test
  for orbit membership, provided we sort our lists of indices to be increasing.
}

set Levi_normalizer_index ((RootDatum,(int->bool))(rd,select):Levi_info) = int:
   let rho2_L = two_rho(Levi_info)
   then Levi = [int]: { indices in |rd| for simple system of Levi }
         list(rd.nr_of_posroots,(int i): select(i) and coroot(rd,i)*rho2_L=2)
   , rho_L_stabiliser = Levi_datum(rd,(int i)bool: =coroot(rd,i)*rho2_L)
   then stab_orbit_size = int:
      begin
      let root_perm = [[int]]: { absroot perm.s by stabiliser simple refl.s }
         let ab (int i) = int: if i.< then -1-i else i fi { to positive index }
         in for beta in rho_L_stabiliser.simple_roots
            do for alpha in rd.posroots
               do root_index(rd,reflect(rd,beta,alpha)).ab
               od
            od
      then act(int i,[int] roots) = [int]:
         let map = root_perm[i] in for j in roots do map[j] od.sort
      , stack = [[int]]: [[],[combination_encode(Levi)]]
      , decode = combination_decode(#Levi) { decode numbers to |#Levi|-subsets }
      , present([int] sorted,int code) = bool:
           let l=#sorted
	   then i = binary_search_first((int i)bool: sorted[i]>=code, 0,l)
	   in i<l and sorted[i]=code
      in while { loop with |do| near end }
            let new_level = [int]:
	       for code in stack~[0]
	       do let L = [int]: decode(code)
	       in for k:#root_perm
                  do let M=combination_encode(act(k,L))
		  in if present(stack~[1],M) or present(stack~[0],M)
		     then [] else [M]
		     fi
                  od.##
               od.##
	 in >#new_level { whether any new elements were found for new level }
	 do stack #:= new_level.sort_u
	 od
      ; { stab_orbit_size = } for level in stack do #level od.sum
      end
   in rho_L_stabiliser.order_W \ stab_orbit_size { index of $W_L$ in $N_L$ }

set Levi_orbit_size ((RootDatum,(int->bool))(rd,):Levi_info) = int:
  rd.order_W \ (Levi_info.Levi_normalizer_index * Levi_info.Levi_datum.order_W)

{ Now onward to the task of getting the size of the conjugacy class of |w|
  for |Levi_datum(w)|, where ignoring the central torus it is elliptic. This
  root datum can have multiple simple factors, and we can decompose |w| as
  commuting product of elements of the Weyl groups of the simple factors, and
  its conjugacy class will be the Cartesian product of the conjugacy classes of
  the factors (the same goes for the centraliser). The following function
  determines this decomposition, where each |WeylElt| in the result is
  associated to a different root datum, which is simple up to a central torus.
}

set elliptic_simple_decomposition (WeylElt w) = [WeylElt,(string,int)]:
   let rd_L = Levi_datum(w)
   then (type,map)=Cartan_matrix_type(rd_L.Cartan_matrix)
   then codes = type.simple_factors, w_L=W_elt(rd_L,w.matrix) { convert }
   , offset=0 { rank within |type| already seen in loop below }
   , !r = rd_L.rank { full rank, needed when gathering roots/coroots }
in for (,rank):code in codes { traverse the simple factors }
   do let sub_map = map[offset:offset+rank] { index mapping for this factor }
      then factor_word =
	 ## for s in w_L.word
	    do let i=find(sub_map,s) in if i.>= then [i] else [] fi
	    od
      , simple_datum = root_datum
	( r # for i in sub_map do rd_L.simple_roots[i]   od
	, r # for i in sub_map do rd_L.simple_coroots[i] od
	, w.root_datum.prefers_coroots
	)
   in ( W_elt(simple_datum,factor_word), code )
   next offset +:= rank
   od

set centralizer_order = (WeylElt->int):
  let elliptic_simple_order(WeylElt w,(string type, int rank)) = int:
     { here |w| is elliptic, with simple associated datum of given type,rank }
     case char_index(type,"ABCD")
     in rank+1 { type $A_n$ has unique elliptic, an $n+1$ cycle permutation }
     , order_of_centralizer_elliptic_BCD(w)
     , order_of_centralizer_elliptic_BCD(w)
     , order_of_centralizer_elliptic_BCD(w)
     else exceptional_elliptic_centr_order(type,rank,char_poly(w))
     esac
  in { centralizer_order = }
  (WeylElt w) int:
    for (w_i,type_rank) in elliptic_simple_decomposition(w)
    do elliptic_simple_order(w_i,type_rank)
    od . product * Levi_normalizer_index(w.Levi_info)

{. number of elements of a conjugacy class .}
set size_of_conjugacy_class (WeylElt w) = int:
  w.root_datum.order_W \ w.centralizer_order
set sizes_of_conjugacy_classes (RootDatum rd) = [int]:
  for w in conjugacy_class_reps(rd) do w.size_of_conjugacy_class od

{ A final production is a type for storing data relevant to W-characters,
  notably information about conjugacy classes. This will be a (mildly) "stateful
  value" in that some data, notably for the symmetric powers of the reflection
  representation, are computed and stored on demand only. In order to achieve
  this access is often via function components that can access the hidden state.
}
set_type
[ WeylClassTable =
  ( int n_classes
  , int order_W
  , [WeylElt] class_representatives
  , (WeylElt->int) class_of
  , [int] class_sizes
  , (int,int->int) class_power
  , [int] trivial
  , [int] sign
  , [int] reflection
  , ([int]->int) dimension
  , ([int]->int) norm2
  , ([int],[int]->int) inner
  , ([int],[int]->[int]) direct_sum
  , ([int],int->[int]) Cartesian_power
  , ([int],[int]->[int]) tensor
  , ([int],int->[int]) tensor_power
  , (int->[int]) sym_power_refl
  )
]

{ From the above functions, the generic table constructor will only use
  |conjugacy_class_reps|, |size_of_conjugacy_class|, and |is_conjugate| to get
  its information (and choices) concerning conjugacy. Since these general
  purpose functions may be much slower than type specific ones, our main
  constructor takes additional arguments in their place, and then the generic
  constructor will provide mentioned functions in thir place.
}
set W_class_table ( RootDatum rd
		  , [WeylElt] !reps
		  , (int->int) class_size { size of class, by class numer }
		  , (WeylElt->int) class_nr_of
		  , (int,int->int) power_map
		  ) = WeylClassTable:
   let !sizes = [int]: for i:#reps do class_size(i) od
   , !ncc = #reps { number of conjugacy classes }
   , !nW = rd.order_W
   , !rank = rd.rank, !npr=rd.nr_of_posroots
   , !e = class_nr_of(id_W(rd))
   then inner ([int] x, [int] y) = int:
     assert(#x=ncc and #y=ncc,"Wrong sizes");
     let s = for size@i in sizes do size*x[i]*y[i] od.sum then (q,r)=s \% nW in
     if =r then q else error("Non integer inner product ",s/nW) fi
   , sum ([int] x, [int] y) = [int]: for xi@i in x do xi+y[i] od
   , product ([int] x, [int] y) = [int]: for xi@i in x do xi*y[i] od
   , refl_characteristic = [vec]: for w in reps do char_poly(w) od
   , power_table = [vec]:
        for i:ncc do for k:reps[i].order do power_map(i,k) od od
   , reflection_sympowers = [[int]]: { characters of Sym^k(reflection_rep) }
        for :ncc do 1 od { initial symmetric 0-power, only one computed here }
	# for :npr do [int]:[] od { reserve empty table rows }
   , k=0 { last symmetric power computed}
in
( {n_classes} ncc
, {order_W} nW
, {class_representatives} reps
, {class_of} class_nr_of
, {class_sizes} sizes
, {class_power} (int i,int n) int: let v=power_table[i] in v[n % #v]
, {trivial}     for :ncc do 1 od
, {sign}        for w in reps do minus_1^w.length od
, {reflection}  for w in reps do w.matrix.trace od
, {dimension}   ([int] val) int: val[e]
, {norm2} ([int] x) int: inner(x,x)
, {inner} inner
, {direct_sum}
  (([int],[int])(x,y):pair) [int]:
  assert(#x=ncc and #y=ncc,"Wrong sizes"); sum(pair)
, {Cartesian_power}
  ([int] x,int n) [int]: assert(#x=ncc,"Wrong size"); for v in x do n*v od
, {tensor}
  (([int],[int])(x,y):pair) [int]:
  assert(#x=ncc and #y=ncc,"Wrong sizes");  product(pair)
, {tensor_power}
   ([int] x, int n) [int]: assert(#x=ncc,"Wrong size"); for xi in x do xi^n od
, {sym_power_refl}
  (int n) [int]: assert(n<=npr,"No symmetric powers recorded beyond "+npr);
     while k<n { extend until |reflection_sympowers[n]| has been set }
     do k+:=1; reflection_sympowers[k] :=
        for j:ncc
	do let s=0, !chi=refl_characteristic[j] in
	   for i:min(rank,k) from 1
	   do s-:=chi~[i]*reflection_sympowers[k-i][j]
	   od
	;  s
	od
     od
  ;  reflection_sympowers[n]
)

set W_class_table ( RootDatum rd
		  , [WeylElt] reps
		  , (WeylElt->int) class_size
		  , (WeylElt->(WeylElt->bool)) is_conjugate_to
		  ) = WeylClassTable:
   let memberships = [(WeylElt->bool)]: for r in reps do is_conjugate_to(r) od
   then class_of(WeylElt w) = int: first(#reps,(int i)bool: memberships[i](w))
in W_class_table( rd, reps
		, (int i) int: class_size(reps[i])
		, class_of
		, (int i, int k) int: let pred=is_conjugate_to(reps[i]^k) in
		    for r@j in reps do if pred(r) then return j fi od; minus_1
		)

{ a version with no help to find conjugacy classes, so much slower }
set W_class_table_generic (RootDatum rd) = WeylClassTable:
   W_class_table( rd, conjugacy_class_reps(rd)
		, size_of_conjugacy_class@WeylElt
		, is_conjugate_to_He(classify_standard_Levis(rd))
		)

{ A valid class table that can be used to initialise local variables }
set !trivial_class_table = W_class_table_generic(adjoint(""))

set root_datum (WeylClassTable tab) = RootDatum:
    tab.class_representatives[0].root_datum { at least one class exists }

{ adapt an existing table to an externally imposed order of the classes }
set reorder (WeylClassTable tab, [WeylElt] reps) = WeylClassTable:
   let !n = tab.n_classes, rd = tab.root_datum
   then !class_map = [int]:
        assert(#reps=n,"There should be "+n+" class representatives")
      ; for w in reps do tab.class_of(w) od
in if class_map = #n then tab { no reordering needed }
   else
      let !inv_map = inverse(class_map)
      , sizes = let old_sizes=tab.class_sizes in
		for i:n do old_sizes[class_map[i]] od
      then export([int]chi) = [int]: for i:n do chi[class_map[i]] od
      , inner([int] x,[int] y) = int:
	 assert(#x=n and #y=n,"Wrong sizes");
	 let s = for size@i in sizes do size*x[i]*y[i] od.sum
	 then (q,r)=s \% tab.order_W
      in if =r then q else error("Non integer inner product ",s/tab.order_W) fi
   in
     ( {n_classes} n
     , {order_W} tab.order_W
     , {class_representatives} reps
     , {class_of} (WeylElt w) int: inv_map[tab.class_of(w)]
     , {class_sizes} sizes
     , {class_power} (int i,int k) int: inv_map[tab.class_power(class_map[i],k)]
     , {trivial}    tab.trivial { no reordering necessary here }
     , {sign}       tab.sign.export
     , {reflection} tab.reflection.export
     , {dimension}  let e=inv_map[tab.class_of(id_W(rd))] in ([int] v) int: v[e]
     , {norm2} ([int] x) int: inner(x,x)
     , {inner} inner
     , {direct_sum} tab.direct_sum { no change for reordering }
     , {Cartesian_power} tab.Cartesian_power { no change for reordering }
     , {tensor} tab.tensor { no change for reordering }
     , {tensor_power}  tab.tensor_power { no change for reordering }
     , {sym_power_refl} (int k)[int]: tab.sym_power_refl(k).export
     )
   fi

set class_representative (WeylClassTable tab) = (int i) WeylElt:
   tab.class_representatives[i]
set class_size (WeylClassTable tab) = (int i) int: tab.class_sizes[i]

{. index i for which w is conjugate to classes[i], in given WeylClassTable .}
set conjugacy_class_number (WeylClassTable ct,WeylElt w) = int: ct.class_of(w)

{. value of character char at w\in W .}
set character_value (WeylClassTable ct,[int] char, WeylElt w) = int:
  char[ct.class_of(w)]

{ Adams's operation (not Jeff's): evaluate character at class of $w^n$ }
set Adams (WeylClassTable tab) = ([int]char, int n) [int]:
   for i:tab.n_classes do char[tab.class_power(i,n)] od

{ symmetric power of a character }
set sym_power (WeylClassTable tab) = ([int]char, int n) [int]:
{ with $h_k$ symmetric, $p_k$ Adams, use $kh_k=\sum_{i=0}{k-1} h_ip_{k-i}$ }
   let { define two local tables of characters, to be expanded in loop }
     p = { "power sum polynomials", results of Adams operations } [[int]]: [ ]
         { since there is no $p_0$, the $k$-the Adams operation gives the entry
           |p[k-1|, but never mind since we will always reverse-index |p| }
   , h = { "complete homogeneous polynomials", symmetric powers } [tab.trivial]
   , Adams = tab.Adams { shorthand }
in for k:n from 1
   do p #:= Adams(char,k) { expand }
   ;  let sum=p~[0]
   in for i:k-1 from 1 do sum:=tab.direct_sum(sum,tab.tensor(h[i],p~[i])) od
   ; h #:= for s in sum do s\k od { expand table by |sum\k| }
   od; h[n] { last symmetric power is the one we want }

{ exterior power of a character }
set ext_power (WeylClassTable tab) = ([int]char, int n) [int]:
{ with $e_k$ ext, $p_k$, use $ke_k=\sum_{i=0}{k-1}(-1)^{k-i-1} e_ip_{k-i}$ }
   let { define two local tables of characters, to be expanded in loop }
    sp = { "signed power sum polynomials", $(-1)^{i-1}p_i$ } [[int]]: [ ]
         { since there is no $p_0$, the $k$-the Adams operation gives the entry
           |p[k-1|, but never mind since we will always reverse-index |p| }
   , e = { "elementary symmetric polynomials", exterior powers } [tab.trivial]
   , Adams = tab.Adams { shorthand }
in for k:n from 1
   do sp #:= tab.Cartesian_power(Adams(char,k),minus_1^(k-1)) { expand }
   ;  let sum=sp~[0]
   in for i:k-1 from 1 do sum:=tab.direct_sum(sum,tab.tensor(e[i],sp~[i])) od
   ; e #:= for s in sum do s\k od { expand table by |sum\k| }
   od; e[n] { last symmetric power is the one we want }

forget WeylElt_or_none

{ Convenience functions }

set show (WeylClassTable tab) = void:
   let data = ["nr","count","order","length","Levi type","representative"] #
     for w@i in tab.class_representatives
     do [ i.to_string
        , tab.class_sizes[i].to_string
        , w.order.to_string
        , w.length.to_string
        , w.Levi_datum.Lie_type.semisimple.str
	, w.to_string
        ]
     od
   in tabulate(data,"rrrrll",2," ")

{ test: sum of sizes of conjugacy class = |W| }
set test_size_of_conjugacy_classes (RootDatum rd,[WeylElt] c) = (int,int):
  (order_W(rd),sum(for w in c do  size_of_conjugacy_class(w)  od))

set test_size_of_conjugacy_classes (RootDatum rd) = bool:
  =test_size_of_conjugacy_classes(rd,conjugacy_class_reps(rd))

{. print order, length, Levi.}
set print_conjugacy_classes ([WeylElt] C) = void:
  let data=["order","length","Levi"] { column headers }
  # for w in C
    do [ w.order.to_string
       , w.length.to_string
       , w.Levi_datum.Lie_type.semisimple.str
       ]
    od
  in tabulate(data,"rrl",2," ")

{. print order, length, Levi.}
set print_conjugacy_classes_med ([WeylElt] C) = void:
  let data=["order","length","Levi","Cyclotomic"] { column headers }
  # for w in C
    do [ w.order.to_string
       , w.length.to_string
       , w.Levi_datum.Lie_type.semisimple.str
       , product_of_cyclotomic(rat_poly:("q",char_poly(w),())).to_string
       ]
    od
  in tabulate(data,"rrrl",2," ")

set print_conjugacy_classes_long ([WeylElt] C) = void:
  let data=["order","length","Levi","size","word"] { column headers }
  # for w in C
    do [ w.order.to_string
       , w.length.to_string
       , w.Levi_datum.Lie_type.semisimple.str
       , w.size_of_conjugacy_class.to_string
       , w.word.to_string
       ]
    od
  in tabulate(data,"rrlll",2," ")

set print_conjugacy_classes (RootDatum rd) = void:
  rd.conjugacy_class_reps.print_conjugacy_classes

set print_conjugacy_classes_long (RootDatum rd) = void:
  rd.conjugacy_class_reps.(sort_by(order@WeylElt)).print_conjugacy_classes_long

{. print elliptic classes only .}
set print_elliptic_conjugacy_classes (RootDatum rd) = void:
  elliptic_conjugacy_class_reps(rd).
  (sort_by(order@WeylElt)).
  print_conjugacy_classes

set print_elliptic_conjugacy_classes_long (RootDatum rd) = void:
  rd.elliptic_conjugacy_class_reps.
  (sort_by(order@WeylElt)).
  print_conjugacy_classes_long
