{
this file used to be called K_types.at
now consists almost exclusively of printing functions
}

<basic.at     { for *@(Param,rat) }
<K_types.at
<tabulate.at
<K_highest_weights.at { for eponymous function }
<hermitian.at { for |hermitian_form_irreducible| }

set print_branch_irr (ParamPol P,KGBElt x,int bound) = void:
  for mult@q in branch_irr(P,bound)
  do let wts0 = highest_weights(q,x)[0]
     in prints(mult,"*",(wts0.x,wts0.mu))
  od

set print_branch_irr (ParamPol P,int bound) = void:
   tabulate(["m","x","lambda"] #
      for mult@q in branch_irr(P,bound)
      do [prettyPrint(mult),to_string(#q.x),to_string(q.lambda)]
      od
   )

{ K-types of sum of irreducibles P, up to given bound, sorted by
  height, the output includes multiplicity, highest weight (on the identity
  component of K), dimension and height
}
set print_branch_irr_long (ParamPol P,KGBElt x,int bound) = void:
   tabulate(["m","x","lambda","hw","dim","height"] #
      for mult@q in branch_irr(P,bound)
      do let hw=highest_weights(q,x)[0] in
      [ prettyPrint(mult)
      , to_string(#q.x)
      , to_string(q.lambda)
      , to_string(hw.x,hw.mu)
      , to_string(dimension(LKT(q)))
      , to_string(q.height)
      ]
      od
   )

set print_branch_irr_long (ParamPol P,int bound) = void:
  { default to x=KGB(G,0) }
  print_branch_irr_long(P,KGB(real_form(P),0),bound)

{similar to print_branch_irr_long, except that K-types are given
 by their highest weight on K_0}
set print_branch_K_irr_long (ParamPol P, KGBElt x, int bound) = void:
   tabulate( ["coeff","hw","dim","height"] #
      for mult@q in branch_irr(P,bound)
      do let (,,hw)=highest_weight(K0_param(LKT(q),x)) in
      [ prettyPrint(mult)
      , to_string(hw)
      , to_string(dimensions(param(q))[0])
      , to_string(height(q))
      ]
      od
   )

set print_branch_K_irr_long(ParamPol P, int bound) = void:
  { default to x=KGB(G,0) }
  print_branch_K_irr_long(P,KGB(real_form(P),0),bound)

{ these definitions promote Param->ParamPol without relying on coercion }
set print_branch_irr (Param p, int bound) = void:
  print_branch_irr(ParamPol:p,bound)
set print_branch_irr (Param p, int bound) = void:
  print_branch_irr(ParamPol:p,bound)
set print_branch_irr_long (Param p,KGBElt x, int bound) = void:
  print_branch_irr_long(ParamPol:p,x,bound)
set print_branch_irr_long (Param p, int bound) = void:
  print_branch_irr_long(ParamPol:p,bound)

set print_branch_std (KTypePol P,KGBElt x,int bound) = void:
  for mult@q in branch_std(P,bound)
  do let hw=highest_weights(q,x)[0] in
    prints(mult, "*", (hw.x,hw.mu))
  od

set print_branch_std (KTypePol P,int bound) = void:
   tabulate( ["m","x","lambda"] #
      for mult@q in branch_std(P,bound)
      do [ prettyPrint(mult), to_string(#q.x), to_string(q.lambda) ]
      od
   )

set print_branch_std (KTypePol P,int bound) = void: { default to x=KGB(G,0) }
  print_branch_std(P,KGB(real_form(P),0),bound)

{ K-types of standard p, up to given bound, sorted by height, the
  output includes multiplicity, highest weight (on the identity component of
  K), dimension and height
}
set print_branch_std_long (KTypePol P,KGBElt x,int bound) = void:
   tabulate( ["m","x","lambda","hw","dim","height"] #
       for mult@q in branch_std(P,bound)
       do let hw=highest_weights(q,x)[0] in
       [ prettyPrint(mult)
       , to_string(#q.x)
       , to_string(q.lambda)
       , to_string(hw.x,hw.mu)
       , to_string(dimension(LKT(q)))
       , to_string(height(q))
       ]
       od
   )

set print_branch_std_long (KTypePol P,int bound) = void:
  { default to x=KGB(G,0) }
  print_branch_std_long(P,KGB(real_form(P),0),bound)


{similar to print_branch_std_long, except that K-types are given
 by their highest weight on K_0}
set print_branch_K_std_long(KTypePol P, KGBElt x, int bound) = void:
( prints("rho_K=", rho_K(x))
; for mult@q in branch_std(P,bound)
  do let hw = highest_weight(K0_param(LKT(q),x)) in
    prints(mult, "*", (hw.x,hw.mu), " ", dimensions(param(q))[0]
          ,  "    ", height(q))
  od
)

set print_branch_K_std_long (KTypePol P, int bound) = void:
   print_branch_K_std_long(P,KGB(P.real_form,0),bound)


{ these definitions promote KType->KTypePol without relying on coercion }
set print_branch_std (KType p,KGBElt x, int bound) = void:
  print_branch_std(KTypePol:p,x,bound)
set print_branch_std (KType p, int bound) = void:
  print_branch_std(KTypePol:p,bound)
set print_branch_std_long (KType p,KGBElt x, int bound) = void:
  print_branch_std_long(KTypePol:p,x,bound)
set print_branch_std_long (KType p, int bound) = void:
  print_branch_std_long(KTypePol:p,bound)

set print_K_signature_irr (Param p,KGBElt x,int bound) = void:
( let form=hermitian_form_irreducible(p) then P=int_part(form),Q=s_part(form) in
  if =P then prints("Positive part is empty")
  else prints("Positive part:"); print_branch_std_long(P,x,bound)
  fi
; if =Q then prints("Negative part is empty")
  else prints("Negative part:");print_branch_std_long(Q,x,bound)
  fi
)

set print_K_signature_irr (Param p,int bound) = void:
  print_K_signature_irr(p,KGB(real_form(p),0),bound)
