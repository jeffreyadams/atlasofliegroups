<K_types.at
<tabulate.at

{
this used to be called K_types.at
now consists almost exclusively of printing functions
}

<basic.at     { for *@(Param,rat) }
<hermitian.at { for hermitian_form_irreducible }

{the following functions have already been defined in K_types.at:
set branch_std (ParamPol P,int bound) = ParamPol:
  let sum=0*P in for c@p in P do sum +:= c*branch(p,bound) od; sum

set branch_irr (Param p, int bound) = ParamPol:
  branch_std(character_formula(p),bound)

set branch_irr (ParamPol P,int bound) = ParamPol:
  let sum=0*P in for c@p in P do
 sum +:= c*branch_irr(p,bound) od; sum
}

set print_branch_irr (ParamPol P,int bound) = void:
let header=["m","x","lambda"] then
values=
  for (mult,q) in sort_by_height(branch_irr(P,bound))
  do [prettyPrint(mult),let (,n)=%q.x in n.to_string,q.lambda.to_string] od in
  tabulate(header#values) 

{ K-types of sum of irreducibles P, up to given bound, sorted by
  height, the output includes multiplicity, highest weight (on the identity
  component of K), dimension and height
}
set print_branch_irr_long (ParamPol P,KGBElt x,int bound) = void:
let header=["m","x","lambda","hw","dim","height"] then
values=
  for (mult,q) in sort_by_height(branch_irr(P,bound))
  do let hw=highest_weights(q,x)[0] in
  [prettyPrint(mult),let (,n)=%q.x in n.to_string,q.lambda.to_string,let (,v)=highest_weight_plain(hw)in v.to_string,dimension(LKT(q)).to_string,height(q).to_string] od in
    tabulate(header#values) 

set print_branch_irr_long (ParamPol P,int bound) = void:
  { default to x=KGB(G,0) }
  print_branch_irr_long(P,KGB(real_form(P),0),bound)

{similar to print_branch_irr_long, except that K-types are given
 by their highest weight on K_0}
set print_branch_K_irr_long(ParamPol P, int bound)=void:
let header=["coeff","hw","dim","height"] then
values= for (mult,q) in sort_by_height(branch_irr(P,bound))
  do let (,,hw)=highest_weight(K0_param(LKT(q))) in
    [prettyPrint(mult), hw.to_string, dimensions(q)[0].to_string,height(q).to_string]
  od
  in tabulate(header#values)

set print_branch_K_irr_long(ParamPol P, int bound, KGBElt x)=void:
let header=["coeff","hw","dim","height"] then
values= for (mult,q) in sort_by_height(branch_irr(P,bound))
  do let (,,hw)=highest_weight(K0_param(LKT(q),x)) in
    [prettyPrint(mult), hw.to_string, dimensions(q)[0].to_string,height(q).to_string]
  od
  in tabulate(header#values)

{ these definitions promote Param->ParamPol without relying on coercion }
set print_branch_irr (Param p, int bound) = void:
  print_branch_irr(ParamPol:p,bound)
set print_branch_irr (Param p, int bound) = void:
  print_branch_irr(ParamPol:p,bound)
set print_branch_irr_long (Param p,KGBElt x, int bound) = void:
  print_branch_irr_long(ParamPol:p,x,bound)
set print_branch_irr_long (Param p, int bound) = void:
  print_branch_irr_long(ParamPol:p,bound)

set print_branch_std (ParamPol P,int bound) = void:
let header=["m","x","lambda"] then
values=
  for (mult,q) in sort_by_height(branch_std(P,bound))
  do [prettyPrint(mult),let (,n)=%q.x in n.to_string,q.lambda.to_string] od in
  tabulate(header#values)

{ K-types of standard p, up to given bound, sorted by height, the
  output includes multiplicity, highest weight (on the identity component of
  K), dimension and height
}
set print_branch_std_long (ParamPol P,KGBElt x,int bound) = void:
let header=["m","x","lambda","hw","dim","height"] then
values=
  for (mult,q) in sort_by_height(branch_std(P,bound))
  do let hw=highest_weights(q,x)[0] in
  [prettyPrint(mult),let (,n)=%q.x in n.to_string,q.lambda.to_string,let (,v)=highest_weight_plain(hw)in v.to_string,dimension(LKT(q)).to_string,height(q).to_string] od in
    tabulate(header#values)

set print_branch_std_long (ParamPol P,int bound) = void: { default to x=KGB(G,0) }
  print_branch_std_long(P,KGB(real_form(P),0),bound)


{similar to print_branch_std_long, except that K-types are given
 by their highest weight on K_0}
set print_branch_K_std_long(ParamPol P, KGBElt x, int bound)=void:
( prints("rho_K=", rho_K(x));
 for (mult,q) in sort_by_height(branch_std(P,bound))
  do let hw=highest_weight(K0_param(LKT(q),x)) in
    prints(mult, "*", hw, " ", dimensions(q)[0]
          ,  "    ", height(q))
  od)


set print_branch_K_std_long(ParamPol P, int bound)=void:
print_branch_K_std_long(P,KGB(P.real_form,0),bound)



{ these definitions promote Param->ParamPol without relying on coercion }
set print_branch_std (Param p,KGBElt x, int bound) = void:
  print_branch_std(ParamPol:p,bound)
set print_branch_std (Param p, int bound) = void:
  print_branch_std(ParamPol:p,bound)
set print_branch_std_long (Param p,KGBElt x, int bound) = void:
  print_branch_std_long(ParamPol:p,x,bound)
set print_branch_std_long (Param p, int bound) = void:
  print_branch_std_long(ParamPol:p,bound)

set print_K_signature_irr (Param p,KGBElt x,int bound) = void:
( let form=hermitian_form_irreducible(p) then P=int_part(form),Q=s_part(form) in
  if =P then prints("Positive part is empty")
  else prints("Positive part:"); print_branch_std_long(P,x,bound)
  fi
; if =Q then prints("Negative part is empty")
  else prints("Negative part:");print_branch_std_long(Q,x,bound)
  fi
)

set print_K_signature_irr (Param p,int bound) = void:
  print_K_signature_irr(p,KGB(real_form(p),0),bound)

{similar to print_branch_std_long, except that K-types are given 
 by their highest weight on K_0}
set print_branch_K_std_long(ParamPol P, KGBElt x, int bound)=void:
( prints("rho_K=", rho_K(x));
 for (mult,q) in sort_by_height(branch_std(P,bound))
  do let hw=highest_weight(K0_param(LKT(q),x)) in
    prints(mult, "*", hw, " ", dimensions(q)[0]
          ,  "    ", height(q))
  od
)

set print_branch_K_std_long(ParamPol P, int bound)=void:
print_branch_K_std_long(P,KGB(P.real_form,0),bound)

set print_branch_hermitian_form_irreducible(Param p,int N)=
print_branch_irr_long(hermitian_form_irreducible(p),N)