<simple_character_table.at
<character_table_tensor.at

<character_table_B.at
<character_table_C.at
<character_table_D.at
<character_table_F.at
<character_table_G.at
<character_table_E6.at
<character_table_E7.at
<character_table_E8.at


set character_table_torus(RootDatum rd)=CharacterTable:
assert(rd.is_abelian,"Not a torus");
(Lie_type(rd),
1,    {order of class}
1,    {number of classes}
(int->classical_class):(int n):classical_class:().null_class,  {empty partition}
(int->string):(int n):"null",  {number of classes}
[rd.id_W],  {class_reps}
(int->int):(int n):1, {class orders}
((int,int)->int):(int m,int n):1, {class power}
[int]:[1],   {centralizer_orders}
[int]:[1], {class_sizes}
(int->classical_irrep):(int n):classical_irrep:().null_irrep, 
(int->string):(int n):"",{ irreducible_label}
[[int]]:[[]],  {sym_powers_reflection}
[int]:[0], { degrees}
[int]:[], {fake degrees}
mat:[[1]])

{including torus}
set character_table_simple(RootDatum rd)=CharacterTable:
if ct_verbose then prints("Computing character table for simple root datum: ", rd.nice_format) fi;
let ct=
let (letter,n)=simple_type(rd) in
if letter="A" then
 let ct=character_table_A(SL(n+1)) in ct
elif letter="B" then
 let ct_0=character_table_B(n) then
 ct=ct_0.update_degrees in ct
elif letter="C" then
 let ct_0=character_table_C(n) then
 ct=ct_0.update_degrees in ct
elif letter="D" then
 let ct_0=character_table_D(n) then
 ct=ct_0.update_degrees in ct
elif letter="F" then
 let ct=character_table_F4() in ct
elif letter="G" then character_table_G2()
elif letter="E" and n=6 then
 let ct_0=character_table_E6() then 
 ct=update_degrees(ct_0) in ct
elif letter="E" and n=7 then
 let ct_0=character_table_E7() then
 ct=update_degrees(ct_0) in ct
elif letter="E" and n=8 then
 let ct=character_table_E8() in ct
 elif is_abelian(rd) then
 character_table_torus(rd)
else error("case not covered")
fi
in
if ct_verbose then prints("Done computing character table") fi;ct






set character_table(RootDatum rd)=
if rd.is_abelian then character_table_torus(rd) else
let factors=simple_factors(rd) then
ct=character_table_simple(factors[0].derived) in
for i:#factors-1 from 1 do
 ct:=tensor(ct,character_table_simple(factors[i].derived)) od;ct fi

