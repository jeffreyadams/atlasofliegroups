<Wdelta.at
<synthetic.at
<extended_misc.at   { for ExtParam }
<extended.at
<extended_cross.at
<extended_cayley.at { for ext_Cayley_simple }

{ only use ext_cross_simple from extended_cross.at: }
forget test_ext_cross@(Param,[int],ExtParam)
forget ext_cross_1@(int,ExtParam)
forget ext_cross_2@(int,ExtParam)
forget ext_cross_3@(int,ExtParam)

{ the following would override the grass-roots function from synthetic.at
  by a call to the new built-in cross@(vec,Param); it should do the same thing
  (notably handle non-dominant gamma correctly) but somewhat more efficiently.
  Un-comment this if you prefer to use the new built-in function
set posroot_cross (int i, Param p) = Param:
  cross(root(root_datum(p),i),p)
}

{ cross action of element mat:w of Weyl group on parameters
  if w\in W(gamma) this is the usual cross action
  if w\not\in W(gamma) this has different (dominant) infinitesimal character
  also w given by sequence of simple root reflections, or
  w=s_beta for beta an arbitrary positive root

  Compare this function to posroot_cross@(int,KGBElt) from synthetic.rx
  the main difference if that |w| is applied to |gamma| here, whereas for
  integral cross actions (and Cayley transforms) |gamma| is unchanged.
  The call of |make_dominant_using_roots| is just a consequence of the change
  to |gamma|, performed for the somewhat doubtful reasons indicated below.
}
set cross (mat w, Param p) = Param:
  let (x0,,gamma) = %p { gamma is (assumend to be?) dominant }
  then rd = root_datum(real_form(x0))
  , x1=cross(w,x0) { apply matrix cross action on KGBElt, from synthetic.rx }
  { the provided w will be such that gamma(x1)=w*gamma is integrally-dominant }
  , grading_wt=gamma-lambda(p)+rho_r(x0)
  then (new_gamma,)=make_dominant_using_roots(rd, w*gamma)
  { w*gamma and new_gamma differ by a sum of roots, and are in the same
    integral Weyl chamber
    new_gamma is dominant
    this step is necessary because the software will apply equivalances to x1
    to make gamma(x1) dominant, which we don't want
    see Weyl_group.at:make_dominant
  }
  in parameter(x1,new_gamma - w*grading_wt + rho_r(x1), new_gamma)

{
  set cross ([int] w,Param p) = Param: cross(w_matrix(root_datum(p),w),p)
  set posroot_cross (int i, Param p) = Param:
    let w=reflection(root_datum(p),i) in cross(w,p)
}

{ cross action on extended parameters }

{ Cross action of w (matrix) on an extended parameter E
  Precondition: gamma integrally dominant, w in W^delta is such that w*gamma is
  (still standard:) positive on all positive imaginary coroots for cross(w,x)
  Does a cross action for the "integral part of w", and equivalence for the
  remaining part (mix of true cross action and equivalence of parameters).
  At the parameter level (x,lambda_rho,gamma), this first maps to the
  equivalent parameter (x1,lambda_rho1,w*gamma) where x1=cross(w,x) and
  lambda_rho1=w*lambda_rho+w*rho-r-w*rho_r(x)+rho_r(x1); then if w' in
  W(gamma) is such that w'w*gamma is again integrally dominant, applies cross
  action by the inverse of w', which gives a parameter equivalent to
  (x1,lambda_rho2,w'w*gamma), where lambda_rho2=lambda_rho1+w'w*gamma-w*gamma).
  [The latter uses alternative description of cross action:
  cross(w,(x,lr,gamma)) =equiv= (x,lr+w^{-1}*gamma-gamma,w^{-1}*gamma) ]

  This explains the expression for lambda_rho2 below

  For the expression for tau1, the relation to satisfy is (1-theta1)*tau1 =
  (1-delta)*lambda_rho2, and for this the terms w*rho-rho and gamma2-gamma1 in
  lambda_rho2 can be ignored, as delta commutes with w and fixes each of rho,
  gamma1, gamma2. The contribution (delta-1)*rho_r_shift/2 will then give the
  term rho_r_shift in lambda1 (but is it obviously a vec value?)

  The value for l is easy to deduce from x(E) (the more explicit expression
  gien in a comment can be found be expanding the computation of x(E)) and the
  necessary correction to t is similar (but dual) to that of tau

  Contrary to ext_cross_special below, this does not call ext_cross@
     extended_cross.rx
}
set ext_cross(
  mat w,ExtParam(ic,delta,gamma,lambda_rho,theta,g,l,,tau,t):E) =
    ExtParam:
  assert(w*delta=delta*w,"w not in W^delta");
  prints("ext_cross by w=",w); prints("E:"); display(E);
  let rd=root_datum(ic), x=x(E), w1= inverse(w), gamma1=w*gamma
  then rho=rho(rd), x1=cross(w,x) { call cross@(mat,KGBElt) from synthetic.rx }
  , gamma2 = integrally_dominant(rd,gamma1)
  then rho_r_shift = w*rho_r(x)-rho_r(x1), theta1=involution(x1)
  then lambda_rho2 =
    let lambda_rho1 = w*lambda_rho + (w*rho-rho-rho_r_shift)\1
    in  lambda_rho1 + ratvec_as_vec(gamma2 - gamma1)
  , tau1 = w*tau - ratvec_as_vec( (delta-1)*rho_r_shift/2 )
  , l1 = ratvec_as_vec(g-rho_check(rd)-torus_factor(x1))
  { l*w1 + ( (g-rho_check(rd))*(1-w1)-(rho_check_i(x)*w1-rho_check_i(x1)) )\1 }
  , t1 = t*w1 - ratvec_as_vec( (rho_check_i(x)*w1-rho_check_i(x1))*(delta-1)/2 )
  then result =
     ExtParam:(ic,delta,gamma2,lambda_rho2,theta1,g,l1,-^theta1,tau1,t1)
  in
  if not valid(result)
  then error(new_line+"invalid parameter in ext_cross, w=",w,format(E))
  else result
  fi

{ posroot i means i^th positive root in list of all positive roots,
  must be fixed by \delta_0
}
set posroot_ext_cross (int i, ExtParam E) = ExtParam:
  ext_cross(reflection(root_datum(E),i),E)

{ strongly simple: simple for all of G
  as opposed to simple, which might mean simple for the integral roots
}

{ cross action of product of strongly simple reflections,
  must give w\in W^{\delta_0}
}
set ext_cross (WeylElt w, ExtParam E) = ExtParam: ext_cross(w.matrix,E)

set ext_cross_special (int i, ExtParam E, bool show) = ExtParam:
( if show then prints("ext_cross_special with ", i); display(E) fi
; let special_types=["2i12","2i22", "2r21","2r22"]
  , type=ext_type(i,E)
  in if not in_string_list(type,special_types)
     then error("type: ",type,new_line
               ,"Looks like wrong type in ext_cross_special")
     fi
; let rd=root_datum(E)
  , alpha=root(integrality_datum(E),i) { a simple root in integral system }
  in
  if show then prints("in ext_cross_special with i=", i, "root=", alpha) fi
; if is_simple_root(rd,alpha)
  then { call |ext_cross_simple@(int,ExtParam)|, defined in extended_cross.at }
     ext_cross_simple(i,E)
  else let j=root_index(root_datum(E),alpha) in
    if show then prints("j=", j) fi;
    let (w,beta) = Wdelta_conjugate(root_datum(E), delta(E), j) in
    if show then prints("w=", w, " beta=", beta) fi;
    let E1=ext_cross(w,E) { use function defined above to move to simple }
    then (E2,shift)=translate_to_dominant(E1) { from extended_misc.rx }
    then i=root_index(integrality_datum(E2),beta) in
    if show
    then prints("E1="); valid(E1) { print any anomalies }; display(E1)
    ;    prints("E2="); valid(E2) { print any anomalies }; display(E2)
    ;    prints("i:", i)
    fi;
    let E3 = ext_cross_simple(i,E2)
    then E4 = { undo shift from translate_to_dominant }
       (E3.ic,E3.delta, E3.gamma-shift, E3.lambda_rho-shift, E3.theta
                      , E3.g, E3.l, E3.omega, E3.tau, E3.t)
    in ext_cross(/w,E4)
  fi
)

set ext_cross_special (int i, ExtParam E) = ExtParam:
  ext_cross_special(i,E,false)


{ now define ext_cross@(int,ExtParam) to replace the one defined in
  extended_cross.at
  the root is root(integrality_datum,i)
  make w= s, st, or sts in lengths 1,2,3, respectively
}

set ext_cross(int i, ExtParam E, bool show) = ExtParam:
( let rd=root_datum(E), alpha=root(integrality_datum(E),i) in
  if show then prints("in ext_cross with i=", i, "root=", alpha) fi
; let s=reflection(rd,alpha), length=ext_length(i,E), type=ext_type(i,E) in
  if show then prints("ext_cross: length ", length, " type ", type) fi
; if type="2i12" or type="2r21"
  then ext_cross_special(i,E)
  else
    let t=reflection(rd,delta(E)*alpha)
    then w = assert(length<=3,"something wrong") { choose for length=1,2,3: }
	     ; case length-1 in s, s*t, s*t*s esac
    in ext_cross(mat: w,E)
  fi
)

set ext_cross(int i, ExtParam E)= ExtParam: ext_cross(i,E,false)



{ extended Cayley transform by roots(G,i)
  must be integral, of type (?)
  find w\in W^\delta so that w\kappa is simple
  return inverse(w)\times c_{w\kappa}( w\times E)
  1i1,1i2s,1i1f,1r2;
  2Ci,2Cr, 2i11, 2i12, 2i12f,2i22, 2r22, 2r21f, 2r11;
  3Ci,3Cr,3i,3r
}
set posroot_ext_Cayley (int i,ExtParam E, bool show) = [ExtParam]:
( if show then prints("posroot_ext_Cayley i=", i);display(E) fi
; let (w,alpha) = Wdelta_conjugate(root_datum(E), delta(E), i)
{ w*root(G,i)=alpha is simple for G, w is in W^\delta }
  then E1=ext_cross(w,E)
  then (E2,shift) = translate_to_dominant(E1)
  then j = root_index(integrality_datum(E2),alpha)
  in
  if show
  then prints("E1=") ; prints(valid(E1)); display(E1)
  ;    prints("x(E1)=", x(E1))
  ;    prints("E2=") ; valid(E2); display(E2)
  ;    prints("j=",j); prints("Cayley transform of type:", ext_type(j,E2))
  fi
; for E3 in [ExtParam]: ext_Cayley_simple(j,E2)
  do let E4 = (E3.ic,E3.delta, E3.gamma-shift, E3.lambda_rho-shift, E3.theta
                             , E3.g, E3.l, E3.omega, E3.tau, E3.t)

     in ext_cross(/w,E4)
  od
)

set posroot_ext_Cayley (int i,ExtParam E) = [ExtParam]:
  posroot_ext_Cayley(i,E,false)

{ extended Cayley transform of any length, and not necessarily simple
  Cayley transform by j^th simple root of the *integral* roots
  if this root is also simple for G, then call ext_Cayley(...)
  otherwise, call nonintegral.rx:posroot_ext_Cayley
  (with the appropriate change in root number)
}
set ext_Cayley (int j, ExtParam E, bool show) = [ExtParam]:
( let type=ext_type(j,E)
  , cayley_types =
    [ "1i1", "1i2f", "1r1f", "1r2"
    , "2Ci", "2Cr" , "2i12", "2i22", "2r22", "2r21", "2r11"
    , "3Ci", "3Cr" , "3i"  , "3r"
    ]
  then do_Cayley = in_string_list(type,cayley_types)
  in
  if show
  then prints("ext_Cayley in nonintegral.rx with  E:",format(E))
  ;    prints("ext_Cayley, j=", j, ", " ,parameter(E))
  fi
; if not do_Cayley
  then if show then prints("Cayley of type ", type,  " not defined") fi; [E]
  else
    if show then prints
        ("nonintegral:ext_Cayley:extended Cayley transform of type ", type)
    fi
  ; let p=parameter(E) in
    assert(is_fixed(E.delta,p),"Parameter is not fixed by delta")
  ; let rd=root_datum(p), id=integrality_datum(p)
    then alpha = root(id,j) { a simple root of the integral subsystem }
    in
      if is_simple_root(rd,alpha)
      then { call ext_Cayley_simple@(int,ExtParam), extended_cayley.rx }
	ext_Cayley_simple(j,E)
      else { call posroot_ext_Cayley@(int,ExtParam) defined above }
	posroot_ext_Cayley(root_index(rd,alpha),E)
      fi
  fi
)

set ext_Cayley (int j, ExtParam E) = [ExtParam]:
  ext_Cayley(j,E,false)

