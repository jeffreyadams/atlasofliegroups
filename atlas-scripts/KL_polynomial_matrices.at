<basic.at
<polynomial.at { for |poly_plus@(vec,vec)| and friends, |i_poly_mat| type }
<ext_deform.at { for |cook_KL_block@([Param],,,,,)| }

set eval (i_poly_mat M, int k) = mat:
  matrix (shape(M), (int i,int j)int: eval(M[i][j], k))

{ map from index in B1 to matching index in B2, and whether it's well defined }
set permutation ([Param] B1, [Param] B2) = ([int],bool):
( if =#B2 then []
  else let find = find_in(B2[0].real_form,B2)
  in for p in B1
     do let c=find(p) in
        if c.< then return ([],false) {signal failure to locate some element}
	else c
	fi
     od
  fi
, true
)

set KL_P_polynomials (Param p) = i_poly_mat:
  let (,,P,polys)=KL_block(p) in
  for row in rows(P) do for entry in row do polys[entry] od od

set KL_P_polynomials_at_minus_one (Param p) = mat:
  eval(KL_P_polynomials(p),minus_1)

set KL_P_signed_polynomials (Param p) = i_poly_mat:
  let (block,,P,polys)=KL_block(p) in
  for row@i in rows(P) do for entry@j in row
  do minus_1^(block[j].length-block[i].length)*polys[entry] od od

set KL_P_signed_polynomials_at_minus_one (Param p) = mat:
  eval(KL_P_signed_polynomials(p),minus_1)

set KL_P_polynomials([Param] B)=i_poly_mat:
  let (block,,P,polys)=KL_block(B[0])
  then (perm,valid)=permutation(B,block), n=#block
  in assert(valid,"given [Param] B does not agree with block_of B[0]");
    for i:n do for j:n do polys[P[perm[i],perm[j]]] od od

set KL_P_polynomials_at_minus_one ([Param] B) = mat:
  eval(KL_P_polynomials(B),minus_1)

set KL_P_signed_polynomials ([Param] B) = i_poly_mat:
  let (block,,P,polys)=KL_block(B[0])
  then (perm,valid)=permutation(B,block), n=#block
  in assert(valid,"given [Param] B does not agree with block_of B[0]");
    for i:n do for j:n do
      minus_1^(block[j].length-block[i].length)* polys[P[perm[i],perm[j]]]
    od od

set KL_P_signed_polynomials_at_minus_one ([Param] B) = mat:
  eval(KL_P_signed_polynomials(B),minus_1)

set KL_Q_polynomials (Param p) = i_poly_mat:
  let (block,,M,polys) = dual_KL_block(p) then n=#block in
  for i:n do let col = M[i] in for j:n do polys[col[j]] od od { transpose }

set KL_Q_polynomials ([Param] B) = i_poly_mat:
  let (block,,M,polys)=dual_KL_block(B[0])
  then (perm,valid)=permutation(B,block), n=#block
  in  { transpose and apply permutation |perm| }
  for i:n do let col = M[perm[i]] in for j:n do polys[col[perm[j]]] od od

{                     twisted versions                                   }

set final_subset ([Param] B) = [Param]:
  ## for p in B do if is_final(p) then [p] else [] fi od


{ this is the twisted analogue of |KL_block@Param|. Originally called
  |ext_KL_block| the 'ext_' prefix is superflous since it is implied by the
  presence of |delta|, and is therefore dropped
}

{ undo signedness of |extended_KL_block|, using negative index for negated poly }
set KL_block (Param p, mat delta) = ([Param],mat,[vec]):
  let (block,P,polys) = extended_KL_block(p,delta) in
( block
, for col@j in P
  do let len_j=length(block[j]) in
     for e@i in col do minus_1^(len_j-length(block[i])) { undo signs } *e od
  od
, polys
)

set KL_P_polynomials (Param p, mat delta) = i_poly_mat:
   let (,P,polys) = KL_block(p,delta)
in for row in rows(P) { mat to i_pol_mat convention flip }
   do for index in row do if index.< then -polys[-index] else polys[index] fi od
   od

set KL_P_polynomials_at_minus_one (Param p, mat delta) = mat:
   let (,P,polys) = KL_block(p,delta)
   then pev=for Q in polys do eval(Q,minus_1) od
in for col in P do for index in col do
      if index.< then -pev[-index] else pev[index] fi
   od od

set KL_P_polynomials ([Param] B_fixed, mat delta) = i_poly_mat:
  let (block,P,polys)=KL_block(B_fixed~[0],delta)  {use ~ to give a maximal element in the block}
  then (perm,valid)=permutation(B_fixed,block), n=#block
in assert(valid,"given [Param] B does not agree with block_of B~[0]");
  for i:n do for j:n do let index=P[perm[i],perm[j]] in
     if index.< then -polys[-index] else polys[index] fi
  od od

set KL_P_polynomials_at_minus_one ([Param] B_fixed, mat delta) = mat:
  eval(KL_P_polynomials(B_fixed,delta),minus_1)

set KL_P_signed_polynomials (Param p, mat delta) = i_poly_mat:
   let (,P,polys) = extended_KL_block(p,delta) in
   for row in rows(P) { mat to i_pol_mat convention flip }
   do for index in row do polys[index] od
   od

set KL_P_signed_polynomials_at_minus_one (Param p, mat delta) = mat:
  eval(KL_P_signed_polynomials(p,delta),minus_1)

set KL_P_signed_polynomials([Param] B, mat delta) = i_poly_mat:
  assert(all(for p in B do is_fixed(delta,p) od)
        ,"not all parameters in B_fixed are fixed");
  let (block,P,polys)=extended_KL_block(B~[0],delta)
  then (perm,valid)=permutation(B,block), n=#block
in assert(valid,"given list of parameters does not for a block");
  for i:n do for j:n do polys[P[perm[i],perm[j]]] od od

set KL_P_signed_polynomials_at_minus_one([Param] B, mat delta) = mat:
  eval(KL_P_signed_polynomials(B,delta),minus_1)

{ since there is no "dual_extended_KL_block", define the Q-polynomials as
  inverse of the signed P-matrix
}
set KL_Q_polynomials (Param p, mat delta) = i_poly_mat:
  upper_unitriangular_inverse (KL_P_signed_polynomials(p,delta))
set KL_Q_polynomials ([Param] B, mat delta) = i_poly_mat:
  upper_unitriangular_inverse (KL_P_signed_polynomials(B,delta))
