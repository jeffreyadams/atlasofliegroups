{! Functions involving K-types (final tempered limit parameters) and
   K-highest weights.
   The main reference is Vogan, "Branching to a Maximal Compact Subgroup"
     [KHatHowe].
   See also the notes on "K-types in atlas" in the Dropbox.

   The main functions are:

1) highest_weights: Given a K_type tau=(x,lambda), find all K-highest weights
   corresponding to the K_#-types in the restriction of tau.

(x,lambda) -> {(x_K,mu)} multivalued; find one value (x_K,mu), then
   take the R(K)-orbit <-> |R(K)/R(K,mu)| K-highest weights. Here R(K,mu) is
   the stabilizer of mu in the R-group R(K) of K.

Algorithm:

i) If G is relatively split, Cartan is (relatively) split, all roots in the
   tau-invariant, this is the "G-spherical" case of KHatHowe, Section 8.

ii) If p is final standard limit tempered, it has a unique LKT,
    use theta_stable_data (see induction.at) to write p as cohomologically
    induced from a relatively split L.

iii.) Apply ii) to all terms of finalize(p.at_nu_0).


2) K_types: Given a KHighestWeight mu=(x,kappa), find all K_types containing
   the corresponding K_#-type.

   (x_K,mu) -> {tau=(x,lambda)} multivalued; find $\theta$-stable data
   (Q=LU,p_L=(x_L,lambda_L,0)) for one K-type tau first, then
   compute all (L-spherical) $(L\cap K)$-types p_L'=(x_L,lambda_L')
   with the same infinitesimal character. There will be
   |R(K,mu)| of them.

Algorithm:

   This is the Vogan algorithm, version in [KHatHowe] Section 13, a
   slight modification of Vogan's Big Green Book Prop. 5.3.3.

   Given (x_K,mu), compute mu+2rho_K(x_K), choose positive chamber for G,
   -> mu_0=mu+2rho_K(x_K)-rho; project on the given dominant Weyl chamber -> xi;
   then the simple roots contributing to difference between xi and
   mu_0 determine the $\theta$-stable parabolic Q=LU that is
   part of the $\theta$-stable data for tau=(x,lambda). The parameter for
   (relatively split) L is obtained from xi by a $\rho$-shift.
!}

<W_K.at
<induction.at
<representations.at
<center.at { for |Z_2@RealForm| }

set LKT_verbose=false
{ see K.at: K-types as final tempered limit parameters
  (x,lambda) <-> representations of K
  K_highest_weights.at: KHighestWeights (x,mu) <-> representations of K_#
}
{ KHighestWeight: mu    K_types tau
  see KHatHowe Section 4, especially Theorem 4.10
  notation:
    KHatHowe   Atlas
      T_{f0}    T_K0
      T_f       T_K=H^\delta
      T_fl      T_{K,large}

   R(K)=|K/K_#|=|T_{K,large}/T_K|

   given mu a character of T_K

   T_K \subset T_K(\mu) \subset T_{K,large}
   |-----a-------|--------b-------|
   ab=|R(K)|
   a=|R(K,mu)|,  b=|R(K)/R(K,mu)|
   software: R(K)=R_K_dom(x)
             R(K,mu)=R_K_dom(mu)

   {mu_i|i=1,...,b} characters of T_K  <->
     {\tilde\mu_j|j=1,...,a} irreps of T_{K,large}

   {mu_i}= orbit of R(K) acting acting on mu=mu_1, stabilizer is R(K,mu)
   {\tilde\mu_j|j=1,...,a} irreducible representations of T_{K,large}

   mu_i -> Ind_{T_K}^{T_{K,large}})(mu_i)= \sum_{j=1}^a \tilde\mu_j
   \tilde\mu_j -> Res^{T_{K,large}}_{T_K}(\tilde\mu_j)=\sum_{i=1}^a\mu_i

   mu_i -> a choices of extension to T_K(mu_i)
     -> induce irreducibly to T_{K,large}
     each mu_i (i=1,...,a) -> same set of \tilde\mu_j (j=1,...,b)
   dim(\tilde\mu_j)=|R(K)/R(K,mu)|
   mu_i -> tau(mu_i) irreducible of K_#,
      dimension given by Weyl dimension formula
   \tilde\mu_j -> \tau(\tilde\mu_j) irreducible of K
   dim(\tau(\tilde\mu_j))=dim(\tau(\mu_j))*b=dim(\tau(\mu_j))|R(K)/R(K,mu_j)|
     (See Theorem 4.10(1))
}

{. Equality of KHighestWeights; (x,mu)=(x',mu') iff x=x', and mu and mu'
   differ by (1-theta)X^* or compact Weyl group action. .}
set = (KHighestWeight (x,mu), KHighestWeight (y,tau)) = bool:
  real_form(x)=real_form(y) and
  x=y and
  ( let  K_0=K_0(x)
    , mu_1=project_K(x,mu)   {element of X^*(T_{K_0})}
    , tau_1=project_K(x,tau) {element of X^*(T_{K_0})}
    then (w_K_0,mu_2)=from_dominant(K_0,mu_1)
    in mu_2=dominant(K_0,tau_1) and
  { lift action of w up to H, and then compare projection of
    w\mu and \tau to X^*(H^\delta)=X^*/(1-delta)X^* }
    ( let w=lift_action(w_K_0,x) then mu_3=w*mu, tau_3=w*tau in
      if LKT_verbose
      then prints("w:", w);
	   prints("mu: ", mu, " tau :", tau);
	   prints("mu_1: ", mu_1, " tau_1 :", tau_1);
	   prints("mu_2: ", mu_2, " tau_2 :", mu_2);
	   prints("mu_3: ", mu_3, " tau_3 :", tau_3)
      fi
    ; in_lattice((1-involution(cross(w,x))),mu_3-tau_3)
    )
  )

{. List of LKTs (as final tempered limit parameters) of a module given by a
   parameter. .}
set LKTs (Param p) = [K_Type]:
  for q in monomials(finalize(p.at_nu_0)) do K_type(q) od

{. LKT of module given by a parameter, if it is unique
  (otherwise error message) .}
set LKT (Param p) = K_Type:
  let lkts=LKTs(p) in assert(#lkts=1,"More than one LKT; use LKTs"); lkts[0]

{---------------- map from K_types to KHighestWeights ----------------}


{. Test if parameter p for G is G-spherical: G must be rel. split, all roots
   in tau(p). .}
set is_split_spherical(Param p)=bool:
  assert(is_final(p), "parameter is not final");
  is_relatively_split(real_form(p)) and
  #x(p) = KGB_size(real_form(p))-1 and
  all(for alpha_check in simple_coroots(root_datum(p))
      do is_even(rat_as_int( (lambda(p)-rho(root_datum(p))) *alpha_check))
      od)

{. Test if a K-type is G-spherical: must be LKT of G-spherical p. .}
set is_split_spherical(K_Type p)=bool:
   is_split_spherical(parameter(p))

{. Highest weight of a G-spherical K-type (necessarily unique). .}
set highest_weight_split_spherical(K_Type p)=KHighestWeight:
  assert(is_split_spherical(p), "p is not a spherical rep of a split group");
  let x=x(p) then x_K=canonical_x_K(x)
  then rd=root_datum(p)
  then i_rd=root_datum(simple_from_positive(imaginary_sys(x_K)))
  then fw=fundamental_weights(i_rd), mu=ratvec:lambda(p)-rho(rd)
  in { prints("mu=", mu); }
  for alpha_check@i in simple_coroots(i_rd) do mu-:=mu*alpha_check*fw[i] od;
{ prints("mu modified=", mu); }
  assert(all(for alpha_check in simple_coroots(i_rd) do mu*alpha_check=0 od)
        ,"error, mu isn't orthogonal to all roots");
  (KGB(real_form(x),0),ratvec_as_vec(mu))

{. Highest weight of LKT of a G-spherical parameter (is unique). .}
set highest_weight_split_spherical (Param p) = KHighestWeight:
  highest_weight_split_spherical(K_type(p.at_nu_0))

{. Highest weight of LKT of G-spherical K-type w.r.t. x_K (is unique). .}
set highest_weight_split_spherical (K_Type p,KGBElt x_K) = KHighestWeight:
  let (x,mu)=highest_weight_split_spherical(p) in move_weight((x,mu),x_K)

{. Highest weight of LKT of a G-spherical parameter w.r.t. x_K (is unique). .}
set highest_weight_split_spherical (Param p,KGBElt x_K) = KHighestWeight:
  let (x,mu)=highest_weight_split_spherical(p) in move_weight((x,mu),x_K)

{. This function returns just ONE KHighestWeight of a K-type
  (auxiliary function). .}
set highest_weight_one (K_Type p) = KHighestWeight:
(  assert(is_semifinal(parameter(p)),"parameter has singular real parity roots")
;  p:=p.to_no_Cminus
;  let (Q,pL)=theta_stable_data(parameter(p))
   then (x_L,mu_L)=highest_weight_split_spherical(pL)
   then x_G=x_min(Q)
   then mu_G=mu_L+two_rho_u_cap_s(Q,x_G)
{ need version of 2*rho_u_cap_s(Q) which is integral, see thetastable.at}
{ this might be a ratvec, denominator 1/2, by restriction it defines a
  character  of T_{K_0}
  need to replace mu_G\in 1/2X^*theta with mu_G_integral\in X^*
  so that restriction takes mu_G_integral to mu_G restricted to T_{K_0}
}
{ then ()=prints("mu_L:",mu_L,new_line, " mu_G", mu_G, new_line,
     "2*rho_u_cap_s(Q)", 2*rho_u_cap_s(Q,x_G), new_line,
     "two_rho_u_cap_s", two_rho_u_cap_s(Q,x_G)) }
   in (x_G,mu_G)
)

{. ONE KHighestWeight of a K-type w.r.t. x_K (auxiliary function). .}
set highest_weight_one (K_Type p,KGBElt x_K) = KHighestWeight:
  move_weight(highest_weight_one(p),x_K)

{. All highest weights of a K-type; R-group acts on one KHighestWeight of
   previous function (number of terms is |R(K)/R(K,mu)|). .}
set highest_weights (K_Type p) = [KHighestWeight]:
  R_K_dom_mu_orbit(highest_weight_one(p))

{. All highest weights of a K-type w.r.t. x_K. .}
set highest_weights (K_Type p,KGBElt x_K) = [KHighestWeight]:
  for mu in highest_weights(p) do move_weight(mu,x_K) od

{. List of all highest weights of all LKTs of a parameter. .}
set highest_weights (Param p) = [KHighestWeight]:
  let result=[KHighestWeight]: [] in
  for q in LKTs(p) do result##:=highest_weights(q) od;
  result

{. List of all highest weights of all LKTs of a parameter w.r.t. x_K. .}
set highest_weights (Param p,KGBElt x_K) = [KHighestWeight]:
  for (x,mu) in highest_weights(p) do move_weight((x,mu),x_K) od

{. Unique highest weight of a K-type (or error if not unique). .}
set highest_weight (K_Type p) = KHighestWeight:
  let hwts=highest_weights(p) in
  assert(#hwts=1,"highest weight it not unique, use highest_weights instead");
  hwts[0]

{. Unique highest weight of a K-type w.r.t. x_K (or error if not unique). .}
set highest_weight (K_Type p,KGBElt x_K) = KHighestWeight:
  let hwts=highest_weights(p,x_K) in
  assert(#hwts=1,"highest weight it not unique, use highest_weights instead");
  hwts[0]

{. Unique highest weight of (unique) LKT of a parameter
  (or error if not unique). .}
set highest_weight (Param p) = KHighestWeight:
  let hws=highest_weights(p) in
  assert(#hws=1,"highest weight it not unique, use highest_weights instead");
  hws[0]




{ -----------------KHighestWeight to K_types------------------ }

{ -----------------------Vogan algorithm--------------------- }



{function called by project_on_dominant_cone}
{. (Auxiliary function) .}
set centralizer(KGBElt x,ratvec v) = (KGBElt,RootDatum):
  assert(v*involution(x)=v, "v is not theta-stable");
  let rd=root_datum(x)
  then roots = columns_with((vec alpha): =alpha*v, posroots(rd))
  then coroots = rank(rd) # for alpha in roots do coroot(rd,alpha) od
  then subrd = root_datum(simple_from_positive(roots,coroots))
  in (KGB_elt(subrd,involution(x),torus_factor(x)),subrd)

{function called by project_on_dominant_cone}
{. (Auxiliary function) .}
set find_nci_root (KGBElt x,ratvec tau) = int:
  let rd=root_datum(x)
  then sr=simple_roots(rd), scr=simple_coroots(rd),ssr=semisimple_rank(rd)
  then j= first(ssr, (int i)bool:
                     scr[i]*tau<0 and is_noncompact_imaginary(x)(sr[i]) )
  in if j>=0 then j
  else j:=
    first(ssr
         , (int i)bool:
            scr[i]*tau<0 and
            is_complex(i,x) and {<alpha,theta(alpha^vee)>=-1}
            scr[i]*involution(x)*sr[i] = -1 and
            is_noncompact(x)( (1+involution(x))*sr[i] ) { this is a root because alpha and theta(alpha) generate a subsystem of type A_2, so their sum is a root }
         )
  ; prints("j=",j);assert(>=j,"error in find_nci_root")
  ; root_index(rd,sr[j]+involution(x)*sr[j])
  fi

{(x,mu) is a KHighestWeight (see top of this file)
 x in the distinguished fiber, theta_x=delta
 mu\in X^*, viewed modulo (1-delta)X^*
in (X^*)^delta project it to X^*(T_K0) where T_K0=identity component of H^delta}
{(x,mu) equivalent to (wx,w\mu) so WLOG mu is G-dominant}

{ sum of the roots of K as an element of (X^*)^delta\otimes Q
  (it can be half-integral)
  x is assumed to be in the distinguished fiber, defining K
  in particular alpha complex posroot implies theta(alpha) is a posroot too
  tworho_K(x)\in X^* and tworho_K_fixed(x)\in 1/2(X^*)^delta map
  to same element 2*rho_K(x) in X^*(T_{K_0})
}

{. Sum of the roots of K as an element of $(X^*)^{\delta}\otimes\mathbb Q$
(this may be half-integral); x must be in the distinguished fiber. .}
set tworho_K (KGBElt x) = ratvec:
( if not in_distinguished_fiber(x)
  then prints("Warning: x is not in distinguished fiber") fi
; let G=real_form(x) in sum(compact_posroots(x)) + sum(complex_posroots(x))/2
)

{. Vogan algorithm to project KHighestWeight (x,mu) on dominant cone; returns
   (x',mu+2rho_K(x)-rho,tau) with tau dominant and x' corresponding to the new
   Weyl chamber. .}
set project_on_dominant_cone (KGBElt x, ratvec mu) = (KGBElt,ratvec,ratvec):
{ let ()=prints("project_on_dominant_cone with x=", x, " mu=", mu) in }
  let rd=root_datum(x)
  then (w,mu_1) = from_dominant
      (rd,mu:=(1+involution(x))*mu/2) { make |mu| zero on the split part of h }
  then x_1=cross(inverse(w),x)
{ then ()=prints("mu:", mu); prints("x: ", x); prints("mu_1:", mu_1);
  prints("x_1: ", x_1)
}
{ Note: tworho_K (x) (above) is in (\h^*)^theta,
  while rho_K(x) is in \t^*, need the former
}
  then mu_2=mu_1+tworho_K (x_1)
{ then ()=prints("mu_2:", mu_2); }
  then y=chamber(rd,mu_2)
  then mu_3=mu_2-y*rho(rd), y1=y.inverse
{ then ()=prints("mu_3=", mu_3) }
  then
    rec_fun f(KGBElt x, ratvec mu_3_orig,ratvec tau) = (KGBElt,ratvec,ratvec):
      let rd_x=root_datum(x) in { may differ from |rd| in the recursion }
{     prints();prints("f with: ", x, " ", real_form(x), " tau= ", tau);
      prints("rd:", rd);
      prints("tau=",tau);
      prints("x=",x, "on real form:", real_form(x))
}
      if is_dominant(rd,tau)
      then {return this triple:}
        ( cross(y1,x_1), y1*mu_3, tau)
      else
         let j=find_nci_root(x,tau)
{        then ()=prints("got root: ", j, ", ", posroots(rd_x)[j]) }
{        then ()=prints("beta=", posroots(rd_x)[j]) }
         then new_tau=tau-poscoroots(rd_x)[j]*tau*posroots(rd_x)[j]/2
{        then ()=prints("new_tau=",new_tau)}
         then (sub_x,)=centralizer(x,poscoroots(rd_x)[j])
         in f(sub_x,mu_3_orig,new_tau)
       fi
   in f(cross(y1,x_1),mu_3,y1*mu_3)

{. Vogan algorithm; previous function in case mu is given as a vec,
  rather than ratvec. .}
set project_on_dominant_cone (KGBElt x, vec mu) = (KGBElt,ratvec,ratvec):
  project_on_dominant_cone(x,ratvec:mu)

{ possibly multivalued, coming from G-spherical case }

{ This function is the same as basis_lambda_differential_0 in all_parameters.at
   List of weights representative of a set of generators of the elementary
   2-group ker(1+theta(x))/im(1-theta(x)).
characters_order_2@KGBElt
returns [v_0,...,v_k], v_i\in X^*,
the characters of H^{theta_x} with differential 0
are \sum a_i v_i with a_i=0,1 (or [] -> [0,...,0])
}

{. (Auxiliary function) .}
set characters_order_2 (KGBElt x) = [vec]:
   let theta=involution(x) then K=kernel(1+theta)
   then (A,v)=adapted_basis(in_lattice_basis(K,1-theta)) then B=K*A
{prints("K=",K);
prints("A=",A);
prints("v=",v);
prints ("B=",B);}
   in ## for f@i in v do if f=2 then [B[i]] else [] fi od

{. All G-spherical K-types with same differential as given one. .}
set all_G_spherical_same_differential (K_Type p) = [K_Type]:
{ assert(is_split_spherical(p),
         "parameter is not spherical for a (relatively) split group"); }
let chars=characters_order_2(x(p)) then
coeffs=generate_all_binary(#chars) then
scr=simple_coroots(root_datum(p)) then
Z_2=Z_2(real_form(p)) then
result=[K_Type]:[] in
 for v in coeffs do
 let mu=vec:null(rank(root_datum(x(p)))) in
  for j:#v do mu+:=v[j]*chars[j] od;
  if all(for alpha_check in scr do is_even(alpha_check*mu) od) and
  all(for h in Z_2 do is_even(mu*h) od)
  then result#:=(x(p),lambda(p)+mu)
  fi od;result

{. All G-spherical K-types with same differential as the LKT of parameter p. .}
set all_G_spherical_same_differential (Param p) = [K_Type]:
  all_G_spherical_same_differential(K_type(p.at_nu_0))

{ see KHatHowe, end of Section 13
  mu-> phi=lambda-mu_2-2rho_c+rho
    (=lambda-mu_3_orig from project_on_dominant_cone)
 write phi is a non-negative rational combination of simple roots
 the simple roots with strictly positive coefficient give the Levi factor L,
 and q=l+u is the corresponding standard parabolic
}

{. Parabolic attached to KHighestWeight by Vogan algorithm. .}
set parabolic_LKT (KHighestWeight (x,mu)) = Parabolic:
  let rd=root_datum(x), (y,mu_3_orig,lambda) = project_on_dominant_cone(x,mu)
  then diff=lambda-mu_3_orig
  then S= list(semisimple_rank(rd), (int i): fundamental_coweight(rd,i)*diff>0)
  in Parabolic:(S,y)

{ go from KHighestWeight mu to K_types [K_Type]  mu -> [p_1,...,p_r]
  multivalued: highest_weight(p_i)=mu
 algorithm:
 1) G-spherical case: mu\in X^*/(1-delta)X^*, satisfying <mu,\alpha^\vee>=0
    for all alpha in Delta(G,T_{K_0})
See KHatHowe, Section 15
}

{. (Auxiliary function) .}
set make_strongly_dominant (KHighestWeight mu,KGBElt x_Q) = KHighestWeight:
  let (x,tau)=mu then w=cross_divide(x_Q,x) in (cross(w,x),w*tau)

{ this function takes KHighestWeight mu -> |R(K,mu)| K_types,
  see top of this file
  first replace mu with strongly dominant mu in same R_K_dom_mu orbit
}
{. All K_types with the same KHighestWeight. .}
set K_types (KHighestWeight mu_in)= [K_Type]:
  let (x,v)=mu_in then G=real_form(x) in
  let mu=move_weight(mu_in,KGB(G,0)) in
  let (mu,,,)=make_strongly_dominant(mu) in
  let  Q=parabolic_LKT(mu)  {Q is theta-stable}
  in
  assert(is_parabolic_theta_stable(Q), "Q is not theta stable");
  let x_Q=x_min(Q)
  then (x,tau) = mu:=make_strongly_dominant(mu,x_Q)
  , L=Levi(Q)
  then { L is relatively split }
  ()=if LKT_verbose then
     prints("Q=", Q);
     prints("mu:", mu);
     prints("L=", L);
     prints("rho_u_cap_s(Q)", rho_u_cap_s(Q,x));
     prints("rho_l(Q)", rho_l(Q));
     prints("tau: ", tau);
     prints("arg:", tau-2*rho_u_cap_s(Q,x)+rho_l(Q)) fi then
  ()=assert(is_relatively_split(L),"L is not relatively split") then
  pL=monomials(finalize(parameter(KGB(L,#KGB(L)-1),
	                tau-two_rho_u_cap_s(Q,x)+rho_l(Q), null(rank(L)))))
  then
  ()=if LKT_verbose then
     prints("pL:", pL);
     prints("Q=:", Q) fi then
     result=[K_Type]:[]
  in  assert(#pL=1,"finalized parameter has more than one term");
  let all_pL=all_G_spherical_same_differential(pL[0]) in
  for qL in all_pL
  do  let ()=if LKT_verbose then prints("qL:", qL) fi then
     ind=monomials(theta_induce_standard(parameter(qL),real_form(x))) in
{    let ()=prints("induced:", ind) in}
    assert(#ind=1,"induced has more than one term");
    result#:=K_type(ind[0])
  od; result

{. K_type with given KHighestWeight if unique (otherwise error). .}
set K_type (KHighestWeight(x,mu)) = K_Type:
  let ktypes=K_types(x,mu) in
  assert(#ktypes=1,
      ##["more than one K-type maps to this KHighestWeight;", new_line,
       "use K_types to get them all"]); ktypes[0]

{-----------------KHighestWeight to K0_param --------------------------}

{. Parameter for (the RealForm K_0) of the K_0-type with highest weight
   (the restriction of) KHighestWeight mu. .}
set K0_param_from_highest_weight (KHighestWeight(x,mu)) = Param:
  finite_dimensional(K_0(x),project_K(real_form(x),mu))

{ dimension of KHighestWeight=dimension of representation of K_#
                             =dimension of representation of K_0,
			        given by Weyl dimension formula }

{ dimension_rat allows for dimension up to 2^63-1}
{. Dimension of the K_#-type with KHighestWeight mu. .}
set dimension_rat (KHighestWeight mu) = rat:dimension_rat(K0_param_from_highest_weight(mu))
set dimension (KHighestWeight mu) = int:dimension(K0_param_from_highest_weight(mu))

{. Dimension of a K-type. .}
set dimension_rat (K_Type p) = rat:
let hw=highest_weights(p) then
mu=hw[0] then
(x,)=mu in dimension_rat(mu)*#R_K_dom(x)/#R_K_dom_mu(mu)

set dimension (K_Type p) = int: rat_as_int(dimension_rat(p))

{ given mu in X^*(T_K)=X^*(H)/(1-delta)X^*(H), choose representative in X^*(H)
  giving a KHighestWeight (x,mu) cannot necessarily take mu to be \delta-fixed
}

{. Given the highest weight for K0 and a KGB element in the distinguished fiber
   for the corresponding group G, compute (one of) the highest weight(s) for K;
   (there may be more than one if K# is not equal K_0); in the unequal rank
   case, mu_K will have fewer coordinates than the K-weight). .}
set K_highest_weight_from_K0_weight (KGBElt x,vec mu_K) = KHighestWeight:
  (x, { vec: } mu_K*left_inverse(injection_from_K_matrix(x)) )

{ this may be a ratvec, not vec }
{. (Auxiliary function) .}
set fundamental_weights_K_H (KGBElt x) = [ratvec]:
  let M=left_inverse(injection_from_K_matrix(x)) in
  for v in fundamental_weights(K_0(x)) do v*M od

{. ONE K_0-type in the restriction of a K_type to the identity component K_0 of K;
   x_K must be in the fundamental fiber. .}
set K0_param (K_Type p,KGBElt x_K) = Param:
  let (,tau)=highest_weight_one(p,x_K) in
  finite_dimensional(K_0(x_K),project_K(x_K,tau))

{. ONE K_0-type in the restriction of a K_type to the identity component K_0 of K;
   x_K is taken to be KGB element #0. .}
set K0_param (K_Type p) = Param:
  K0_param(p,KGB(real_form(x(p)),0))

{. All K_0-types in the restriction of the LKTs of parameter p to K_0; x_K must
be in the distinguished fiber. .}
set K0_params (Param p,KGBElt x_K) = [Param]:
  for (,tau) in highest_weights(p,x_K)
  do finite_dimensional(K_0(x_K),project_K(x_K,tau)) od

{. All K_0-types in the restriction of the LKTs of parameter p to K_0; x_K is taken
   to be KGB element #0. .}
set K0_params (Param p) = [Param]:
  K0_params(p,KGB(real_form(x(p)),0))

{. Unique K_0-type in the restriction of (unique) LKT to K_0 (error if not unique). .}
set K0_param (Param p,KGBElt x_K) = Param:
  let K0_prms=K0_params(p,x_K) in
  assert(#K0_prms=1,"Parameter has more than one K0 parameter, use K0_param");
  K0_prms[0]

{. Unique K_0-type in the restriction of (unique) LKT to K_0 (error if not unique). .}
set K0_param (Param p) = Param:
  K0_param(p,KGB(real_form(x(p)),0))

{. (Auxiliary function) .}
set fundamental_weight_coordinates (KHighestWeight (x,mu)) = vec:
  mu*simple_coroots(K_0(x))

{ if possible, take weight of K_0, in fundamental weight coordinates, to
  KHighestWeight (x,mu) }
{. (Auxiliary function) .}
set K_highest_weight_from_fundamental_weights(KGBElt x,vec tau) =
    KHighestWeight:
  let K_0=K_0(x), fw=fundamental_weights_K_H(x)
  , weight = ratvec: x.real_form.semisimple_rank.null
  in for i:#tau do weight+:=tau[i]*fw[i] od;
  assert(is_integer(weight),"Weight is not integral");
  (x,ratvec_as_vec(weight))

{. List of the dimensions of the K_0-types in the restriction of the LKTs of parameter p. .}
set dimensions (Param p, KGBElt x_K) = [int]:
  for pi in K0_params(p,x_K) do dimension(pi) od

{. List of the dimensions of the K_0-types in the restriction of the LKTs of parameter p. .}
set dimensions (Param p) = [int]:   dimensions(p,KGB(real_form(p),0))

{. List of the dimensions of the K_0-types in the restriction of the LKTs of
   a list of parameters. .}
set dimensions ([Param] B)= [[int]]: for p in B do dimensions(p) od
