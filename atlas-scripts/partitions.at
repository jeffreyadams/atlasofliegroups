<basic.at
<sort.at { for |reverse_sort@[int]| }

set_type Partition = [int]   {partition a_1\ge a_2\ge ... a_n>0}

set fac (int n) = int: let p=1 in for i:n-1 from 2 do p *:=i od; p

{ transpose of a partition (maybe passed with nonstandard order of parts) }
set transpose (Partition P) = Partition:
  if #P=0 then []
  else P:=reverse_sort(P) { ensure parts are in weakly decreasing order }
  ; for i:P[0] do binary_search_first((int j)bool:P[j]<=i,0,#P) od
  fi

set size (Partition P) =int: sum(vec: P)

set hook_length (Partition P, int i, int j) =int:
  let arm = P[i]-j, leg = transpose(P)[j]-i in arm + leg -1

set dim_rep (Partition P) = int: { don't try this for large parititions }
  let dim=fac(size(P)) in
  for i:#P do for j:P[i] do dim \:= hook_length(P,i,j) od od; dim

{ all weak compositions of numbers <=limit into n parts }
set rec_fun compositions_le (int limit, int n) = [[int]]:
  if =n then [[]] { one empty composition (0 parts) }
  else let result = [[int]]: [] in
    for last:limit+1
    do
      for rest in compositions_le(limit-last,n-1) do result #:= rest#last od
    od; result
  fi
