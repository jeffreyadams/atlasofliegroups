
{ KL stuff, including character formulas and composition series
  This implementation seeks to avoid using KL_block, and instead uses
  KL_sum_at_s, as this function stores earlier results
  Also (compared to old implementation) no regular/singular case distinction
}

<basic.at

{
  Basic object: column of KL matrix (P-matrix), of polynomials evaluated as s,
  which by setting s=1 gives formula for irreducible as sum of standards

  main functions:

  character_formula(p): irreducible(p) as sum of standards
  composition_series(p): standard(p) as sum of irreducibles

  signed_KL_mat_at_1(p): signed P-matrix evaluated at 1 (integral matrix)
  KL_inverse_mat_at_1(p): Q-matrix evaluated at 1 (integral matrix)

  also
    print_character_formula,print_composition_series
}

{ ------------------------------------------------------------------- }

set character_formula (Param p) = ParamPol: s_to_1(KL_sum_at_s(p))
set character_formula (ParamPol P) = ParamPol: map(character_formula@Param,P)

{ ------------------------------------------------------------------- }

{ composition series }

set composition_series(ParamPol P) = ParamPol:
  null_module(P)+
  while !=P { non null module }
  do let (coef,p):term=first_term(P) in P -:= coef*character_formula(p); term
  od

set composition_series (Param p) = ParamPol: composition_series(ParamPol: p)

set tabulate_at_1 ([Param] block, (Param->ParamPol) f) = mat:
  for y in block { y determines a column of the result }
  do let fy=f(y) in for x in block do fy[x].s_to_1 od
  od

set signed_KL_mat_at_1(Param p) = mat:
  tabulate_at_1(partial_block(p), character_formula@Param)

set KL_inverse_mat_at_1(Param p) = mat:
  tabulate_at_1(partial_block(p), composition_series@Param)

{ versions that do the whole block rather than a partial block }
set full_signed_KL_mat_at_1(Param p) = mat:
  tabulate_at_1(block_of(p),character_formula@Param)
set full_KL_inverse_mat_at_1(Param p) = mat:
  tabulate_at_1(block_of(p),composition_series@Param)


set print_formatted (ParamPol P) = void:
  for w@p in P do prints(split_factor_format(w),"*",p) od

set print_character_formula (Param p) = void:
  print_formatted(character_formula(p))

set print_composition_series(Param p) = void:
  print_formatted(composition_series(p))

set print_with_length (ParamPol P) = void:
  for c@p in P do prints(c.split_factor_format, "*"  , p, " ", p.length) od

{ print out high length terms as they become available }
set composition_series_verbose (ParamPol P) = ParamPol:
   let result=null_module(P), max=max(for p in monomials(P) do length(p) od)
in for L:max+1 ~ { reverse }
   do prints("Length: ", L)
   ;  let result_new=null_module(P)
   in for c@p in P
      do if length(p)=L then result_new +:=c*composition_series(p) fi
      od
   ;  result := result+result_new
   ;  prints("terms in result of length ", L, ":")
   ;  for c@p in result
      do if length(p)=L
         then prints(c.split_factor_format, "*",p, " ", p.length)
	 fi
      od
   od ; prints("result:"); print_with_length(result); result

{ simpler and faster: trace progress while computing |composition_series| }
set composition_series_trace (ParamPol P) = ParamPol:
  null_module(P)+
  while !=P { non null module }
  do let (coef,p):term=first_term(P)
  in P -:= coef*character_formula(p)
  ; prints(coef.int_part,"*",p," [",height(p),"]") { coefficients are integer }
  ; term
  od
