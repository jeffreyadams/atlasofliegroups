<basic.at
<combinatorics.at
<W_classes.at
<class_tables.at { for |class_table_E7| }
<character_tables.at { for type |CharacterTable| }

{ To save space we shall list only half of the characters, in Magma ordering.
  The first is the sign character, and the missing characters are formed from
  the given ones by tensoring with this sign character. We just need to indicate
  the indices in the Magma numbering of the given characters; the tensor
  products will give the characters at the missing indices, in increasing order.
}
set E7_positions = [int]:
[1,3,5,9,8,11,15,14,17,19,21,27,24,26,29
,31,33,35,37,41,40,43,47,46,49,51,53,55,57,59]

{ the characters in the subset |E7_positions| under Magma numbering }
set !e7_half_table = [vec]: { 60 entries each, broken 20|20|20 across lines }
[[1,-1,-1,1,1,-1,1,-1,1,-1,1,1,1,1,-1,-1,-1,1,1,1
 ,-1,1,-1,1,-1,-1,-1,-1,1,1,-1,-1,1,1,-1,1,-1,-1,1,1
 ,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,1,-1,1,-1,1,-1,-1] { 1:1a', sign character }
,[7,-7,5,-5,-1,1,3,-3,-1,1,4,-2,1,3,-3,3,-1,1,-3,-1
 ,1,1,-1,2,-4,2,2,-2,2,-2,-1,-2,2,0,0,1,-1,1,-1,-1
 ,1,0,-1,1,1,-1,1,-2,0,0,0,0,2,-2,0,0,0,-1,-1,1] { 3:7a', refection character }
,[15,15,-5,-5,7,7,3,3,-1,-1,0,-3,3,-1,-1,1,-3,-3,1,3
 ,3,1,1,0,0,-3,-2,-2,-2,-2,3,1,1,0,0,1,1,1,1,-1
 ,-1,1,-1,-1,1,1,0,0,0,0,-2,-2,0,0,-1,-1,1,0,0,0] { 5:15a}
,[21,-21,11,-11,5,-5,5,-5,-3,3,6,3,0,1,-1,3,3,-3,-3,1
 ,-1,1,-1,1,-6,-3,2,-2,2,-2,0,1,-1,2,-2,-2,2,-2,2,0
 ,0,0,1,-1,1,-1,0,-1,-1,1,0,0,0,0,-1,1,0,1,0,-1] { 9:21b' }
,[21,21,9,9,-3,-3,1,1,-3,-3,6,3,0,5,5,3,-1,-1,3,1
 ,1,-1,-1,1,6,3,0,0,0,0,0,3,3,-2,-2,0,0,0,0,0
 ,0,0,1,1,-1,-1,0,1,-1,-1,0,0,2,2,-1,-1,0,1,0,1] { 8:21a }
,[27,27,15,15,3,3,7,7,3,3,9,0,0,3,3,5,1,1,5,-1
 ,-1,1,1,2,9,0,3,3,3,3,0,0,0,1,1,0,0,0,0,0
 ,0,-1,-1,-1,1,1,0,2,0,0,-1,-1,1,1,0,0,-1,-1,0,-1] { 11:27a }
,[35,35,15,15,11,11,7,7,3,3,5,-1,2,-1,-1,1,5,5,1,3
 ,3,1,1,0,5,-1,3,-1,-1,3,2,-1,-1,1,1,0,0,2,2,0
 ,0,0,1,1,-1,-1,-1,0,0,0,1,1,-1,-1,-1,-1,0,0,-1,0] {15:35b }
,[35,-35,5,-5,3,-3,-5,5,3,-3,5,-1,2,7,-7,1,1,-1,-1,-1
 ,1,-1,1,0,-5,1,-1,3,-3,1,-2,-3,3,1,-1,-2,2,0,0,0
 ,0,0,-1,1,-1,1,-1,0,0,0,1,-1,1,-1,-1,1,0,0,1,0] { 14:35a' }
,[56,-56,24,-24,-8,8,8,-8,0,0,11,2,2,0,0,4,-4,4,-4,0
 ,0,0,0,1,-11,-2,3,-1,1,-3,-2,2,-2,-1,1,0,0,2,-2,0
 ,0,0,0,0,0,0,-1,-1,1,-1,1,-1,-1,1,0,0,0,1,1,-1] {17:56a'}
,[70,-70,10,-10,-10,10,6,-6,-2,2,-5,7,1,2,-2,-2,-2,2,2,2
 ,-2,-2,2,0,5,-7,1,1,-1,-1,-1,1,-1,3,-3,-1,1,1,-1,1
 ,-1,0,0,0,0,0,1,0,0,0,1,-1,1,-1,1,-1,0,0,-1,0] { 19: }
,[84,84,4,4,20,20,4,4,4,4,-6,3,3,4,4,0,0,0,0,4
 ,4,0,0,-1,-6,3,-2,2,2,-2,3,-1,-1,-2,-2,1,1,-1,-1,1
 ,1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,1,1,0,-1,0,-1] { 21:84a }
,[105,-105,-25,25,-7,7,9,-9,1,-1,0,6,3,-3,3,3,3,-3,-3,-3
 ,3,1,-1,0,0,-6,-4,4,-4,4,-3,-2,2,0,0,1,-1,1,-1,1
 ,-1,0,1,-1,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] { 27:105b' }
,[105,-105,35,-35,1,-1,5,-5,1,-1,15,-3,-3,5,-5,5,1,-1,-5,1
 ,-1,-1,1,0,-15,3,-1,-1,1,1,3,-1,1,-1,1,1,-1,-1,1,1
 ,-1,0,1,-1,-1,1,0,0,0,0,-1,1,1,-1,1,-1,0,0,0,0] { 24:105a' }
,[105,-105,-5,5,17,-17,-3,3,-7,7,0,6,3,-3,3,1,-3,3,-1,1
 ,-1,-1,1,0,0,-6,-2,-2,2,2,-3,-2,2,0,0,-1,1,1,-1,-1
 ,1,0,1,-1,-1,1,0,0,0,0,-2,2,0,0,0,0,0,0,0,0] { 26:105' }
,[120,120,40,40,-8,-8,8,8,0,0,15,-6,0,0,0,4,-4,-4,4,0
 ,0,0,0,0,15,-6,1,1,1,1,0,-2,-2,-1,-1,-2,-2,-2,-2,0
 ,0,1,0,0,0,0,0,0,0,0,1,1,-1,-1,0,0,1,0,0,0] { 29:120a }
,[168,-168,-40,40,8,-8,8,-8,8,-8,6,6,-3,0,0,0,0,0,0,0
 ,0,0,0,-2,-6,-6,2,-2,2,-2,3,-2,2,2,-2,1,-1,1,-1,-1
 ,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,-1] { 31:168a' }
,[189,189,-39,-39,21,21,1,1,-3,-3,9,0,0,-3,-3,-1,-5,-5,-1,1
 ,1,-1,-1,-1,9,0,3,3,3,3,0,0,0,1,1,0,0,0,0,0
 ,0,0,1,1,-1,-1,0,-1,1,1,-1,-1,1,1,0,0,0,-1,0,-1] { 33:189c }
,[189,189,-51,-51,-3,-3,13,13,-3,-3,9,0,0,-3,-3,1,1,1,1,-3
 ,-3,1,1,-1,9,0,-3,-3,-3,-3,0,0,0,1,1,0,0,0,0,0
 ,0,0,1,1,1,1,0,-1,-1,-1,1,1,1,1,0,0,0,-1,0,-1] { 35:189b }
,[189,189,21,21,-3,-3,-11,-11,-3,-3,9,0,0,9,9,1,1,1,1,1
 ,1,1,1,-1,9,0,-3,-3,-3,-3,0,0,0,1,1,0,0,0,0,0
 ,0,0,-1,-1,-1,-1,0,-1,1,1,1,1,1,1,0,0,0,-1,0,-1] {37:189a }
,[210,-210,-10,10,-14,14,10,-10,2,-2,-15,-6,3,6,-6,2,2,-2,-2,-2
 ,2,-2,2,0,15,6,-1,-1,1,1,-3,2,-2,1,-1,1,-1,-1,1,-1
 ,1,0,0,0,0,0,0,0,0,0,-1,1,-1,1,0,0,0,0,0,0] { 41:210b' }
,[210,210,50,50,2,2,2,2,-6,-6,15,3,0,-2,-2,2,2,2,2,-2
 ,-2,-2,-2,0,15,3,-1,-1,-1,-1,0,-1,-1,-1,-1,2,2,2,2,0
 ,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,1,1,0,0,0,0] { 40:210a }
,[216,216,-24,-24,24,24,8,8,0,0,-9,0,0,0,0,4,-4,-4,4,0
 ,0,0,0,1,-9,0,-3,-3,-3,-3,0,0,0,-1,-1,0,0,0,0,0
 ,0,-1,0,0,0,0,0,1,1,1,1,1,-1,-1,0,0,-1,1,0,1] { 43:216a }
,[280,280,40,40,24,24,8,8,0,0,-5,-8,-2,0,0,-4,4,4,-4,0
 ,0,0,0,0,-5,-8,1,-3,-3,1,-2,0,0,-1,-1,-2,-2,0,0,0
 ,0,0,0,0,0,0,1,0,0,0,-1,-1,1,1,0,0,0,0,1,0] { 47:280b }
,[280,-280,40,-40,-8,8,-8,8,8,-8,10,10,1,0,0,0,0,0,0,0
 ,0,0,0,0,-10,-10,-2,2,-2,2,-1,2,-2,-2,2,-1,1,-1,1,-1
 ,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1,0] { 46:280a' }
,[315,-315,45,-45,-21,21,3,-3,3,-3,0,-9,0,-5,5,-3,-3,3,3,3
 ,-3,-1,1,0,0,9,0,0,0,0,0,-3,3,0,0,0,0,0,0,0
 ,0,0,1,-1,1,-1,0,0,0,0,0,0,0,0,-1,1,0,0,0,0] { 49:315a' }
,[336,-336,16,-16,16,-16,-16,16,0,0,6,-6,0,0,0,0,0,0,0,0
 ,0,0,0,1,-6,6,-2,2,-2,2,0,2,-2,2,-2,2,-2,2,-2,0
 ,0,0,0,0,0,0,0,-1,-1,1,0,0,0,0,0,0,0,1,0,-1] { 51:336a' }
,[378,378,-30,-30,-6,-6,2,2,-6,-6,-9,0,0,6,6,2,2,2,2,-2
 ,-2,2,2,-2,-9,0,3,3,3,3,0,0,0,-1,-1,0,0,0,0,0
 ,0,0,0,0,0,0,0,-2,0,0,-1,-1,-1,-1,0,0,0,1,0,1] { 53:378a }
,[405,-405,-45,45,-27,27,-3,3,-3,3,0,0,0,-3,3,3,3,-3,-3,5
 ,-5,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 ,0,-1,-1,1,-1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0] { 55:405a' }
,[420,420,20,20,4,4,-12,-12,4,4,0,-3,3,-4,-4,0,0,0,0,-4
 ,-4,0,0,0,0,-3,-4,4,4,-4,3,1,1,0,0,-1,-1,1,1,1
 ,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0] { 57:420a }
,[512,512,0,0,0,0,0,0,0,0,-16,8,-4,0,0,0,0,0,0,0
 ,0,0,0,2,-16,8,0,0,0,0,-4,0,0,0,0,0,0,0,0,0
 ,0,1,0,0,0,0,-1,2,0,0,0,0,0,0,0,0,1,-1,-1,-1] { 59:512a }
]

set !e7_characters = [vec]:
   let tensor ([int] x,[int] y) = [int]: for xi@i in x do xi*y[i] od
   , comp = complement(60,E7_positions)
   , result = for :60 do null(0) od { start with empty slots }
in for p@i in E7_positions
   do result[comp[i]]:=tensor(result[p]:=e7_half_table[i],e7_half_table[0])
   od; result

{ element order and class size, one column for each class in Magma order }

set e7_profile = mat: { shape (4,60) }
   let e7_orders_sizes = mat:
      [ 1,2,2,2,2,2,2,2,2,2,3,3,3,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6
       ,6,6,6,6,6,7,8,8,8,8,9,10,10,10,12,12,12,12,12,12,14,15,18,30
      | 1,1,63,63,315,315,945,945,3780,3780,672,2240
         ,13440,3780,3780,7560,7560,7560,7560,11340,11340,45360,45360,48384
         ,672,2240,10080,10080,10080,10080,13440,20160,20160,30240,30240,40320
       ,40320,40320,40320,120960,120960,207360,90720,90720
         ,90720,90720,161280,48384,145152,145152,60480,60480
	 ,60480,60480,120960,120960,207360,96768,161280,96768
      ]
   , sgn_index=1, reflection_index=3
in e7_orders_sizes ^ ^[e7_characters[sgn_index],e7_characters[reflection_index]]

set Magma_positions_E7 (WeylClassTable Wct) = [int]: { |Wct| classes to Magma }
   let Magma_ranked = [int]: { column indices of |e6_profile| ranked |lex_leq| }
      ranking(rlex_leq@(vec,vec))([vec]:e7_profile)
   then profiles_sorted = for r in Magma_ranked do e7_profile[r] od
   , lookup = binary_lookup(rlex_leq@(vec,vec))
   in for w@i in Wct.class_representatives
      do let prof = vec:
         [order(w),Wct.class_size(i),Wct.sign[i], Wct.reflection[i]]
      in Magma_ranked[lookup(prof,profiles_sorted).requisition]
      od

set to_special_E7 = (int i) int:
   case i
   in 0{sp}, 1{sp}
   , 2{sp}, 3{sp}
   , 29, 28
   , 6{sp}, 16, 17, 9{sp}
   , 10{sp}, 11{sp}
   , 16, 48, 49, 17
   , 16{sp}, 17{sp}
   , 48, 49
   , 56, 57
   , 22{sp}, 28, 29, 25{sp}, 26{sp}, 27{sp}
   , 28{sp}, 29{sp}
   , 30{sp}, 31{sp}
   , 32{sp}, 33{sp}, 34{sp}, 35{sp}, 54, 55
   , 38{sp}, 39{sp}, 40{sp}, 41{sp}
   , 54, 55
   , 48, 48, 49, 49
   , 48{sp}, 49{sp}
   , 56, 57
   , 52{sp}, 53{sp}
   , 54{sp}, 55{sp}
   , 56{sp}, 57{sp}
   , 58{sp}, 58
   else error("Wrong E7 irrep number")
   esac

set character_table_E7 (WeylClassTable Wct) = CharacterTable:
   let M_pos = Magma_positions_E7(Wct)
   then class_names = [string]:
       for w in Wct.class_representatives
       do let (P,n)=class_signature_E7(w) in P.compressed_string + n
       od
   , chars = for line in e7_characters do for p in M_pos do line[p] od od
   then named_chars = [[int],string]:
      let limit = Wct.root_datum.nr_of_posroots+1 in
      for chi@i in chars
      do let degree =
         first(limit,(int k) bool: Wct.inner(chi,Wct.sym_power_refl(k))>0)
      in ( chi
	 , case i in "trivial", "sign", "sign*reflection", "reflection"
	   else to_string("irrep(dim:",chi[0],",deg:",degree,")")
	   esac
	 )
      od
   in character_table(Wct,class_names,named_chars,to_special_E7@int)

set character_table_E7 = (RootDatum->CharacterTable):
((RootDatum rd) CharacterTable: character_table_E7(class_table_E7(rd))
, standard_datum_E7
).memo_1_rd

set character_table_E7() = CharacterTable:
   character_table_E7(standard_datum_E7)
