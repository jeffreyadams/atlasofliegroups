<basic.at
<combinatorics.at
<W_classes.at
<class_tables.at { for |class_table_E7| }
<character_tables.at { for type |CharacterTable| }

{ To save space we shall list only half of the characters, in Magma ordering.
  The first is the sign character, and the missing characters are formed from
  the given ones by tensoring with this sign character. We just need to indicate
  the indices in the Magma numbering of the given characters; the tensor
  products will give the caracters at the missing indices, in increasing order.
}
set E7_positions = [int]:
[1,3,5,9,8,11,15,14,17,19,21,27,24,26,29
,31,33,35,37,41,40,43,47,46,49,51,53,55,57,59]

{ the characters in the subset |dual_map| under Magma numbering }
set !e7_table = [vec]: { 60 entries each, broken 20|20|20 across lines }
[[1,-1,-1,1,1,-1,1,-1,1,-1,1,1,1,1,-1,-1,-1,1,1,1
 ,-1,1,-1,1,-1,-1,-1,-1,1,1,-1,-1,1,1,-1,1,-1,-1,1,1
 ,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,1,-1,1,-1,1,-1,-1] { the sign character }
,[7,-7,5,-5,-1,1,3,-3,-1,1,4,-2,1,3,-3,3,-1,1,-3,-1
 ,1,1,-1,2,-4,2,2,-2,2,-2,-1,-2,2,0,0,1,-1,1,-1,-1
 ,1,0,-1,1,1,-1,1,-2,0,0,0,0,2,-2,0,0,0,-1,-1,1] { the refection character }
,[15,15,-5,-5,7,7,3,3,-1,-1,0,-3,3,-1,-1,1,-3,-3,1,3
 ,3,1,1,0,0,-3,-2,-2,-2,-2,3,1,1,0,0,1,1,1,1,-1
 ,-1,1,-1,-1,1,1,0,0,0,0,-2,-2,0,0,-1,-1,1,0,0,0]
,[21,-21,11,-11,5,-5,5,-5,-3,3,6,3,0,1,-1,3,3,-3,-3,1
 ,-1,1,-1,1,-6,-3,2,-2,2,-2,0,1,-1,2,-2,-2,2,-2,2,0
 ,0,0,1,-1,1,-1,0,-1,-1,1,0,0,0,0,-1,1,0,1,0,-1]
,[21,21,9,9,-3,-3,1,1,-3,-3,6,3,0,5,5,3,-1,-1,3,1
 ,1,-1,-1,1,6,3,0,0,0,0,0,3,3,-2,-2,0,0,0,0,0
 ,0,0,1,1,-1,-1,0,1,-1,-1,0,0,2,2,-1,-1,0,1,0,1]
,[27,27,15,15,3,3,7,7,3,3,9,0,0,3,3,5,1,1,5,-1
 ,-1,1,1,2,9,0,3,3,3,3,0,0,0,1,1,0,0,0,0,0
 ,0,-1,-1,-1,1,1,0,2,0,0,-1,-1,1,1,0,0,-1,-1,0,-1]
,[35,35,15,15,11,11,7,7,3,3,5,-1,2,-1,-1,1,5,5,1,3
 ,3,1,1,0,5,-1,3,-1,-1,3,2,-1,-1,1,1,0,0,2,2,0
 ,0,0,1,1,-1,-1,-1,0,0,0,1,1,-1,-1,-1,-1,0,0,-1,0]
,[35,-35,5,-5,3,-3,-5,5,3,-3,5,-1,2,7,-7,1,1,-1,-1,-1
 ,1,-1,1,0,-5,1,-1,3,-3,1,-2,-3,3,1,-1,-2,2,0,0,0
 ,0,0,-1,1,-1,1,-1,0,0,0,1,-1,1,-1,-1,1,0,0,1,0]
,[56,-56,24,-24,-8,8,8,-8,0,0,11,2,2,0,0,4,-4,4,-4,0
 ,0,0,0,1,-11,-2,3,-1,1,-3,-2,2,-2,-1,1,0,0,2,-2,0
 ,0,0,0,0,0,0,-1,-1,1,-1,1,-1,-1,1,0,0,0,1,1,-1]
,[70,-70,10,-10,-10,10,6,-6,-2,2,-5,7,1,2,-2,-2,-2,2,2,2
 ,-2,-2,2,0,5,-7,1,1,-1,-1,-1,1,-1,3,-3,-1,1,1,-1,1
 ,-1,0,0,0,0,0,1,0,0,0,1,-1,1,-1,1,-1,0,0,-1,0]
,[84,84,4,4,20,20,4,4,4,4,-6,3,3,4,4,0,0,0,0,4
 ,4,0,0,-1,-6,3,-2,2,2,-2,3,-1,-1,-2,-2,1,1,-1,-1,1
 ,1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,1,1,0,-1,0,-1]
,[105,-105,-25,25,-7,7,9,-9,1,-1,0,6,3,-3,3,3,3,-3,-3,-3
 ,3,1,-1,0,0,-6,-4,4,-4,4,-3,-2,2,0,0,1,-1,1,-1,1
 ,-1,0,1,-1,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
,[105,-105,35,-35,1,-1,5,-5,1,-1,15,-3,-3,5,-5,5,1,-1,-5,1
 ,-1,-1,1,0,-15,3,-1,-1,1,1,3,-1,1,-1,1,1,-1,-1,1,1
 ,-1,0,1,-1,-1,1,0,0,0,0,-1,1,1,-1,1,-1,0,0,0,0]
,[105,-105,-5,5,17,-17,-3,3,-7,7,0,6,3,-3,3,1,-3,3,-1,1
 ,-1,-1,1,0,0,-6,-2,-2,2,2,-3,-2,2,0,0,-1,1,1,-1,-1
 ,1,0,1,-1,-1,1,0,0,0,0,-2,2,0,0,0,0,0,0,0,0]
,[120,120,40,40,-8,-8,8,8,0,0,15,-6,0,0,0,4,-4,-4,4,0
 ,0,0,0,0,15,-6,1,1,1,1,0,-2,-2,-1,-1,-2,-2,-2,-2,0
 ,0,1,0,0,0,0,0,0,0,0,1,1,-1,-1,0,0,1,0,0,0]
,[168,-168,-40,40,8,-8,8,-8,8,-8,6,6,-3,0,0,0,0,0,0,0
 ,0,0,0,-2,-6,-6,2,-2,2,-2,3,-2,2,2,-2,1,-1,1,-1,-1
 ,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,-1]
,[189,189,-39,-39,21,21,1,1,-3,-3,9,0,0,-3,-3,-1,-5,-5,-1,1
 ,1,-1,-1,-1,9,0,3,3,3,3,0,0,0,1,1,0,0,0,0,0
 ,0,0,1,1,-1,-1,0,-1,1,1,-1,-1,1,1,0,0,0,-1,0,-1]
,[189,189,-51,-51,-3,-3,13,13,-3,-3,9,0,0,-3,-3,1,1,1,1,-3
 ,-3,1,1,-1,9,0,-3,-3,-3,-3,0,0,0,1,1,0,0,0,0,0
 ,0,0,1,1,1,1,0,-1,-1,-1,1,1,1,1,0,0,0,-1,0,-1]
,[189,189,21,21,-3,-3,-11,-11,-3,-3,9,0,0,9,9,1,1,1,1,1
 ,1,1,1,-1,9,0,-3,-3,-3,-3,0,0,0,1,1,0,0,0,0,0
 ,0,0,-1,-1,-1,-1,0,-1,1,1,1,1,1,1,0,0,0,-1,0,-1]
,[210,-210,-10,10,-14,14,10,-10,2,-2,-15,-6,3,6,-6,2,2,-2,-2,-2
 ,2,-2,2,0,15,6,-1,-1,1,1,-3,2,-2,1,-1,1,-1,-1,1,-1
 ,1,0,0,0,0,0,0,0,0,0,-1,1,-1,1,0,0,0,0,0,0]
,[210,210,50,50,2,2,2,2,-6,-6,15,3,0,-2,-2,2,2,2,2,-2
 ,-2,-2,-2,0,15,3,-1,-1,-1,-1,0,-1,-1,-1,-1,2,2,2,2,0
 ,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,1,1,0,0,0,0]
,[216,216,-24,-24,24,24,8,8,0,0,-9,0,0,0,0,4,-4,-4,4,0
 ,0,0,0,1,-9,0,-3,-3,-3,-3,0,0,0,-1,-1,0,0,0,0,0
 ,0,-1,0,0,0,0,0,1,1,1,1,1,-1,-1,0,0,-1,1,0,1]
,[280,280,40,40,24,24,8,8,0,0,-5,-8,-2,0,0,-4,4,4,-4,0
 ,0,0,0,0,-5,-8,1,-3,-3,1,-2,0,0,-1,-1,-2,-2,0,0,0
 ,0,0,0,0,0,0,1,0,0,0,-1,-1,1,1,0,0,0,0,1,0]
,[280,-280,40,-40,-8,8,-8,8,8,-8,10,10,1,0,0,0,0,0,0,0
 ,0,0,0,0,-10,-10,-2,2,-2,2,-1,2,-2,-2,2,-1,1,-1,1,-1
 ,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1,0]
,[315,-315,45,-45,-21,21,3,-3,3,-3,0,-9,0,-5,5,-3,-3,3,3,3
 ,-3,-1,1,0,0,9,0,0,0,0,0,-3,3,0,0,0,0,0,0,0
 ,0,0,1,-1,1,-1,0,0,0,0,0,0,0,0,-1,1,0,0,0,0]
,[336,-336,16,-16,16,-16,-16,16,0,0,6,-6,0,0,0,0,0,0,0,0
 ,0,0,0,1,-6,6,-2,2,-2,2,0,2,-2,2,-2,2,-2,2,-2,0
 ,0,0,0,0,0,0,0,-1,-1,1,0,0,0,0,0,0,0,1,0,-1]
,[378,378,-30,-30,-6,-6,2,2,-6,-6,-9,0,0,6,6,2,2,2,2,-2
 ,-2,2,2,-2,-9,0,3,3,3,3,0,0,0,-1,-1,0,0,0,0,0
 ,0,0,0,0,0,0,0,-2,0,0,-1,-1,-1,-1,0,0,0,1,0,1]
,[405,-405,-45,45,-27,27,-3,3,-3,3,0,0,0,-3,3,3,3,-3,-3,5
 ,-5,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 ,0,-1,-1,1,-1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0]
,[420,420,20,20,4,4,-12,-12,4,4,0,-3,3,-4,-4,0,0,0,0,-4
 ,-4,0,0,0,0,-3,-4,4,4,-4,3,1,1,0,0,-1,-1,1,1,1
 ,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0]
,[512,512,0,0,0,0,0,0,0,0,-16,8,-4,0,0,0,0,0,0,0
 ,0,0,0,2,-16,8,0,0,0,0,-4,0,0,0,0,0,0,0,0,0
 ,0,1,0,0,0,0,-1,2,0,0,0,0,0,0,0,0,1,-1,-1,-1]]

set !e7_characters = [vec]:
   let tensor ([int] x,[int] y) = [int]: for xi@i in x do xi*y[i] od
   , comp = complement(60,E7_positions)
   , result = for :60 do null(0) od { start with empty slots }
in for p@i in E7_positions
   do result[p]:=e7_table[i]; result[comp[i]]:=tensor(e7_table[i],e7_table[0])
   od; result

{ element order and class size, one column for each class in Magma order }

set e7_profile = mat: { shape (4,60) }
   let e7_orders_sizes = mat:
      [ 1,2,2,2,2,2,2,2,2,2,3,3,3,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6
       ,6,6,6,6,6,7,8,8,8,8,9,10,10,10,12,12,12,12,12,12,14,15,18,30
      | 1,1,63,63,315,315,945,945,3780,3780,672,2240
         ,13440,3780,3780,7560,7560,7560,7560,11340,11340,45360,45360,48384
         ,672,2240,10080,10080,10080,10080,13440,20160,20160,30240,30240,40320
       ,40320,40320,40320,120960,120960,207360,90720,90720
         ,90720,90720,161280,48384,145152,145152,60480,60480
	 ,60480,60480,120960,120960,207360,96768,161280,96768
      ]
   , sgn_index=1, reflection_index=3
in e7_orders_sizes ^ ^[e7_characters[sgn_index],e7_characters[reflection_index]]

set Magma_reorder_E7(WeylClassTable Wct) = [int]: { map Magma to |Wct| numbers }
   let  Wct_prof = mat: { with shape (4,60) }
      let reps=Wct.class_representatives, sizes=Wct.class_sizes in
      4 # for j:Wct.n_classes
	  do [reps[j].order, sizes[j], Wct.sign[j], Wct.reflection[j] ]
	  od
   then profile_ranked = [int]: { columns |e7_profile| ranked |lex_lesseq| }
      sort(#e7_profile
	  ,(int i,int j)bool: lex_lesseq(e7_profile[i],e7_profile[j]))
   , Wct_ranked = { columns of |Wct_prof| ranked by |lex_lesseq| }
      sort(#Wct_prof,(int i,int j): lex_lesseq(Wct_prof[i],Wct_prof[j]))
   in compose_permutations(Wct_ranked,inverse(profile_ranked))

set character_table_E7(RootDatum rd) = CharacterTable:
   let Wct = class_table_E7(rd)
   then reordering = Magma_reorder_E7(Wct)
   then E7_name(vec chi) = string:
      let psi = null(#chi)
      then degree = { first reorder |chi| for |Wct| into |psi| }
	 for j@i in reordering do psi[j]:=chi[i] od { inverse reordering }
      ;  first(Wct.root_datum.nr_of_posroots+1
	      ,(int k) bool: Wct.inner(psi,Wct.sym_power_refl(k)).>
	      )
      in to_string("irrep(dim:",psi[0],",deg:",degree,")")
   then classes = [WeylElt,classical_class,string]:
      let reps = Wct.class_representatives
      in for j in reordering
	 do (reps[j],null_class()
	    ,let (P,n)=class_signature_E7(reps[j]) in P.compressed_string + n
	    )
	 od
   ,  irreps = [classical_irrep,string,[int]]:
      for character@i in e7_characters
      do (null_irrep()
         ,case i in "trivial", "sign", "sign*reflection", "reflection"
	  else E7_name(character)
	  esac
	 ,character
	 )
      od
   in character_table(Wct,classes,irreps)

{ voluntarily override previous definition to memoize for |standard_datum_E7| }
set character_table_E7 = (RootDatum->CharacterTable):
   let ct= trivial_character_table { place holder value }
in (RootDatum rd) CharacterTable:
   if rd != standard_datum_E7 then character_table_E7(rd) { no recursion! }
   elif =ct.root_datum.rank { whether this is the first time we are called }
   then ct:=character_table_E7(rd) { compute and store the first time }
   else ct { any next time just return the previously computed value }
   fi


set character_table_E7() = CharacterTable:
   character_table_E7(standard_datum_E7)
