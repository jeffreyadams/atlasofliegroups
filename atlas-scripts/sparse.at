<basic.at

{ multiplication of a square integer matrix times
  a square sparse matrix on the right}

{ S is given by a list of columns, each a list of row number-coefficient pairs }
set_type [ sparse_column = [(int,int)], sparse_mat=[sparse_column] ]

set sparse(mat M) = sparse_mat:
  for C in M
  do for coef@i in C do if =coef then [] else [(i,coef)] fi od.##
  od

set unsparse(sparse_mat S, int height) = mat:
  for C in S do let v=null(height) in for (i,coef) in C do v[i]+:=coef od; v od

set * (mat M, sparse_mat S) = mat:
  for C in S { loop over columns of sparse matrix }
  do (mat: n_rows(M)#for (i,) in C do M[i] od)
   * (vec: for (,coef) in C do coef od)
  od
