< FPP_globalDirac.at

set G=F4_s
set start = elapsed_ms(), X = KGB(G)
set Uhash = make_Param_hash()
unipotents_to_hash(G,Uhash)
set inv_hash = make_mat_hash(), vd = FPP_vertex_data(G)
void: for x in X do inv_hash.match(x.involution) od
set NumInvs = inv_hash.size(), pol_hash = make_KTypePol_hash()
set dlambda_hashes = for i:NumInvs do make_vec_hash() od
set LvdEtAlia = for i:NumInvs do [(VertexData,vec,vec,
    	 [[FacetVertsIndex]])]:[] od
set old_facet_verbose = facet_verbose, old_time_verbose = time_verbose,
    old_test_verbose = test_verbose, old_test_slightly_verbose = test_slightly_verbose,
    old_deform_flag = deform_flag, old_revert_flag = revert_flag
time_verbose:=false
test_verbose:=false
test_slightly_verbose:=false
facet_verbose:=false
deform_flag :=false
revert_flag:=false
unipotents_to_hash(G,Uhash)
if coh_ind_flag
then coh_ind_unip_long(G,Uhash)
fi
set start_data = [(KGBElt, ratvec, VertexData, vec, vec, [[FacetVertsIndex]])]:
    for x@j in X
    do{X} let twists = all_lambda_differential_0(x)
      	  then FPPbig = FPP_lambdas_big(x, vd, inv_hash, dlambda_hashes, LvdEtAlia)
	  in for (lambda0, Lvd, Perm, mapAct,LF) in FPPbig
      	     do for tau in twists
	      	do (x, lambda0+tau, Lvd, Perm, mapAct, {LF}
		for L@d in LF
		   do for v in L do if is_pos_on_LKTs(parameter(x,lambda0+tau,
		      facet_bary(Lvd.list,v[:d+1])))
				    then [v]
				    else []
				    fi
				 od.##
		   od
		   )
		od
	     od.##
     od.## {X}
{ set nums = for j:#start_data do [j] od
set lambda_height(KGBElt x, ratvec lambda) = int:
    rat_as_int(((1+x.involution)*lambda)*(x.real_form.rho_check))
set f(vec v) = int: {minus sign sorts by decreasing height}
    let (x,lambda,,,,) = start_data[v[0]]
    in lambda_height(x,lambda)
set sorted_nums = sort_by(f@vec)(nums)
set sorted_data = [(KGBElt, ratvec, VertexData, vec, vec, [[FacetVertsIndex]])]:
    for v in sorted_nums do start_data[v[0]] od}
set sorted_data = start_data
set times = [int]: null(#start_data)
set current = elapsed_ms()
prints("Prep time was ",print_time_string(current - start),
	     "; embarking on FPP_local.")
start:=current
set many_lists = for (x, lambda, Lvd, Perm, mapAct, LF)@j in sorted_data
    	       	 do let list = local_test_GEO_hash_one_level(x, lambda, vd, Lvd, Perm,
		    	       				mapAct, LF, pol_hash, Uhash)
		    then () = times[j]:= elapsed_ms() - current
		    then () = current:= elapsed_ms()
		    then () = if j%100=0 then prints("j = ",j," of ",#sorted_data,
		    	      	 "; time so far ",print_time_string(current - start)) fi
		    in list
		 od
set longest = max_loc(times)
prints(new_line,"Total time = ", print_time_string(current-start),
       	      "; max time = ",print_time_string(times[longest]),
	      " for (x,lambda) = ",let (x,lambda,,,,) = sorted_data[longest] in (x,lambda))
time_verbose:=old_time_verbose
test_verbose:=old_test_verbose
test_slightly_verbose:=old_test_slightly_verbose
facet_verbose:=old_facet_verbose
deform_flag :=old_deform_flag
revert_flag := old_revert_flag
