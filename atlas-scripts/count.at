{meant to count invocations of a function. Do use() in the function.}
set_type [Counter = ( (void -> int) use_count, (void -> void) use)  ]

set make_counter () = Counter:
    let ticker = int:0
    in (( -> int): {use_count}@int: ticker
       ,( -> ): {use} @: let () = ticker+:=1 in ())

set unitary_test_counter = make_counter()
