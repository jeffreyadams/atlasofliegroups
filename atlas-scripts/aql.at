<K_highest_weights.at {for all_parameters_x_gamma}
<hermitian.at

set aql_verbose=false

{. Given a parameter p for G and a real parabolic P, list all Weyl(G)
  conjugates of the infinitesimal character of p that are dominant for L. .}
set inf_chars_dom_for_L (Param p, Parabolic P)=[ratvec]:
   let rd=root_datum(p), L=Levi(P)
   then rdl=root_datum(L), orb=W_orbit(rd,infinitesimal_character(p))
in for v in orb do if is_dominant(rdl,v) then [v] else [] fi od.##

{. Given an infinitesimal character gamma for G and a theta-stable parabolic P,
   list all infinitesimal characters v for L so that v+rho(u) is the
   infinitesimal character of p. .}
set inf_chars_for_L (ratvec gamma,Parabolic P)=[ratvec]:
   let rd=root_datum(real_form(P)), L=Levi(P)
   then rdl=root_datum(L), orb=W_orbit(rd,gamma), rho=rho_u(P)
in for v in orb do if is_dominant(rdl,v-rho) then [v-rho] else [] fi od.##

{. Given a parameter p for G and a theta-stable parabolic P, list all
  infinitesimal characters v for L so that v+rho(u) is the infinitesimal
  character of p. .}
set inf_chars_for_L (Param p,Parabolic P)=[ratvec]:
   inf_chars_for_L(infinitesimal_character(p),P)

{. List all one-dimensional unitary characters with given
  infinitesimal character. .}
set one_dim_params_gamma (ratvec ic, Parabolic P)=[Param]:
   let L=Levi(P) in let n=#KGB(L) in let x=KGB(L,n-1) in
   let G=real_form(P) in
   let list=all_parameters_x_gamma(x,ic) in
   let result=[] in for p in list do
   if is_unitary_character(p) then
   result#:=p fi od; result

{. List all one-dimensional unitary characters, in the weakly fair range,
  of L, with given infinitesimal character. .}
set wf_one_dim_params (ratvec ic, Parabolic P)=[Param]:
   let list=one_dim_params_gamma(ic,P) in let G=real_form(P) in
   let result=[] in for p in list do if is_weakly_fair(p,G) then
   result#:=p fi od; result

{. Auxiliary function: List of all unitary weakly fair Aq(lambda) modules
  with infinitesimal character of p, and induced from P. .}
set wf_aqs_param_pol (Param p, Parabolic P)=[(Param,ParamPol)]:
   let G=real_form(P) in
   let ics=inf_chars_for_L(p,P) in
   let result=[] in
   for v in ics do
    let list=wf_one_dim_params (v,P) in
     for q in list do let aq=theta_induce_irreducible(q,G) in
     result#:=(q,aq)
     od od; result

{. Auxiliary function: As previous function, except a list of all
   parameters occurring as constituents of such modules. .}
set wf_aqs_param (Param p, Parabolic P)=[(Param,Param)]:
   let result=[] in
   for pair in wf_aqs_param_pol (p,P) do let (pL,Q)=pair in
     let R=%Q in for r in R do let (k,q)=r in
     if k!=1 then prints("Warning: negative coefficient!") fi;
     result#:=(pL,q) od od;
     result

{. Decide whether p is the parameter of a (constituent of a) unitary
  weakly fair Aq(lambda) induced from parabolic P. .}
set is_weakly_fair_Aq_from_P (Param p, Parabolic P)=bool:
   let list=wf_aqs_param (p,P) in
   not none(for pair in list do let (,q)=pair in q=p od)

{. List all proper theta-stable parabolics for G that are not Borels. .}
set special_theta_stable_parabolics(RealForm G)=[Parabolic]:
  let result=[] in
  for P in theta_stable_parabolics(G) do
  if #S(P)!=0 and #S(P)!=semisimple_rank(G) then
  result#:=P fi od; result

{. List all parameters of constituents of weakly fair Aq(lambda) modules with
  the same infinitesimal character as p. .}
set all_wf_Aq_with_ic_of(Param p)=[Param]:
  let list=[] in for P in theta_stable_parabolics(real_form(p)) do
  let aqs=wf_aqs_param (p,P) in for pair in aqs do let (,q)=pair in
  list#:=q od od; list


{. Determine whether parameter p is that of a (constituent of a)
  unitary weakly fair Aq(lambda) module. .}
set is_weakly_fair_Aq (Param p) = bool:
   if is_zero(p) then prints("Zero Module");false
   elif not is_final(p) then prints("Parameter is not final.");false
   elif is_weakly_good_Aq(p) then
     if aql_verbose then prints("This is a (weakly) good Aq.") fi; true
   else
     let G=real_form(p) in
     let tsp=special_theta_stable_parabolics(G) in
     if not none (for P in tsp do is_weakly_fair_Aq_from_P(p,P) od) then
       if aql_verbose then prints("This is a weakly fair Aq.") fi;true
     else false
     fi
   fi

{. List all one-dimensional unitary parameters pL so that p is theta-induced
  from pL in the weakly fair range. .}
set is_wf_induced_from_one_dim (Param p) = [(Parabolic,Param)]:
   let result=[] in
   if is_zero(p) then prints("Zero Module")
   elif not is_final(p) then prints("Parameter is not final.")
   else
     let G=real_form(p) in
     if is_good_Aq(p) then
       if aql_verbose then prints("This is a (weakly) good Aq.") fi;
       result#:=reduce_good_range(p)
     else
       let tsp=special_theta_stable_parabolics(G) in
       for P in tsp do
	 for pair in wf_aqs_param(p,P) do
	   let (pL,q)=pair in
	   if p=q then prints("Weakly fair Aq"); result#:=(P,pL) fi
	 od
       od
     fi
   fi;
   result

{. Auxiliary function: List of all modules with infinitesimal character
  of p, that are induced from a unitary character on the Levi of P. .}
set one_dim_real_induced_param_pol (Param p, Parabolic P)=[(Param,ParamPol)]:
   let G=real_form(P) in
   let ics=inf_chars_dom_for_L(p,P) in
   let result=[] in
   for v in ics do
    let list=one_dim_params_gamma (v,P) in
     for q in list do let mod=real_induce_irreducible(q,G) in
     result#:=(q,mod)
     od od; result

{. Auxiliary function: As previous function, except a list of all
   parameters occurring as constituents of such modules. .}
set one_dim_real_induced_param (Param p, Parabolic P)=[(Param,Param)]:
   let result=[] in
   for pair in one_dim_real_induced_param_pol (p,P) do let (pL,Q)=pair in
     let R=%Q in for r in R do let (k,q)=r in
     result#:=(pL,q) od od;
     result

{. Decide whether p is the parameter of a (constituent of a) module
  induced from a unitary character on the real parabolic P. .}
set is_real_induced_from_character_from_P (Param p, Parabolic P)=bool:
   let list=one_dim_real_induced_param (p,P) in
   not none(for pair in list do let (,q)=pair in q=p od)

{. Determine whether parameter p is that of a (constituent of a) module (real)
  induced from a unitary character. .}
set is_real_induced_from_one_dimensional (Param p) = bool:
   if is_zero(p) then prints("Zero Module");false
   else if not is_final(p) then prints("Parameter is not final.");false
   else let G=real_form(p) in
   let rps=all_real_parabolics(G) in if
   not none (for P in rps do
   is_real_induced_from_character_from_P(p,P) od) then
   true else false fi fi fi

{. List all one-dimensional unitary parameters pL so that p is real-induced
  from pL .}
set real_induced_from_one_dim(Param p)=[(Parabolic,Param)]:
   let result=[] in if is_zero(p) then prints("Zero Module")
   else if not is_final(p) then prints("Parameter is not final.") else
   let G=real_form(p) in
   let rps=all_real_parabolics(G) in
   for P in rps do for pair in one_dim_real_induced_param (p,P) do
   let (pL,q)=pair in if p=q then
   result#:=(P,pL) fi od od fi fi;
   result

{. List of all unitary weakly fair Aq(lambda) modules
  with infinitesimal character gamma, and induced from P. .}
set wf_aqs_param_pol (ratvec gamma, Parabolic P)=[(Param,ParamPol)]:
   let G=real_form(P) in
   let ics=inf_chars_for_L(gamma,P) in
   let result=[] in
   for v in ics do
    let list=wf_one_dim_params (v,P) in
     for q in list do let aq=theta_induce_irreducible(q,G) in
     result#:=(q,aq)
     od od; result

{. As previous function, except a list of all
   parameters occurring as constituents of such modules. .}
set wf_aqs_param (ratvec gamma, Parabolic P)=[(Param,Param)]:
   let result=[] in
   for pair in wf_aqs_param_pol (gamma,P) do let (pL,Q)=pair in
     let R=%Q in for r in R do let (k,q)=r in
     if k!=1 then prints("Warning: negative coefficient!") fi;
     result#:=(pL,q) od od;
     result

{. Test whether the irreducible given by a parameter is unitary;
   if strongly regular, then check if good Aq. Otherwise, check
   whether it is real or theta induced from a unitary character;
  if not, compute the hermitian form. .}
set is_unitary_by_cases (Param p)=bool:
   let G=real_form(p) in let rd=root_datum(G) in
   let ic=infinitesimal_character(p) in
   if is_strongly_regular(p) then
   prints("This is strongly regular."); is_good_Aq(p)
    else prints("now checking for real_induced");
      if (is_integral(rd,2*ic) and
      is_real_induced_from_one_dimensional(p)) then true
    else prints("now checking for equal_rank wf Aq");
      if (is_equal_rank(G) and is_integral(rd,ic-rho(G)) and
        is_weakly_fair_Aq(p)) then true
     else prints("now checking if uneq_rank_Aq");
      if (is_integral(rd,2*ic) and not is_equal_rank(G) and
      is_weakly_fair_Aq(p)) then true
     else prints("now computing form"); is_unitary(p) fi fi fi fi

{. Test whether a representation is unitary, checking first whether
   it is strongly regular. .}
set is_unitary_sr (Param p)=bool:
   {let G=real_form(p) in let ic=infinitesimal_character(p) in
   let rd=root_datum(G) in}
   if is_strongly_regular(p) then
   prints("This is strongly regular."); is_good_Aq(p)
   else is_unitary(p) fi

{. Test whether a representation is unitary, checking first whether
   it is strongly regular; if not, reducing it in the (weakly) good range,
   and inducing the hermitian form of the smaller group. This function
   the hermitian form and a boolian. .}
set is_unitary_reduced_with_form (Param p)=(ParamPol,bool):
   let G=real_form(p) in
   if is_strongly_regular(p)
   then if aql_verbose then prints("This is strongly regular.") fi
   ; (null_module(G),is_good_Aq(p))
   elif not is_hermitian(p)
   then if aql_verbose=true then prints("This is not Hermitian.") fi
   ; (null_module(G),false)
   else let (,p_L)=reduce_good_range(p) in
     if aql_verbose
     then prints("Checking unitarity of ",p_L," of ",
                 real_form(p_L)," This is in the  ",goodness(p_L,G)," range")
     fi;
     let hfl=hermitian_form_irreducible(p_L) in
     if aql_verbose then prints(hfl," p_L unitary: ",is_pure(hfl)) fi;
     let result=theta_induce_parampol(param_pol(hfl),G)
     in (result,is_pure(result))
   fi

{. As previous function, but only returns true/false. .}
set is_unitary_reduced (Param p)=bool:
    let (,b)=is_unitary_reduced_with_form(p) in b
